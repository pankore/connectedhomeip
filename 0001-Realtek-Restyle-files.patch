From 85dd87d72eb9feb86b312f4741c443c6905d2faa Mon Sep 17 00:00:00 2001
From: tyrone_shen <tyrone_shen@realsil.com.cn>
Date: Thu, 9 Jan 2025 14:27:43 +0800
Subject: [PATCH] [Realtek] Restyle files

---
 config/realtek_bee/args.gni                   |   5 +-
 config/realtek_bee/bee_arm.gni                |   3 +-
 .../pigweed/realtek_bee/PigweedLoggerMutex.h  |  10 +-
 .../realtek_bee/main/AppTask.cpp              |  46 ++-
 .../realtek_bee/main/BindingHandler.cpp       | 118 ++++----
 .../realtek_bee/main/CHIPDeviceManager.cpp    |  24 +-
 .../realtek_bee/main/DeviceCallbacks.cpp      |  49 ++--
 .../realtek_bee/main/Globals.cpp              |   2 +-
 .../realtek_bee/main/LightSwitch.cpp          | 242 +++++++--------
 .../realtek_bee/main/chipinterface.cpp        |  31 +-
 .../realtek_bee/main/include/AppConfig.h      |  10 +-
 .../realtek_bee/main/include/AppTask.h        |   6 +-
 .../realtek_bee/main/include/BindingHandler.h |  14 +-
 .../main/include/CHIPDeviceManager.h          |   4 +-
 .../main/include/CHIPProjectConfig.h          |   8 +-
 .../main/include/DeviceCallbacks.h            |  12 +-
 .../realtek_bee/main/include/Globals.h        |   1 -
 .../realtek_bee/main/include/LightSwitch.h    | 276 +++++++++---------
 .../lighting-app/realtek_bee/main/AppTask.cpp |  45 ++-
 .../realtek_bee/main/CHIPDeviceManager.cpp    |  28 +-
 .../realtek_bee/main/DeviceCallbacks.cpp      |  63 ++--
 .../lighting-app/realtek_bee/main/Globals.cpp |   2 +-
 .../realtek_bee/main/LightingManager.cpp      |   4 +-
 .../realtek_bee/main/chipinterface.cpp        |   8 +-
 .../realtek_bee/main/include/AppConfig.h      |  12 +-
 .../realtek_bee/main/include/AppTask.h        |  30 +-
 .../main/include/CHIPDeviceManager.h          |   4 +-
 .../main/include/DeviceCallbacks.h            |  12 +-
 .../realtek_bee/main/include/Globals.h        |   1 -
 .../main/include/LightingManager.h            |   2 +-
 .../lock-app/realtek_bee/main/AppTask.cpp     |  40 ++-
 .../realtek_bee/main/BoltLockManager.cpp      |  45 ++-
 .../realtek_bee/main/CHIPDeviceManager.cpp    |  22 +-
 .../realtek_bee/main/DeviceCallbacks.cpp      |  28 +-
 .../lock-app/realtek_bee/main/Globals.cpp     |   2 +-
 .../realtek_bee/main/chipinterface.cpp        |   8 +-
 .../realtek_bee/main/include/AppConfig.h      |  10 +-
 .../realtek_bee/main/include/AppEvent.h       |   1 -
 .../realtek_bee/main/include/AppTask.h        |  22 +-
 .../main/include/BoltLockManager.h            |   4 +-
 .../main/include/CHIPDeviceManager.h          |   4 +-
 .../main/include/DeviceCallbacks.h            |  15 +-
 .../realtek_bee/main/include/Globals.h        |   3 +-
 .../realtek_bee/main/AppTask.cpp              |  41 ++-
 .../realtek_bee/main/CHIPDeviceManager.cpp    |  26 +-
 .../realtek_bee/main/DeviceCallbacks.cpp      |   3 +-
 .../realtek_bee/main/chipinterface.cpp        |   4 +-
 .../realtek_bee/main/include/AppEvent.h       |   2 +-
 .../realtek_bee/main/include/AppTask.h        |  22 +-
 .../main/include/CHIPDeviceManager.h          |  29 +-
 .../main/include/CHIPProjectConfig.h          |   2 -
 .../main/include/DeviceCallbacks.h            |   7 +-
 examples/pigweed-app/realtek_bee/README.md    |   8 +-
 examples/platform/realtek_bee/Rpc.cpp         |  21 +-
 .../realtek_bee/pw_sys_io/sys_io_bee.cc       |   4 +-
 .../platform/realtek_bee/util/LEDWidget.cpp   |  16 +-
 .../platform/realtek_bee/util/LEDWidget.h     |   5 +-
 examples/window-app/realtek_bee/README.md     |   3 +-
 .../window-app/realtek_bee/main/AppTask.cpp   |  56 ++--
 .../realtek_bee/main/CHIPDeviceManager.cpp    |  24 +-
 .../realtek_bee/main/DeviceCallbacks.cpp      |   4 +-
 .../realtek_bee/main/WindowCovering.cpp       |   4 +-
 .../realtek_bee/main/chipinterface.cpp        |   4 +-
 .../realtek_bee/main/include/AppConfig.h      |   8 +-
 .../realtek_bee/main/include/AppEvent.h       |   2 +-
 .../realtek_bee/main/include/AppTask.h        |  24 +-
 .../main/include/CHIPDeviceManager.h          |  29 +-
 .../main/include/CHIPProjectConfig.h          |   3 +-
 .../main/include/DeviceCallbacks.h            |   7 +-
 .../realtek_bee/main/include/WindowCovering.h |  10 +-
 src/lib/shell/MainLoopBee.cpp                 |  12 +-
 src/lib/shell/streamer_bee.cpp                |   4 +-
 src/platform/Realtek_bee/BLEManagerImpl.cpp   | 101 +++----
 src/platform/Realtek_bee/BLEManagerImpl.h     |  70 ++---
 src/platform/Realtek_bee/BUILD.gn             |  17 +-
 src/platform/Realtek_bee/BeeConfig.cpp        |   2 +-
 .../Realtek_bee/CHIPDevicePlatformConfig.h    |   1 -
 .../Realtek_bee/CHIPDevicePlatformEvent.h     |   3 -
 .../Realtek_bee/ConfigurationManagerImpl.cpp  |   4 +-
 .../Realtek_bee/ConfigurationManagerImpl.h    |   4 +-
 .../DiagnosticDataProviderImpl.cpp            |  13 +-
 .../Realtek_bee/DiagnosticDataProviderImpl.h  |  38 ++-
 .../Realtek_bee/FactoryDataDecoder.cpp        |   6 +-
 .../Realtek_bee/FactoryDataProvider.cpp       | 128 ++++----
 .../Realtek_bee/KeyValueStoreManagerImpl.cpp  |  28 +-
 src/platform/Realtek_bee/Logging.cpp          |   9 +-
 .../Realtek_bee/OTAImageProcessorImpl.cpp     |  22 +-
 .../Realtek_bee/OTAImageProcessorImpl.h       |  13 +-
 .../Realtek_bee/PlatformManagerImpl.cpp       |  22 +-
 .../Realtek_bee/ThreadStackManagerImpl.cpp    |  21 +-
 .../Realtek_bee/ThreadStackManagerImpl.h      |   2 +-
 src/platform/Realtek_bee/args.gni             |   2 +-
 third_party/bee_sdk/bee_sdk.gni               |   3 +-
 93 files changed, 1020 insertions(+), 1149 deletions(-)
 mode change 100755 => 100644 examples/light-switch-app/realtek_bee/main/AppTask.cpp
 mode change 100755 => 100644 examples/light-switch-app/realtek_bee/main/CHIPDeviceManager.cpp
 mode change 100755 => 100644 examples/light-switch-app/realtek_bee/main/DeviceCallbacks.cpp
 mode change 100755 => 100644 examples/light-switch-app/realtek_bee/main/chipinterface.cpp
 mode change 100755 => 100644 examples/light-switch-app/realtek_bee/main/include/AppConfig.h
 mode change 100755 => 100644 examples/light-switch-app/realtek_bee/main/include/AppTask.h
 mode change 100755 => 100644 examples/light-switch-app/realtek_bee/main/include/CHIPDeviceManager.h
 mode change 100755 => 100644 examples/light-switch-app/realtek_bee/main/include/CHIPProjectConfig.h
 mode change 100755 => 100644 examples/light-switch-app/realtek_bee/main/include/DeviceCallbacks.h
 mode change 100755 => 100644 examples/lighting-app/realtek_bee/main/AppTask.cpp
 mode change 100755 => 100644 examples/lighting-app/realtek_bee/main/CHIPDeviceManager.cpp
 mode change 100755 => 100644 examples/lighting-app/realtek_bee/main/DeviceCallbacks.cpp
 mode change 100755 => 100644 examples/lighting-app/realtek_bee/main/LightingManager.cpp
 mode change 100755 => 100644 examples/lighting-app/realtek_bee/main/chipinterface.cpp
 mode change 100755 => 100644 examples/lighting-app/realtek_bee/main/include/AppConfig.h
 mode change 100755 => 100644 examples/lighting-app/realtek_bee/main/include/AppTask.h
 mode change 100755 => 100644 examples/lighting-app/realtek_bee/main/include/CHIPDeviceManager.h
 mode change 100755 => 100644 examples/lighting-app/realtek_bee/main/include/DeviceCallbacks.h
 mode change 100755 => 100644 examples/lighting-app/realtek_bee/main/include/LightingManager.h
 mode change 100755 => 100644 examples/lock-app/realtek_bee/main/CHIPDeviceManager.cpp
 mode change 100755 => 100644 examples/lock-app/realtek_bee/main/DeviceCallbacks.cpp
 mode change 100755 => 100644 examples/lock-app/realtek_bee/main/chipinterface.cpp
 mode change 100755 => 100644 examples/lock-app/realtek_bee/main/include/CHIPDeviceManager.h
 mode change 100755 => 100644 examples/lock-app/realtek_bee/main/include/DeviceCallbacks.h
 mode change 100755 => 100644 examples/lock-app/realtek_bee/main/include/Globals.h
 mode change 100755 => 100644 examples/platform/realtek_bee/util/LEDWidget.cpp
 mode change 100755 => 100644 examples/platform/realtek_bee/util/LEDWidget.h
 mode change 100755 => 100644 examples/window-app/realtek_bee/main/CHIPDeviceManager.cpp
 mode change 100755 => 100644 examples/window-app/realtek_bee/main/DeviceCallbacks.cpp
 mode change 100755 => 100644 examples/window-app/realtek_bee/main/chipinterface.cpp
 mode change 100755 => 100644 examples/window-app/realtek_bee/main/include/CHIPDeviceManager.h
 mode change 100755 => 100644 examples/window-app/realtek_bee/main/include/DeviceCallbacks.h
 mode change 100755 => 100644 src/platform/Realtek_bee/BLEManagerImpl.h
 mode change 100755 => 100644 src/platform/Realtek_bee/BeeConfig.cpp
 mode change 100755 => 100644 src/platform/Realtek_bee/CHIPDevicePlatformEvent.h
 mode change 100755 => 100644 src/platform/Realtek_bee/DiagnosticDataProviderImpl.cpp
 mode change 100755 => 100644 src/platform/Realtek_bee/DiagnosticDataProviderImpl.h
 mode change 100755 => 100644 src/platform/Realtek_bee/KeyValueStoreManagerImpl.cpp
 mode change 100755 => 100644 src/platform/Realtek_bee/Logging.cpp
 mode change 100755 => 100644 src/platform/Realtek_bee/OTAImageProcessorImpl.cpp
 mode change 100755 => 100644 src/platform/Realtek_bee/OTAImageProcessorImpl.h
 mode change 100755 => 100644 src/platform/Realtek_bee/PlatformManagerImpl.cpp
 mode change 100755 => 100644 src/platform/Realtek_bee/ThreadStackManagerImpl.cpp
 mode change 100755 => 100644 src/platform/Realtek_bee/ThreadStackManagerImpl.h

diff --git a/config/realtek_bee/args.gni b/config/realtek_bee/args.gni
index 4a0cf64e65..a7e5f3b61a 100755
--- a/config/realtek_bee/args.gni
+++ b/config/realtek_bee/args.gni
@@ -39,6 +39,7 @@ chip_inet_config_enable_tcp_endpoint = false
 chip_enable_nfc = false
 chip_build_libshell = false
 chip_enable_ota_requestor = false
+
 #chip_inet_config_enable_tcp_endpoint = true
 #chip_inet_config_enable_udp_endpoint = true
 #chip_system_config_use_open_thread_inet_endpoints = true
@@ -47,8 +48,8 @@ openthread_root = ""
 
 chip_config_network_layer_ble = true
 
-custom_toolchain = "//third_party/connectedhomeip/config/realtek_bee/toolchain:realtek_bee"
-
+custom_toolchain =
+    "//third_party/connectedhomeip/config/realtek_bee/toolchain:realtek_bee"
 #pw_build_PIP_CONSTRAINTS =
 #    [ "//third_party/connectedhomeip/scripts/setup/constraints.txt" ]
 #cpp_standard = "c++17"
diff --git a/config/realtek_bee/bee_arm.gni b/config/realtek_bee/bee_arm.gni
index 3c7c0631e2..16c21e742d 100755
--- a/config/realtek_bee/bee_arm.gni
+++ b/config/realtek_bee/bee_arm.gni
@@ -12,9 +12,8 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-
-
 arm_arch = "armv8.1-m.main+dsp+mve+fp"
+
 #arm_abi = "aapcs"
 #arm_cpu = "cortex-m4"
 
diff --git a/examples/common/pigweed/realtek_bee/PigweedLoggerMutex.h b/examples/common/pigweed/realtek_bee/PigweedLoggerMutex.h
index 74f3f7f629..a295874251 100644
--- a/examples/common/pigweed/realtek_bee/PigweedLoggerMutex.h
+++ b/examples/common/pigweed/realtek_bee/PigweedLoggerMutex.h
@@ -22,17 +22,15 @@
 #include "RpcService.h"
 #include "semphr.h"
 
-namespace chip
-{
-namespace rpc
-{
+namespace chip {
+namespace rpc {
 class PigweedLoggerMutex : public chip::rpc::Mutex
 {
 
 public:
     void Lock() override
     {
-        SemaphoreHandle_t *sem = (SemaphoreHandle_t *)PigweedLogger::getSemaphore();
+        SemaphoreHandle_t * sem = (SemaphoreHandle_t *) PigweedLogger::getSemaphore();
         if (sem)
         {
             xSemaphoreTake(*sem, portMAX_DELAY);
@@ -40,7 +38,7 @@ public:
     }
     void Unlock() override
     {
-        SemaphoreHandle_t *sem = (SemaphoreHandle_t *)PigweedLogger::getSemaphore();
+        SemaphoreHandle_t * sem = (SemaphoreHandle_t *) PigweedLogger::getSemaphore();
         if (sem)
         {
             xSemaphoreGive(*sem);
diff --git a/examples/light-switch-app/realtek_bee/main/AppTask.cpp b/examples/light-switch-app/realtek_bee/main/AppTask.cpp
old mode 100755
new mode 100644
index b0d92a44d8..35eb93403e
--- a/examples/light-switch-app/realtek_bee/main/AppTask.cpp
+++ b/examples/light-switch-app/realtek_bee/main/AppTask.cpp
@@ -21,17 +21,17 @@
 #include "AppConfig.h"
 #include "AppEvent.h"
 #include "AppTask.h"
-#include "Globals.h"
 #include "BindingHandler.h"
+#include "Globals.h"
 
-#include <app/server/OnboardingCodesUtil.h>
 #include <app-common/zap-generated/attributes/Accessors.h>
 #include <app/TestEventTriggerDelegate.h>
 #include <app/clusters/general-diagnostics-server/GenericFaultTestEventTriggerHandler.h>
-#include <app/clusters/ota-requestor/OTATestEventTriggerHandler.h>
 #include <app/clusters/general-diagnostics-server/general-diagnostics-server.h>
 #include <app/clusters/identify-server/identify-server.h>
+#include <app/clusters/ota-requestor/OTATestEventTriggerHandler.h>
 #include <app/server/Dnssd.h>
+#include <app/server/OnboardingCodesUtil.h>
 #include <app/server/Server.h>
 #include <app/util/attribute-storage.h>
 
@@ -145,7 +145,7 @@ void OnTriggerIdentifyEffect(Identify * identify)
 void OnIdentifyStart(Identify *)
 {
     ChipLogProgress(Zcl, "OnIdentifyStart");
-    identifyLED.Blink(500,500);
+    identifyLED.Blink(500, 500);
 }
 
 void OnIdentifyStop(Identify *)
@@ -155,10 +155,7 @@ void OnIdentifyStop(Identify *)
 }
 
 Identify gIdentify = {
-    chip::EndpointId{ 1 },
-    OnIdentifyStart, 
-    OnIdentifyStop, 
-    Clusters::Identify::IdentifyTypeEnum::kVisibleIndicator,
+    chip::EndpointId{ 1 },   OnIdentifyStart, OnIdentifyStop, Clusters::Identify::IdentifyTypeEnum::kVisibleIndicator,
     OnTriggerIdentifyEffect,
 };
 
@@ -209,7 +206,7 @@ void AppTask::AppTaskMain(void * pvParameter)
 
 void AppTask::InitServer(intptr_t arg)
 {
-     // Init ZCL Data Model and start server
+    // Init ZCL Data Model and start server
     static chip::CommonCaseDeviceServerInitParams initParams;
     (void) initParams.InitializeStaticResourcesBeforeServerInit();
 
@@ -243,7 +240,7 @@ void AppTask::InitGpio()
 
     appStatusLED.Init(APP_LED);
     appStatusLED.Set(true);
-    
+
     identifyLED.Init(IDENTIFY_STATE_LED);
     systemStatusLED.Init(SYSTEM_STATE_LED);
 
@@ -252,12 +249,12 @@ void AppTask::InitGpio()
 
 CHIP_ERROR AppTask::Init()
 {
-    size_t check_mem_peak; 
+    size_t check_mem_peak;
     CHIP_ERROR err = CHIP_NO_ERROR;
     ChipLogProgress(DeviceLayer, "Light switch App Demo!");
 
-	chip::DeviceManager::CHIPDeviceManager & deviceMgr = chip::DeviceManager::CHIPDeviceManager::GetInstance();
-    err = deviceMgr.Init(&EchoCallbacks);
+    chip::DeviceManager::CHIPDeviceManager & deviceMgr = chip::DeviceManager::CHIPDeviceManager::GetInstance();
+    err                                                = deviceMgr.Init(&EchoCallbacks);
     if (err != CHIP_NO_ERROR)
     {
         ChipLogError(DeviceLayer, "DeviceManagerInit() - ERROR!");
@@ -275,25 +272,24 @@ CHIP_ERROR AppTask::Init()
     chip::Shell::Engine::Root().RunMainLoop();
 #endif
 
-	check_mem_peak = os_mem_peek(RAM_TYPE_DATA_ON);
-	ChipLogProgress(DeviceLayer, "os_mem_peek(RAM_TYPE_DATA_ON) : (%u)", check_mem_peak);
+    check_mem_peak = os_mem_peek(RAM_TYPE_DATA_ON);
+    ChipLogProgress(DeviceLayer, "os_mem_peek(RAM_TYPE_DATA_ON) : (%u)", check_mem_peak);
 
-    //Setup switch
+    // Setup switch
     LightSwitch::GetInstance().Init();
 
     return err;
 }
 
-
 void AppTask::SwitchActionEventHandler(AppEvent * aEvent)
 {
     if (aEvent->Type == AppEvent::kEventType_Button)
     {
-        if(aEvent->ButtonEvent.ButtonIdx == APP_TOGGLE_BUTTON)
+        if (aEvent->ButtonEvent.ButtonIdx == APP_TOGGLE_BUTTON)
         {
             LightSwitch::GetInstance().InitiateActionSwitch(1, Action::Toggle);
         }
-        else if(aEvent->ButtonEvent.ButtonIdx == APP_GENERIC_SWITCH_BUTTON)
+        else if (aEvent->ButtonEvent.ButtonIdx == APP_GENERIC_SWITCH_BUTTON)
         {
             if (aEvent->ButtonEvent.Action == true)
             {
@@ -305,12 +301,12 @@ void AppTask::SwitchActionEventHandler(AppEvent * aEvent)
                 ChipLogProgress(NotSpecified, "Switch initial press");
                 LightSwitch::GetInstance().GenericSwitchInitialPress();
             }
-        }   
+        }
     }
 }
 
 void AppTask::ButtonEventHandler(uint8_t btnIdx, uint8_t btnPressed)
-{ 
+{
     if (btnIdx != APP_FUNCTION_BUTTON && btnIdx != APP_TOGGLE_BUTTON && btnIdx != APP_GENERIC_SWITCH_BUTTON)
     {
         return;
@@ -319,7 +315,7 @@ void AppTask::ButtonEventHandler(uint8_t btnIdx, uint8_t btnPressed)
     AppEvent button_event              = {};
     button_event.Type                  = AppEvent::kEventType_Button;
     button_event.ButtonEvent.ButtonIdx = btnIdx;
-    button_event.ButtonEvent.Action    = btnPressed ? true:false;
+    button_event.ButtonEvent.Action    = btnPressed ? true : false;
 
     switch (btnIdx)
     {
@@ -377,7 +373,7 @@ void AppTask::FunctionTimerEventHandler(AppEvent * aEvent)
         sAppTask.mFunction = kFunction_FactoryReset;
         // Turn off all LEDs before starting blink to make sure blink is coordinated.
         systemStatusLED.Set(false);
-        systemStatusLED.Blink(500,500);
+        systemStatusLED.Blink(500, 500);
     }
     else if (sAppTask.mFunctionTimerActive && sAppTask.mFunction == kFunction_FactoryReset)
     {
@@ -461,7 +457,7 @@ void AppTask::PostEvent(const AppEvent * aEvent)
         if (xPortIsInsideInterrupt())
         {
             BaseType_t higherPrioTaskWoken = pdFALSE;
-            status              = xQueueSendFromISR(sAppEventQueue, aEvent, &higherPrioTaskWoken);
+            status                         = xQueueSendFromISR(sAppEventQueue, aEvent, &higherPrioTaskWoken);
             portYIELD_FROM_ISR(higherPrioTaskWoken);
         }
         else
@@ -495,4 +491,4 @@ void AppTask::DispatchEvent(AppEvent * aEvent)
 /**
  * Update cluster status after application level changes
  */
-void AppTask::UpdateClusterState(void){}
\ No newline at end of file
+void AppTask::UpdateClusterState(void) {}
diff --git a/examples/light-switch-app/realtek_bee/main/BindingHandler.cpp b/examples/light-switch-app/realtek_bee/main/BindingHandler.cpp
index d4784969a7..a7905c3092 100644
--- a/examples/light-switch-app/realtek_bee/main/BindingHandler.cpp
+++ b/examples/light-switch-app/realtek_bee/main/BindingHandler.cpp
@@ -53,7 +53,6 @@ Engine sShellSwitchBindingSubCommands;
 extern void UpdateLightingStatetoGUI(EndpointId endpointId, uint8_t status);
 #endif
 
-
 void BindingHandler::Init()
 {
     // The initialization of binding manager will try establishing connection with unicast peers
@@ -71,7 +70,7 @@ void BindingHandler::OnInvokeCommandFailure(BindingData & aBindingData, CHIP_ERR
 
     if (aError == CHIP_ERROR_TIMEOUT && !BindingHandler::GetInstance().mCaseSessionRecovered)
     {
-         ChipLogProgress(NotSpecified,"Response timeout for invoked command, trying to recover CASE session.");
+        ChipLogProgress(NotSpecified, "Response timeout for invoked command, trying to recover CASE session.");
 
         // Set flag to not try recover session multiple times.
         BindingHandler::GetInstance().mCaseSessionRecovered = true;
@@ -86,13 +85,13 @@ void BindingHandler::OnInvokeCommandFailure(BindingData & aBindingData, CHIP_ERR
 
         if (CHIP_NO_ERROR != error)
         {
-            ChipLogProgress(NotSpecified,"NotifyBoundClusterChanged failed due to: %" CHIP_ERROR_FORMAT, error.Format());
+            ChipLogProgress(NotSpecified, "NotifyBoundClusterChanged failed due to: %" CHIP_ERROR_FORMAT, error.Format());
             return;
         }
     }
     else
     {
-         ChipLogProgress(NotSpecified,"Binding command was not applied! Reason: %" CHIP_ERROR_FORMAT, aError.Format());
+        ChipLogProgress(NotSpecified, "Binding command was not applied! Reason: %" CHIP_ERROR_FORMAT, aError.Format());
     }
 }
 
@@ -103,7 +102,7 @@ void BindingHandler::OnOffProcessCommand(CommandId aCommandId, const EmberBindin
     BindingData * data = reinterpret_cast<BindingData *>(aContext);
 
     auto onSuccess = [](const ConcreteCommandPath & commandPath, const StatusIB & status, const auto & dataResponse) {
-         ChipLogProgress(NotSpecified,"Binding command applied successfully!");
+        ChipLogProgress(NotSpecified, "Binding command applied successfully!");
 
         // If session was recovered and communication works, reset flag to the initial state.
         if (BindingHandler::GetInstance().mCaseSessionRecovered)
@@ -163,21 +162,20 @@ void BindingHandler::OnOffProcessCommand(CommandId aCommandId, const EmberBindin
         }
         break;
     default:
-         ChipLogProgress(NotSpecified,"Invalid binding command data - commandId is not supported");
+        ChipLogProgress(NotSpecified, "Invalid binding command data - commandId is not supported");
         break;
     }
     if (CHIP_NO_ERROR != ret)
     {
-         ChipLogProgress(NotSpecified,"Invoke OnOff Command Request ERROR: %s", ErrorStr(ret));
+        ChipLogProgress(NotSpecified, "Invoke OnOff Command Request ERROR: %s", ErrorStr(ret));
     }
 }
 
-void BindingHandler::LightSwitchChangedHandler(const EmberBindingTableEntry & aBinding,
-                                               OperationalDeviceProxy * deviceProxy,
+void BindingHandler::LightSwitchChangedHandler(const EmberBindingTableEntry & aBinding, OperationalDeviceProxy * deviceProxy,
                                                void * context)
 {
 #if CONFIG_ENABLE_ATTRIBUTE_SUBSCRIBE
-    if(context == nullptr)
+    if (context == nullptr)
     {
         chip::EndpointId localEndpointId = aBinding.local;
         ChipLogProgress(NotSpecified, "localEndpointId=%d", localEndpointId);
@@ -185,41 +183,31 @@ void BindingHandler::LightSwitchChangedHandler(const EmberBindingTableEntry & aB
         if (aBinding.type == MATTER_UNICAST_BINDING &&
             (!aBinding.clusterId.has_value() || aBinding.clusterId.value() == Clusters::OnOff::Id))
         {
-            auto onReport = [localEndpointId](const app::ConcreteDataAttributePath & attributePath, const auto & dataResponse)
-            {
+            auto onReport = [localEndpointId](const app::ConcreteDataAttributePath & attributePath, const auto & dataResponse) {
                 ChipLogProgress(NotSpecified, "SubscribeAttribute onReport OnOff=%d", dataResponse);
-                UpdateLightingStatetoGUI(localEndpointId,(uint8_t)dataResponse);
+                UpdateLightingStatetoGUI(localEndpointId, (uint8_t) dataResponse);
             };
 
-            auto onError = [](const app::ConcreteDataAttributePath * attributePath, CHIP_ERROR aError)
-            {
-                ChipLogError(NotSpecified, "SubscribeAttribute failed: %" CHIP_ERROR_FORMAT, aError.Format());      
-                //todo
+            auto onError = [](const app::ConcreteDataAttributePath * attributePath, CHIP_ERROR aError) {
+                ChipLogError(NotSpecified, "SubscribeAttribute failed: %" CHIP_ERROR_FORMAT, aError.Format());
+                // todo
             };
 
-            auto onSubscriptionEstablishedCb = [localEndpointId](const app::ReadClient & readClient,SubscriptionId subscriptionId)
-            {
-                ChipLogProgress(NotSpecified, "onSubscriptionEstablishedCb %d",localEndpointId);//online            
+            auto onSubscriptionEstablishedCb = [localEndpointId](const app::ReadClient & readClient,
+                                                                 SubscriptionId subscriptionId) {
+                ChipLogProgress(NotSpecified, "onSubscriptionEstablishedCb %d", localEndpointId); // online
                 UpdateLightingStatetoGUI(localEndpointId, 3);
             };
 
-            auto onResubscriptionAttemptCb = [localEndpointId](const app::ReadClient & readClient, CHIP_ERROR aError,uint32_t aNextResubscribeIntervalMsec)
-            {
-                ChipLogProgress(NotSpecified, "onResubscriptionAttemptCb %d",localEndpointId);//offline
+            auto onResubscriptionAttemptCb = [localEndpointId](const app::ReadClient & readClient, CHIP_ERROR aError,
+                                                               uint32_t aNextResubscribeIntervalMsec) {
+                ChipLogProgress(NotSpecified, "onResubscriptionAttemptCb %d", localEndpointId); // offline
                 UpdateLightingStatetoGUI(localEndpointId, 2);
             };
 
             Controller::SubscribeAttribute<Clusters::OnOff::Attributes::OnOff::TypeInfo>(
-                deviceProxy->GetExchangeManager(),
-                deviceProxy->GetSecureSession().Value(),
-                aBinding.remote,
-                onReport,
-                onError,
-                1,
-                15,
-                onSubscriptionEstablishedCb,
-                onResubscriptionAttemptCb
-            );
+                deviceProxy->GetExchangeManager(), deviceProxy->GetSecureSession().Value(), aBinding.remote, onReport, onError, 1,
+                15, onSubscriptionEstablishedCb, onResubscriptionAttemptCb);
         }
 
         return;
@@ -264,7 +252,7 @@ void BindingHandler::LightSwitchContextReleaseHandler(void * context)
 
 void BindingHandler::InitInternal(intptr_t arg)
 {
-     ChipLogProgress(NotSpecified,"Initialize binding Handler");
+    ChipLogProgress(NotSpecified, "Initialize binding Handler");
     auto & server = chip::Server::GetInstance();
     chip::BindingManager::GetInstance().Init(
         { &server.GetFabricTable(), server.GetCASESessionManager(), &server.GetPersistentStorage() });
@@ -331,9 +319,9 @@ CHIP_ERROR BindingHandler::OnOffSwitchCommandHandler(int argc, char ** argv)
 CHIP_ERROR BindingHandler::OnSwitchCommandHandler(int argc, char ** argv)
 {
     BindingData * data = Platform::New<BindingData>();
-    data->EndpointId     = atoi(argv[0]) + 1;
-    data->CommandId           = Clusters::OnOff::Commands::On::Id;
-    data->ClusterId           = Clusters::OnOff::Id;
+    data->EndpointId   = atoi(argv[0]) + 1;
+    data->CommandId    = Clusters::OnOff::Commands::On::Id;
+    data->ClusterId    = Clusters::OnOff::Id;
 
     DeviceLayer::PlatformMgr().ScheduleWork(SwitchWorkerFunction, reinterpret_cast<intptr_t>(data));
     return CHIP_NO_ERROR;
@@ -342,9 +330,9 @@ CHIP_ERROR BindingHandler::OnSwitchCommandHandler(int argc, char ** argv)
 CHIP_ERROR BindingHandler::OffSwitchCommandHandler(int argc, char ** argv)
 {
     BindingData * data = Platform::New<BindingData>();
-    data->EndpointId     = atoi(argv[0]) + 1;
-    data->CommandId           = Clusters::OnOff::Commands::Off::Id;
-    data->ClusterId           = Clusters::OnOff::Id;
+    data->EndpointId   = atoi(argv[0]) + 1;
+    data->CommandId    = Clusters::OnOff::Commands::Off::Id;
+    data->ClusterId    = Clusters::OnOff::Id;
 
     DeviceLayer::PlatformMgr().ScheduleWork(SwitchWorkerFunction, reinterpret_cast<intptr_t>(data));
     return CHIP_NO_ERROR;
@@ -353,9 +341,9 @@ CHIP_ERROR BindingHandler::OffSwitchCommandHandler(int argc, char ** argv)
 CHIP_ERROR BindingHandler::ToggleSwitchCommandHandler(int argc, char ** argv)
 {
     BindingData * data = Platform::New<BindingData>();
-    data->EndpointId     = atoi(argv[0]) + 1;
-    data->CommandId           = Clusters::OnOff::Commands::Toggle::Id;
-    data->ClusterId           = Clusters::OnOff::Id;
+    data->EndpointId   = atoi(argv[0]) + 1;
+    data->CommandId    = Clusters::OnOff::Commands::Toggle::Id;
+    data->ClusterId    = Clusters::OnOff::Id;
 
     DeviceLayer::PlatformMgr().ScheduleWork(SwitchWorkerFunction, reinterpret_cast<intptr_t>(data));
     return CHIP_NO_ERROR;
@@ -406,7 +394,7 @@ CHIP_ERROR BindingHandler::BindingUnicastBindCommandHandler(int argc, char ** ar
     entry->nodeId                  = atoi(argv[1]);
     entry->local                   = 1; // Hardcoded to endpoint 1 for now
     entry->remote                  = atoi(argv[2]);
-    entry->clusterId.emplace(6);  // Hardcode to OnOff cluster for now
+    entry->clusterId.emplace(6); // Hardcode to OnOff cluster for now
 
     DeviceLayer::PlatformMgr().ScheduleWork(BindingWorkerFunction, reinterpret_cast<intptr_t>(entry));
     return CHIP_NO_ERROR;
@@ -455,10 +443,10 @@ CHIP_ERROR BindingHandler::GroupsOnOffSwitchCommandHandler(int argc, char ** arg
 CHIP_ERROR BindingHandler::GroupOnSwitchCommandHandler(int argc, char ** argv)
 {
     BindingData * data = Platform::New<BindingData>();
-    data->EndpointId          = 1;
-    data->CommandId           = Clusters::OnOff::Commands::On::Id;
-    data->ClusterId           = Clusters::OnOff::Id;
-    data->IsGroup             = true;
+    data->EndpointId   = 1;
+    data->CommandId    = Clusters::OnOff::Commands::On::Id;
+    data->ClusterId    = Clusters::OnOff::Id;
+    data->IsGroup      = true;
 
     DeviceLayer::PlatformMgr().ScheduleWork(SwitchWorkerFunction, reinterpret_cast<intptr_t>(data));
     return CHIP_NO_ERROR;
@@ -467,10 +455,10 @@ CHIP_ERROR BindingHandler::GroupOnSwitchCommandHandler(int argc, char ** argv)
 CHIP_ERROR BindingHandler::GroupOffSwitchCommandHandler(int argc, char ** argv)
 {
     BindingData * data = Platform::New<BindingData>();
-    data->EndpointId          = 1;
-    data->CommandId           = Clusters::OnOff::Commands::Off::Id;
-    data->ClusterId           = Clusters::OnOff::Id;
-    data->IsGroup             = true;
+    data->EndpointId   = 1;
+    data->CommandId    = Clusters::OnOff::Commands::Off::Id;
+    data->ClusterId    = Clusters::OnOff::Id;
+    data->IsGroup      = true;
 
     DeviceLayer::PlatformMgr().ScheduleWork(SwitchWorkerFunction, reinterpret_cast<intptr_t>(data));
     return CHIP_NO_ERROR;
@@ -479,10 +467,10 @@ CHIP_ERROR BindingHandler::GroupOffSwitchCommandHandler(int argc, char ** argv)
 CHIP_ERROR BindingHandler::GroupToggleSwitchCommandHandler(int argc, char ** argv)
 {
     BindingData * data = Platform::New<BindingData>();
-    data->EndpointId     = 1;
-    data->CommandId           = Clusters::OnOff::Commands::Toggle::Id;
-    data->ClusterId           = Clusters::OnOff::Id;
-    data->IsGroup             = true;
+    data->EndpointId   = 1;
+    data->CommandId    = Clusters::OnOff::Commands::Toggle::Id;
+    data->ClusterId    = Clusters::OnOff::Id;
+    data->IsGroup      = true;
 
     DeviceLayer::PlatformMgr().ScheduleWork(SwitchWorkerFunction, reinterpret_cast<intptr_t>(data));
     return CHIP_NO_ERROR;
@@ -505,8 +493,8 @@ CHIP_ERROR BindingHandler::TableCommandHelper(int argc, char ** argv)
             \t+ ClusterId %d \r\n \
             \t+ RemoteEndpointId %d \r\n \
             \t+ NodeId %d\r\n",
-                    (int) entry.fabricIndex, (int) entry.local,  (int) entry.clusterId.value_or(kInvalidClusterId), (int) entry.remote,
-                    (int) entry.nodeId);
+                            (int) entry.fabricIndex, (int) entry.local, (int) entry.clusterId.value_or(kInvalidClusterId),
+                            (int) entry.remote, (int) entry.nodeId);
             break;
         case MATTER_MULTICAST_BINDING:
             streamer_printf(streamer_get(), "[%d] GROUP:\r\n", i++);
@@ -514,11 +502,11 @@ CHIP_ERROR BindingHandler::TableCommandHelper(int argc, char ** argv)
             \t+ LocalEndpoint %d \r\n \
             \t+ RemoteEndpointId %d \r\n \
             \t+ GroupId %d\r\n",
-                    (int) entry.fabricIndex, (int) entry.local, (int) entry.remote, (int) entry.groupId);
+                            (int) entry.fabricIndex, (int) entry.local, (int) entry.remote, (int) entry.groupId);
             break;
         case MATTER_UNUSED_BINDING:
             streamer_printf(streamer_get(), "[%d] UNUSED\r\n", i++);
-            break;       
+            break;
         default:
             break;
         }
@@ -547,9 +535,9 @@ void BindingHandler::RegisterSwitchCommands()
         { &ToggleSwitchCommandHandler, "toggle", "Sends toggle command to bound lighting app" }
     };
 
-    static const shell_command_t sSwitchGroupsSubCommands[] = { 
-        { &GroupsHelpHandler, "help", "Usage: switch groups <subcommand>" },
-        { &GroupsOnOffSwitchCommandHandler, "onoff", "Usage: switch groups onoff <subcommand>" } };
+    static const shell_command_t sSwitchGroupsSubCommands[] = { { &GroupsHelpHandler, "help", "Usage: switch groups <subcommand>" },
+                                                                { &GroupsOnOffSwitchCommandHandler, "onoff",
+                                                                  "Usage: switch groups onoff <subcommand>" } };
 
     static const shell_command_t sSwitchGroupsOnOffSubCommands[] = {
         { &GroupsOnOffHelpHandler, "help", "Usage: switch groups onoff <subcommand>" },
@@ -564,8 +552,8 @@ void BindingHandler::RegisterSwitchCommands()
         { &BindingUnicastBindCommandHandler, "unicast", "Usage: switch binding unicast <fabric index> <node id> <endpoint>" }
     };
 
-    static const shell_command_t sSwitchCommand = { 
-        &SwitchCommandHandler, "switch","Light-switch commands. Usage: switch <subcommand>" };
+    static const shell_command_t sSwitchCommand = { &SwitchCommandHandler, "switch",
+                                                    "Light-switch commands. Usage: switch <subcommand>" };
 
     sShellSwitchGroupsOnOffSubCommands.RegisterCommands(sSwitchGroupsOnOffSubCommands, ArraySize(sSwitchGroupsOnOffSubCommands));
     sShellSwitchOnOffSubCommands.RegisterCommands(sSwitchOnOffSubCommands, ArraySize(sSwitchOnOffSubCommands));
diff --git a/examples/light-switch-app/realtek_bee/main/CHIPDeviceManager.cpp b/examples/light-switch-app/realtek_bee/main/CHIPDeviceManager.cpp
old mode 100755
new mode 100644
index 32b9e0c3c8..db9cf0c09e
--- a/examples/light-switch-app/realtek_bee/main/CHIPDeviceManager.cpp
+++ b/examples/light-switch-app/realtek_bee/main/CHIPDeviceManager.cpp
@@ -26,10 +26,10 @@
 
 #include "CHIPDeviceManager.h"
 #include <app/util/basic-types.h>
-#include <support/CHIPMem.h>
-#include <support/CodeUtils.h>
 #include <core/ErrorStr.h>
 #include <platform/Realtek_bee/FactoryDataProvider.h>
+#include <support/CHIPMem.h>
+#include <support/CodeUtils.h>
 
 #include "Globals.h"
 
@@ -65,12 +65,12 @@ CHIP_ERROR CHIPDeviceManager::Init(CHIPDeviceManagerCallbacks * cb)
     mCB = cb;
 
     ChipLogProgress(DeviceLayer, "Start to init MemoryInit");
-	err = Platform::MemoryInit();
+    err = Platform::MemoryInit();
     SuccessOrExit(err);
 
-	ChipLogProgress(DeviceLayer, "Start to init InitChipStack");
-	err = PlatformMgr().InitChipStack();
-	SuccessOrExit(err);
+    ChipLogProgress(DeviceLayer, "Start to init InitChipStack");
+    err = PlatformMgr().InitChipStack();
+    SuccessOrExit(err);
 
     ChipLogProgress(DeviceLayer, "Factorydata init");
     err = mFactoryDataProvider.Init();
@@ -90,12 +90,12 @@ CHIP_ERROR CHIPDeviceManager::Init(CHIPDeviceManagerCallbacks * cb)
     SuccessOrExit(err);
 
 #if CHIP_ENABLE_OPENTHREAD
-	ChipLogProgress(DeviceLayer, "Initializing OpenThread stack");
-	err = ThreadStackMgr().InitThreadStack();
-	SuccessOrExit(err);
+    ChipLogProgress(DeviceLayer, "Initializing OpenThread stack");
+    err = ThreadStackMgr().InitThreadStack();
+    SuccessOrExit(err);
 
     ChipLogProgress(DeviceLayer, "Set Thread Device Type");
-    
+
 #if CHIP_DEVICE_CONFIG_THREAD_FTD
     err = ConnectivityMgr().SetThreadDeviceType(ConnectivityManager::kThreadDeviceType_Router);
 #else // CHIP_DEVICE_CONFIG_THREAD_FTD
@@ -111,10 +111,10 @@ CHIP_ERROR CHIPDeviceManager::Init(CHIPDeviceManagerCallbacks * cb)
 #endif // CHIP_DEVICE_CONFIG_THREAD_FTD
     SuccessOrExit(err);
 
-	ChipLogProgress(DeviceLayer, "Start OpenThread task");
+    ChipLogProgress(DeviceLayer, "Start OpenThread task");
     err = ThreadStackMgrImpl().StartThreadTask();
     SuccessOrExit(err);
-	ChipLogProgress(DeviceLayer, "Start OpenThread task done!!");
+    ChipLogProgress(DeviceLayer, "Start OpenThread task done!!");
 #endif // CHIP_ENABLE_OPENTHREAD
 
 exit:
diff --git a/examples/light-switch-app/realtek_bee/main/DeviceCallbacks.cpp b/examples/light-switch-app/realtek_bee/main/DeviceCallbacks.cpp
old mode 100755
new mode 100644
index 0e1d4b2d8f..693667ba12
--- a/examples/light-switch-app/realtek_bee/main/DeviceCallbacks.cpp
+++ b/examples/light-switch-app/realtek_bee/main/DeviceCallbacks.cpp
@@ -23,21 +23,21 @@
  *
  **/
 #include "DeviceCallbacks.h"
-#include "Globals.h"
 #include "AppTask.h"
+#include "Globals.h"
 
+#include "BindingHandler.h"
 #include "CHIPDeviceManager.h"
-#include <app/server/Dnssd.h>
+#include "app/clusters/bindings/BindingManager.h"
 #include <app-common/zap-generated/attributes/Accessors.h>
 #include <app-common/zap-generated/ids/Attributes.h>
 #include <app-common/zap-generated/ids/Clusters.h>
 #include <app/ConcreteAttributePath.h>
 #include <app/data-model/Nullable.h>
+#include <app/server/Dnssd.h>
 #include <assert.h>
 #include <lib/core/DataModelTypes.h>
 #include <lib/support/logging/CHIPLogging.h>
-#include "BindingHandler.h"
-#include "app/clusters/bindings/BindingManager.h"
 
 #if CHIP_DEVICE_CONFIG_ENABLE_OTA_REQUESTOR
 #include <ota/OTAInitializer.h>
@@ -121,10 +121,10 @@ void DeviceCallbacks::TriggerSubscribe()
 {
     for (const auto & binding : BindingTable::GetInstance())
     {
-        if (binding.type == MATTER_UNICAST_BINDING && 
+        if (binding.type == MATTER_UNICAST_BINDING &&
             (!binding.clusterId.has_value() || binding.clusterId.value() == Clusters::OnOff::Id))
         {
-            ChipLogProgress(DeviceLayer, "binding.local = %d",  binding.local);
+            ChipLogProgress(DeviceLayer, "binding.local = %d", binding.local);
             DeviceLayer::PlatformMgr().ScheduleWork(BindingHandler::SwitchWorkerFunction2, binding.local);
         }
     }
@@ -133,7 +133,7 @@ void DeviceCallbacks::TriggerSubscribe()
 
 void DeviceCallbacks::DeviceEventCallback(const ChipDeviceEvent * event, intptr_t arg)
 {
-    //ChipLogProgress(Zcl, "DeviceEventCallback event_type 0x%x", event->Type); 
+    // ChipLogProgress(Zcl, "DeviceEventCallback event_type 0x%x", event->Type);
     switch (event->Type)
     {
     case DeviceEventType::kCHIPoBLEAdvertisingChange:
@@ -165,34 +165,32 @@ void DeviceCallbacks::DeviceEventCallback(const ChipDeviceEvent * event, intptr_
         sIsNetworkEnabled     = ConnectivityMgr().IsThreadEnabled();
         UpdateStatusLED();
         break;
-    
+
     case DeviceEventType::kCommissioningComplete:
         break;
 
-    case DeviceEventType::kServerReady:
-        {
+    case DeviceEventType::kServerReady: {
 #if CHIP_DEVICE_CONFIG_ENABLE_OTA_REQUESTOR
-            if (!isOTAInitialized)
-            {
-                chip::DeviceLayer::SystemLayer().StartTimer(chip::System::Clock::Seconds32(kInitOTARequestorDelaySec),
-                                                            InitOTARequestorHandler, nullptr);
-                isOTAInitialized = true;
-            }
+        if (!isOTAInitialized)
+        {
+            chip::DeviceLayer::SystemLayer().StartTimer(chip::System::Clock::Seconds32(kInitOTARequestorDelaySec),
+                                                        InitOTARequestorHandler, nullptr);
+            isOTAInitialized = true;
+        }
 #endif
 
 #if CONFIG_ENABLE_ATTRIBUTE_SUBSCRIBE
-            //TriggerSubscribe();
+        // TriggerSubscribe();
 #endif
-        }
+    }
 
-        break;
+    break;
 
 #if CONFIG_ENABLE_ATTRIBUTE_SUBSCRIBE
     case DeviceEventType::kBindingsChangedViaCluster:
-        //TriggerSubscribe();
+        // TriggerSubscribe();
         break;
 #endif
-
     }
 }
 
@@ -261,14 +259,15 @@ void DeviceCallbacks::PostAttributeChangeCallback(EndpointId endpointId, Cluster
     }
 }
 
-void MatterPostAttributeChangeCallback(const chip::app::ConcreteAttributePath & attributePath, uint8_t type, 
-                                       uint16_t size, uint8_t * value)
+void MatterPostAttributeChangeCallback(const chip::app::ConcreteAttributePath & attributePath, uint8_t type, uint16_t size,
+                                       uint8_t * value)
 {
     chip::DeviceManager::CHIPDeviceManagerCallbacks * cb =
         chip::DeviceManager::CHIPDeviceManager::GetInstance().GetCHIPDeviceManagerCallbacks();
 
     if (cb != nullptr)
     {
-        cb->PostAttributeChangeCallback(attributePath.mEndpointId, attributePath.mClusterId, attributePath.mAttributeId, type, size, value);
+        cb->PostAttributeChangeCallback(attributePath.mEndpointId, attributePath.mClusterId, attributePath.mAttributeId, type, size,
+                                        value);
     }
-}
\ No newline at end of file
+}
diff --git a/examples/light-switch-app/realtek_bee/main/Globals.cpp b/examples/light-switch-app/realtek_bee/main/Globals.cpp
index 76df10c1ca..729a4a10fd 100755
--- a/examples/light-switch-app/realtek_bee/main/Globals.cpp
+++ b/examples/light-switch-app/realtek_bee/main/Globals.cpp
@@ -19,4 +19,4 @@
 
 LEDWidget appStatusLED;
 LEDWidget identifyLED;
-LEDWidget systemStatusLED;
\ No newline at end of file
+LEDWidget systemStatusLED;
diff --git a/examples/light-switch-app/realtek_bee/main/LightSwitch.cpp b/examples/light-switch-app/realtek_bee/main/LightSwitch.cpp
index c7fdbbfc4a..92ee2dbaff 100644
--- a/examples/light-switch-app/realtek_bee/main/LightSwitch.cpp
+++ b/examples/light-switch-app/realtek_bee/main/LightSwitch.cpp
@@ -1,121 +1,121 @@
-/*
- *
- *    Copyright (c) 2022 Project CHIP Authors
- *    All rights reserved.
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-#include "LightSwitch.h"
-#include "AppEvent.h"
-#include "BindingHandler.h"
-#include <app-common/zap-generated/attributes/Accessors.h>
-#include <app/clusters/switch-server/switch-server.h>
-#include <app/server/Server.h>
-#include <app/util/binding-table.h>
-#include <controller/InvokeInteraction.h>
-
-using namespace chip;
-using namespace chip::app;
-using namespace chip::app::Clusters;
-
-void LightSwitch::Init()
-{
-    BindingHandler::GetInstance().Init();
-}
-
-void LightSwitch::InitiateActionSwitch(chip::EndpointId endpointId, uint8_t action)
-{
-    BindingTable & bindingTable = BindingTable::GetInstance();
-    BindingHandler::BindingData * data = Platform::New<BindingHandler::BindingData>();
-    if (data)
-    {
-        data->EndpointId = endpointId;
-        data->ClusterId  = Clusters::OnOff::Id;
-        switch (action)
-        {
-        case Action::Toggle:
-            data->CommandId = Clusters::OnOff::Commands::Toggle::Id;
-            break;
-        case Action::On:
-            data->CommandId = Clusters::OnOff::Commands::On::Id;
-            break;
-        case Action::Off:
-            data->CommandId = Clusters::OnOff::Commands::Off::Id;
-            break;
-        default:
-            Platform::Delete(data);
-            return;
-        }
-        data->IsGroup = BindingHandler::GetInstance().IsGroupBound();
-        DeviceLayer::PlatformMgr().ScheduleWork(BindingHandler::SwitchWorkerFunction, reinterpret_cast<intptr_t>(data));
-    }
-}
-
-void LightSwitch::GenericSwitchInitialPress()
-{
-    DeviceLayer::SystemLayer().ScheduleLambda([this] {
-        // Press moves Position from 0 (idle) to 1 (press)
-        uint8_t newPosition = 1;
-
-        Clusters::Switch::Attributes::CurrentPosition::Set(kLightGenericSwitchEndpointId, newPosition);
-        // InitialPress event takes newPosition as event data
-        Clusters::SwitchServer::Instance().OnInitialPress(kLightGenericSwitchEndpointId, newPosition);
-    });
-}
-
-void LightSwitch::GenericSwitchReleasePress()
-{
-    DeviceLayer::SystemLayer().ScheduleLambda([this] {
-        // Release moves Position from 1 (press) to 0 (idle)
-        uint8_t previousPosition = 1;
-        uint8_t newPosition      = 0;
-
-        Clusters::Switch::Attributes::CurrentPosition::Set(kLightGenericSwitchEndpointId, newPosition);
-        // ShortRelease event takes previousPosition as event data
-        Clusters::SwitchServer::Instance().OnShortRelease(kLightGenericSwitchEndpointId, previousPosition);
-    });
-}
-
-#if CONFIG_ENABLE_ATTRIBUTE_SUBSCRIBE
-void LightSwitch::SubscribeRequestForOneNode(chip::EndpointId endpointId)
- {
-    BindingTable & bindingTable = BindingTable::GetInstance();
-
-    if (!bindingTable.Size())
-    {
-        ChipLogError(DeviceLayer, "bindingTable empty");
-        return;
-    }
-    DeviceLayer::PlatformMgr().ScheduleWork(BindingHandler::SwitchWorkerFunction2, endpointId);
- }
-
- void LightSwitch::ShutdownSubscribeRequestForOneNode(chip::EndpointId endpointId)
- {
-    BindingTable & bindingTable = BindingTable::GetInstance();
-    for (auto & entry : bindingTable)
-    {
-        ChipLogError(DeviceLayer, "entry.local %d",entry.local);
-        if(endpointId == entry.local)
-        {
-            BindingHandler::SubscribeCommandData * data = Platform::New<BindingHandler::SubscribeCommandData>();
-            data->localEndpointId       = endpointId;
-            data->nodeId                = entry.nodeId;
-            data->fabricIndex           = entry.fabricIndex;
- 
-            DeviceLayer::PlatformMgr().ScheduleWork(BindingHandler::SwitchWorkerFunction3, reinterpret_cast<intptr_t>(data));
-            break;
-        }
-    }
- }
- #endif
\ No newline at end of file
+/*
+ *
+ *    Copyright (c) 2022 Project CHIP Authors
+ *    All rights reserved.
+ *
+ *    Licensed under the Apache License, Version 2.0 (the "License");
+ *    you may not use this file except in compliance with the License.
+ *    You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *    Unless required by applicable law or agreed to in writing, software
+ *    distributed under the License is distributed on an "AS IS" BASIS,
+ *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *    See the License for the specific language governing permissions and
+ *    limitations under the License.
+ */
+
+#include "LightSwitch.h"
+#include "AppEvent.h"
+#include "BindingHandler.h"
+#include <app-common/zap-generated/attributes/Accessors.h>
+#include <app/clusters/switch-server/switch-server.h>
+#include <app/server/Server.h>
+#include <app/util/binding-table.h>
+#include <controller/InvokeInteraction.h>
+
+using namespace chip;
+using namespace chip::app;
+using namespace chip::app::Clusters;
+
+void LightSwitch::Init()
+{
+    BindingHandler::GetInstance().Init();
+}
+
+void LightSwitch::InitiateActionSwitch(chip::EndpointId endpointId, uint8_t action)
+{
+    BindingTable & bindingTable        = BindingTable::GetInstance();
+    BindingHandler::BindingData * data = Platform::New<BindingHandler::BindingData>();
+    if (data)
+    {
+        data->EndpointId = endpointId;
+        data->ClusterId  = Clusters::OnOff::Id;
+        switch (action)
+        {
+        case Action::Toggle:
+            data->CommandId = Clusters::OnOff::Commands::Toggle::Id;
+            break;
+        case Action::On:
+            data->CommandId = Clusters::OnOff::Commands::On::Id;
+            break;
+        case Action::Off:
+            data->CommandId = Clusters::OnOff::Commands::Off::Id;
+            break;
+        default:
+            Platform::Delete(data);
+            return;
+        }
+        data->IsGroup = BindingHandler::GetInstance().IsGroupBound();
+        DeviceLayer::PlatformMgr().ScheduleWork(BindingHandler::SwitchWorkerFunction, reinterpret_cast<intptr_t>(data));
+    }
+}
+
+void LightSwitch::GenericSwitchInitialPress()
+{
+    DeviceLayer::SystemLayer().ScheduleLambda([this] {
+        // Press moves Position from 0 (idle) to 1 (press)
+        uint8_t newPosition = 1;
+
+        Clusters::Switch::Attributes::CurrentPosition::Set(kLightGenericSwitchEndpointId, newPosition);
+        // InitialPress event takes newPosition as event data
+        Clusters::SwitchServer::Instance().OnInitialPress(kLightGenericSwitchEndpointId, newPosition);
+    });
+}
+
+void LightSwitch::GenericSwitchReleasePress()
+{
+    DeviceLayer::SystemLayer().ScheduleLambda([this] {
+        // Release moves Position from 1 (press) to 0 (idle)
+        uint8_t previousPosition = 1;
+        uint8_t newPosition      = 0;
+
+        Clusters::Switch::Attributes::CurrentPosition::Set(kLightGenericSwitchEndpointId, newPosition);
+        // ShortRelease event takes previousPosition as event data
+        Clusters::SwitchServer::Instance().OnShortRelease(kLightGenericSwitchEndpointId, previousPosition);
+    });
+}
+
+#if CONFIG_ENABLE_ATTRIBUTE_SUBSCRIBE
+void LightSwitch::SubscribeRequestForOneNode(chip::EndpointId endpointId)
+{
+    BindingTable & bindingTable = BindingTable::GetInstance();
+
+    if (!bindingTable.Size())
+    {
+        ChipLogError(DeviceLayer, "bindingTable empty");
+        return;
+    }
+    DeviceLayer::PlatformMgr().ScheduleWork(BindingHandler::SwitchWorkerFunction2, endpointId);
+}
+
+void LightSwitch::ShutdownSubscribeRequestForOneNode(chip::EndpointId endpointId)
+{
+    BindingTable & bindingTable = BindingTable::GetInstance();
+    for (auto & entry : bindingTable)
+    {
+        ChipLogError(DeviceLayer, "entry.local %d", entry.local);
+        if (endpointId == entry.local)
+        {
+            BindingHandler::SubscribeCommandData * data = Platform::New<BindingHandler::SubscribeCommandData>();
+            data->localEndpointId                       = endpointId;
+            data->nodeId                                = entry.nodeId;
+            data->fabricIndex                           = entry.fabricIndex;
+
+            DeviceLayer::PlatformMgr().ScheduleWork(BindingHandler::SwitchWorkerFunction3, reinterpret_cast<intptr_t>(data));
+            break;
+        }
+    }
+}
+#endif
diff --git a/examples/light-switch-app/realtek_bee/main/chipinterface.cpp b/examples/light-switch-app/realtek_bee/main/chipinterface.cpp
old mode 100755
new mode 100644
index b925f17f8f..e45bbf541c
--- a/examples/light-switch-app/realtek_bee/main/chipinterface.cpp
+++ b/examples/light-switch-app/realtek_bee/main/chipinterface.cpp
@@ -14,10 +14,10 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
- 
-#include <stdlib.h>
-#include "CHIPDeviceManager.h"
+
 #include "AppTask.h"
+#include "CHIPDeviceManager.h"
+#include <stdlib.h>
 
 using namespace ::chip;
 using namespace ::chip::app;
@@ -51,7 +51,7 @@ extern "C" void ChipTest(void)
 
 extern "C" void InitiateSingleSwitch(uint8_t index, uint8_t action)
 {
-    if(index >= MAX_SUPPORTED_LIGHT_NUM)
+    if (index >= MAX_SUPPORTED_LIGHT_NUM)
     {
         ChipLogError(DeviceLayer, "Endpoint index exceed!");
         return;
@@ -70,23 +70,22 @@ extern "C" void InitiateGroupSwitch2(uint8_t index, uint8_t action)
     LightSwitch::GetInstance().InitiateActionSwitch(kLightSwitchEndpointId[index], action);
 }
 
-
 #if CONFIG_ENABLE_ATTRIBUTE_SUBSCRIBE
 
 extern "C" void ShutdownSubscribeRequestForOneNode(uint8_t index)
 {
-    if(index >= MAX_SUPPORTED_LIGHT_NUM)
+    if (index >= MAX_SUPPORTED_LIGHT_NUM)
     {
         ChipLogError(DeviceLayer, "Endpoint index exceed!");
         return;
-    }   
-    
-     LightSwitch::GetInstance().ShutdownSubscribeRequestForOneNode(kLightSwitchEndpointId[index]);
+    }
+
+    LightSwitch::GetInstance().ShutdownSubscribeRequestForOneNode(kLightSwitchEndpointId[index]);
 }
 
 extern "C" void SubscribeRequestForOneNode(uint8_t index)
 {
-    if(index >= MAX_SUPPORTED_LIGHT_NUM)
+    if (index >= MAX_SUPPORTED_LIGHT_NUM)
     {
         ChipLogError(DeviceLayer, "Endpoint index exceed!");
         return;
@@ -101,17 +100,17 @@ void UpdateLightingStatetoGUI(EndpointId endpointId, uint8_t status)
 {
     uint8_t index;
 
-    for(index = 0; index < MAX_SUPPORTED_LIGHT_NUM; index++)
+    for (index = 0; index < MAX_SUPPORTED_LIGHT_NUM; index++)
     {
-        if(endpointId == kLightSwitchEndpointId[index])
+        if (endpointId == kLightSwitchEndpointId[index])
         {
             break;
         }
     }
-    
-    if(g_NotifyUpperStatusChange)
+
+    if (g_NotifyUpperStatusChange)
     {
-        g_NotifyUpperStatusChange(status,index);
+        g_NotifyUpperStatusChange(status, index);
     }
 }
 
@@ -119,4 +118,4 @@ extern "C" void RegisterSwitchCommandCallback(P_ProcessCommandCallback cback)
 {
     g_NotifyUpperStatusChange = cback;
 }
-#endif
\ No newline at end of file
+#endif
diff --git a/examples/light-switch-app/realtek_bee/main/include/AppConfig.h b/examples/light-switch-app/realtek_bee/main/include/AppConfig.h
old mode 100755
new mode 100644
index 1a14bb348b..9155358c72
--- a/examples/light-switch-app/realtek_bee/main/include/AppConfig.h
+++ b/examples/light-switch-app/realtek_bee/main/include/AppConfig.h
@@ -30,12 +30,12 @@
 #define D3_LED 2
 
 #define APP_TASK_NAME "APP"
-#define APP_TOGGLE_BUTTON         SW1_BUTTON
-#define APP_FUNCTION_BUTTON       SW2_BUTTON
+#define APP_TOGGLE_BUTTON SW1_BUTTON
+#define APP_FUNCTION_BUTTON SW2_BUTTON
 #define APP_GENERIC_SWITCH_BUTTON SW3_BUTTON
 
-#define APP_LED                  D1_LED
-#define IDENTIFY_STATE_LED       D2_LED
-#define SYSTEM_STATE_LED         D3_LED
+#define APP_LED D1_LED
+#define IDENTIFY_STATE_LED D2_LED
+#define SYSTEM_STATE_LED D3_LED
 
 #endif // APP_CONFIG_H
diff --git a/examples/light-switch-app/realtek_bee/main/include/AppTask.h b/examples/light-switch-app/realtek_bee/main/include/AppTask.h
old mode 100755
new mode 100644
index 3ab6f3e68d..0eb5ec2071
--- a/examples/light-switch-app/realtek_bee/main/include/AppTask.h
+++ b/examples/light-switch-app/realtek_bee/main/include/AppTask.h
@@ -68,9 +68,9 @@ private:
 
     enum Function_t
     {
-        kFunction_NoneSelected   = 0,
-        kFunction_Reset = 1,
-        kFunction_FactoryReset   = 2,
+        kFunction_NoneSelected = 0,
+        kFunction_Reset        = 1,
+        kFunction_FactoryReset = 2,
         kFunction_Invalid
     } Function;
 
diff --git a/examples/light-switch-app/realtek_bee/main/include/BindingHandler.h b/examples/light-switch-app/realtek_bee/main/include/BindingHandler.h
index bb1a2bbeaf..e9d942718c 100644
--- a/examples/light-switch-app/realtek_bee/main/include/BindingHandler.h
+++ b/examples/light-switch-app/realtek_bee/main/include/BindingHandler.h
@@ -43,7 +43,6 @@
 //     chip::FabricIndex fabricIndex;
 // };
 
-
 #include "app-common/zap-generated/ids/Clusters.h"
 #include "app-common/zap-generated/ids/Commands.h"
 #include "lib/core/CHIPError.h"
@@ -66,11 +65,10 @@ public:
     struct SubscribeCommandData
     {
         chip::EndpointId localEndpointId;
-        chip::NodeId nodeId;//remote nodeid
+        chip::NodeId nodeId; // remote nodeid
         chip::FabricIndex fabricIndex;
     };
 
-
     void Init();
     bool IsGroupBound();
 
@@ -97,21 +95,21 @@ private:
 
     static CHIP_ERROR SwitchHelpHandler(int argc, char ** argv);
     static CHIP_ERROR SwitchCommandHandler(int argc, char ** argv);
-    //OnOff switch shell functions
+    // OnOff switch shell functions
     static CHIP_ERROR OnOffHelpHandler(int argc, char ** argv);
     static CHIP_ERROR OnOffSwitchCommandHandler(int argc, char ** argv);
     static CHIP_ERROR OnSwitchCommandHandler(int argc, char ** argv);
     static CHIP_ERROR OffSwitchCommandHandler(int argc, char ** argv);
     static CHIP_ERROR ToggleSwitchCommandHandler(int argc, char ** argv);
-    //bind switch shell functions
+    // bind switch shell functions
     static CHIP_ERROR BindingHelpHandler(int argc, char ** argv);
     static CHIP_ERROR BindingSwitchCommandHandler(int argc, char ** argv);
     static CHIP_ERROR BindingGroupBindCommandHandler(int argc, char ** argv);
     static CHIP_ERROR BindingUnicastBindCommandHandler(int argc, char ** argv);
-    //Groups switch shell functions
+    // Groups switch shell functions
     static CHIP_ERROR GroupsHelpHandler(int argc, char ** argv);
     static CHIP_ERROR GroupsSwitchCommandHandler(int argc, char ** argv);
-    //Groups OnOff switch shell functions
+    // Groups OnOff switch shell functions
     static CHIP_ERROR GroupsOnOffHelpHandler(int argc, char ** argv);
     static CHIP_ERROR GroupsOnOffSwitchCommandHandler(int argc, char ** argv);
     static CHIP_ERROR GroupOnSwitchCommandHandler(int argc, char ** argv);
@@ -122,6 +120,4 @@ private:
     //
     static void RegisterSwitchCommands();
 #endif // ENABLE_CHIP_SHELL
-    
 };
-
diff --git a/examples/light-switch-app/realtek_bee/main/include/CHIPDeviceManager.h b/examples/light-switch-app/realtek_bee/main/include/CHIPDeviceManager.h
old mode 100755
new mode 100644
index ba0739a1b9..9b37f4ac20
--- a/examples/light-switch-app/realtek_bee/main/include/CHIPDeviceManager.h
+++ b/examples/light-switch-app/realtek_bee/main/include/CHIPDeviceManager.h
@@ -85,8 +85,8 @@ public:
 class DLL_EXPORT CHIPDeviceManager
 {
 public:
-    CHIPDeviceManager(const CHIPDeviceManager &)  = delete;
-    CHIPDeviceManager(const CHIPDeviceManager &&) = delete;
+    CHIPDeviceManager(const CHIPDeviceManager &)             = delete;
+    CHIPDeviceManager(const CHIPDeviceManager &&)            = delete;
     CHIPDeviceManager & operator=(const CHIPDeviceManager &) = delete;
 
     static CHIPDeviceManager & GetInstance()
diff --git a/examples/light-switch-app/realtek_bee/main/include/CHIPProjectConfig.h b/examples/light-switch-app/realtek_bee/main/include/CHIPProjectConfig.h
old mode 100755
new mode 100644
index b7056a09b9..b22caef51b
--- a/examples/light-switch-app/realtek_bee/main/include/CHIPProjectConfig.h
+++ b/examples/light-switch-app/realtek_bee/main/include/CHIPProjectConfig.h
@@ -165,18 +165,18 @@
 #define CONFIG_DEFAULT_ZAP 1
 #endif
 
-//You must copy light-switch-app-1_to_2 to example/light-switch-app/light-switch-common
+// You must copy light-switch-app-1_to_2 to example/light-switch-app/light-switch-common
 #ifndef CONFIG_1_TO_2_ZAP
 #define CONFIG_1_TO_2_ZAP 0
 #endif
 
-//You must copy light-switch-app-1_to_8 to example/light-switch-app/light-switch-common
+// You must copy light-switch-app-1_to_8 to example/light-switch-app/light-switch-common
 #ifndef CONFIG_1_TO_8_ZAP
 #define CONFIG_1_TO_8_ZAP 0
 #endif
 
-//You must copy light-switch-app-1_to_11 to example/light-switch-app/light-switch-common
+// You must copy light-switch-app-1_to_11 to example/light-switch-app/light-switch-common
 #ifndef CONFIG_1_TO_11_ZAP
 #define CONFIG_1_TO_11_ZAP 0
 #define MATTER_BINDING_TABLE_SIZE 20
-#endif
\ No newline at end of file
+#endif
diff --git a/examples/light-switch-app/realtek_bee/main/include/DeviceCallbacks.h b/examples/light-switch-app/realtek_bee/main/include/DeviceCallbacks.h
old mode 100755
new mode 100644
index bd64f2090b..994564004f
--- a/examples/light-switch-app/realtek_bee/main/include/DeviceCallbacks.h
+++ b/examples/light-switch-app/realtek_bee/main/include/DeviceCallbacks.h
@@ -33,10 +33,9 @@
 class DeviceCallbacks : public chip::DeviceManager::CHIPDeviceManagerCallbacks
 {
 public:
-    virtual void DeviceEventCallback(const chip::DeviceLayer::ChipDeviceEvent *event, intptr_t arg);
-    void PostAttributeChangeCallback(chip::EndpointId endpointId, chip::ClusterId clusterId,
-                                     chip::AttributeId attributeId,
-                                     uint8_t type, uint16_t size, uint8_t *value) override;
+    virtual void DeviceEventCallback(const chip::DeviceLayer::ChipDeviceEvent * event, intptr_t arg);
+    void PostAttributeChangeCallback(chip::EndpointId endpointId, chip::ClusterId clusterId, chip::AttributeId attributeId,
+                                     uint8_t type, uint16_t size, uint8_t * value) override;
     static void UpdateStatusLED();
 
 private:
@@ -44,7 +43,6 @@ private:
     void TriggerSubscribe();
 #endif
 
-    void OnInternetConnectivityChange(const chip::DeviceLayer::ChipDeviceEvent *event);
-    void OnIdentifyPostAttributeChangeCallback(chip::EndpointId endpointId,
-                                               chip::AttributeId attributeId, uint8_t *value);
+    void OnInternetConnectivityChange(const chip::DeviceLayer::ChipDeviceEvent * event);
+    void OnIdentifyPostAttributeChangeCallback(chip::EndpointId endpointId, chip::AttributeId attributeId, uint8_t * value);
 };
diff --git a/examples/light-switch-app/realtek_bee/main/include/Globals.h b/examples/light-switch-app/realtek_bee/main/include/Globals.h
index c2be9240bd..07a2d9af30 100755
--- a/examples/light-switch-app/realtek_bee/main/include/Globals.h
+++ b/examples/light-switch-app/realtek_bee/main/include/Globals.h
@@ -22,4 +22,3 @@
 extern LEDWidget appStatusLED;
 extern LEDWidget identifyLED;
 extern LEDWidget systemStatusLED;
-
diff --git a/examples/light-switch-app/realtek_bee/main/include/LightSwitch.h b/examples/light-switch-app/realtek_bee/main/include/LightSwitch.h
index da91b4b381..91762fc3ed 100644
--- a/examples/light-switch-app/realtek_bee/main/include/LightSwitch.h
+++ b/examples/light-switch-app/realtek_bee/main/include/LightSwitch.h
@@ -1,146 +1,130 @@
-// /*
-//  *
-//  *    Copyright (c) 2021 Project CHIP Authors
-//  *    All rights reserved.
-//  *
-//  *    Licensed under the Apache License, Version 2.0 (the "License");
-//  *    you may not use this file except in compliance with the License.
-//  *    You may obtain a copy of the License at
-//  *
-//  *        http://www.apache.org/licenses/LICENSE-2.0
-//  *
-//  *    Unless required by applicable law or agreed to in writing, software
-//  *    distributed under the License is distributed on an "AS IS" BASIS,
-//  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-//  *    See the License for the specific language governing permissions and
-//  *    limitations under the License.
-//  */
-// #pragma once
-
-// #include <stdbool.h>
-// #include <stdint.h>
-
-// #include <functional>
-
-// #include "AppEvent.h"
-
-// #include "FreeRTOS.h"
-// #include "timers.h" // provides FreeRTOS timer support
-
-// #include <lib/core/CHIPError.h>
-
-// #include <app-common/zap-generated/attributes/Accessors.h>
-// #include <app-common/zap-generated/cluster-objects.h>
-// #include <app/clusters/switch-server/switch-server.h>
-// #include <app/data-model/DecodableList.h>
-// #include <app/util/im-client-callbacks.h>
-
-// class SwitchManager
-// {
-// public:
-//     void Init(void);
-//     static void GenericSwitchInitialPress(void);
-//     static void GenericSwitchReleasePress(void);
-//     static void ToggleHandler(AppEvent * aEvent);
-
-// private:
-//     friend SwitchManager & SwitchMgr(void);
-//     static SwitchManager sSwitch;
-// };
-
-// inline SwitchManager & SwitchMgr(void)
-// {
-//     return SwitchManager::sSwitch;
-// }
-
-
-/*
- *
- *    Copyright (c) 2022 Project CHIP Authors
- *    All rights reserved.
- *
- *    Licensed under the Apache License, Version 2.0 (the "License");
- *    you may not use this file except in compliance with the License.
- *    You may obtain a copy of the License at
- *
- *        http://www.apache.org/licenses/LICENSE-2.0
- *
- *    Unless required by applicable law or agreed to in writing, software
- *    distributed under the License is distributed on an "AS IS" BASIS,
- *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *    See the License for the specific language governing permissions and
- *    limitations under the License.
- */
-
-#pragma once
-
-#include <app/util/basic-types.h>
-#include <lib/core/CHIPError.h>
-
-using namespace ::chip;
-
-#if CONFIG_DEFAULT_ZAP
-#define MAX_SUPPORTED_LIGHT_NUM 1
-constexpr EndpointId kLightSwitchForGroupEndpointId = 1;
-constexpr EndpointId kLightGenericSwitchEndpointId = 2;
-constexpr EndpointId kLightSwitchEndpointId[MAX_SUPPORTED_LIGHT_NUM] =
-{
-    1
-};
-#elif CONFIG_1_TO_2_ZAP
-#define MAX_SUPPORTED_LIGHT_NUM 2
-constexpr EndpointId kLightSwitchForGroupEndpointId = 1;
-constexpr EndpointId kLightGenericSwitchEndpointId = 4;
-constexpr EndpointId kLightSwitchEndpointId[MAX_SUPPORTED_LIGHT_NUM] =
-{
-    2, 3
-};
-#elif CONFIG_1_TO_8_ZAP
-#define MAX_SUPPORTED_LIGHT_NUM 8
-constexpr EndpointId kLightSwitchForGroupEndpointId = 1;
-constexpr EndpointId kLightGenericSwitchEndpointId = 10;
-constexpr EndpointId kLightSwitchEndpointId[MAX_SUPPORTED_LIGHT_NUM] =
-{
-    2, 3, 4, 5, 6, 7, 8, 9
-};
-#elif CONFIG_1_TO_11_ZAP
-#define MAX_SUPPORTED_LIGHT_NUM 11
-constexpr EndpointId kLightSwitchForGroupEndpointId = 1;
-constexpr EndpointId kLightGenericSwitchEndpointId = 10;
-constexpr EndpointId kLightSwitchEndpointId[MAX_SUPPORTED_LIGHT_NUM] =
-{
-    2, 3, 4, 5, 6, 7, 8, 9,
-    11, 12, 13
-};
-#endif
-
-
-enum Action : uint8_t
-{
-    Toggle, /// Switch state on lighting-app device
-    On,     /// Turn on light on lighting-app device
-    Off     /// Turn off light on lighting-app device
-};
-
-class LightSwitch
-{
-public:
-    void Init();
-    void InitiateActionSwitch(chip::EndpointId endpointId, uint8_t action);
-    void GenericSwitchInitialPress();
-    void GenericSwitchReleasePress();
-
-#if CONFIG_ENABLE_ATTRIBUTE_SUBSCRIBE   
-    void SubscribeRequestForOneNode(chip::EndpointId endpointId);
-    void ShutdownSubscribeRequestForOneNode(chip::EndpointId endpointId);
-#endif
-
-    static LightSwitch & GetInstance()
-    {
-        static LightSwitch sLightSwitch;
-        return sLightSwitch;
-    }
-
-private:
-
-};
+// /*
+//  *
+//  *    Copyright (c) 2021 Project CHIP Authors
+//  *    All rights reserved.
+//  *
+//  *    Licensed under the Apache License, Version 2.0 (the "License");
+//  *    you may not use this file except in compliance with the License.
+//  *    You may obtain a copy of the License at
+//  *
+//  *        http://www.apache.org/licenses/LICENSE-2.0
+//  *
+//  *    Unless required by applicable law or agreed to in writing, software
+//  *    distributed under the License is distributed on an "AS IS" BASIS,
+//  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+//  *    See the License for the specific language governing permissions and
+//  *    limitations under the License.
+//  */
+// #pragma once
+
+// #include <stdbool.h>
+// #include <stdint.h>
+
+// #include <functional>
+
+// #include "AppEvent.h"
+
+// #include "FreeRTOS.h"
+// #include "timers.h" // provides FreeRTOS timer support
+
+// #include <lib/core/CHIPError.h>
+
+// #include <app-common/zap-generated/attributes/Accessors.h>
+// #include <app-common/zap-generated/cluster-objects.h>
+// #include <app/clusters/switch-server/switch-server.h>
+// #include <app/data-model/DecodableList.h>
+// #include <app/util/im-client-callbacks.h>
+
+// class SwitchManager
+// {
+// public:
+//     void Init(void);
+//     static void GenericSwitchInitialPress(void);
+//     static void GenericSwitchReleasePress(void);
+//     static void ToggleHandler(AppEvent * aEvent);
+
+// private:
+//     friend SwitchManager & SwitchMgr(void);
+//     static SwitchManager sSwitch;
+// };
+
+// inline SwitchManager & SwitchMgr(void)
+// {
+//     return SwitchManager::sSwitch;
+// }
+
+/*
+ *
+ *    Copyright (c) 2022 Project CHIP Authors
+ *    All rights reserved.
+ *
+ *    Licensed under the Apache License, Version 2.0 (the "License");
+ *    you may not use this file except in compliance with the License.
+ *    You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *    Unless required by applicable law or agreed to in writing, software
+ *    distributed under the License is distributed on an "AS IS" BASIS,
+ *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *    See the License for the specific language governing permissions and
+ *    limitations under the License.
+ */
+
+#pragma once
+
+#include <app/util/basic-types.h>
+#include <lib/core/CHIPError.h>
+
+using namespace ::chip;
+
+#if CONFIG_DEFAULT_ZAP
+#define MAX_SUPPORTED_LIGHT_NUM 1
+constexpr EndpointId kLightSwitchForGroupEndpointId                  = 1;
+constexpr EndpointId kLightGenericSwitchEndpointId                   = 2;
+constexpr EndpointId kLightSwitchEndpointId[MAX_SUPPORTED_LIGHT_NUM] = { 1 };
+#elif CONFIG_1_TO_2_ZAP
+#define MAX_SUPPORTED_LIGHT_NUM 2
+constexpr EndpointId kLightSwitchForGroupEndpointId                  = 1;
+constexpr EndpointId kLightGenericSwitchEndpointId                   = 4;
+constexpr EndpointId kLightSwitchEndpointId[MAX_SUPPORTED_LIGHT_NUM] = { 2, 3 };
+#elif CONFIG_1_TO_8_ZAP
+#define MAX_SUPPORTED_LIGHT_NUM 8
+constexpr EndpointId kLightSwitchForGroupEndpointId                  = 1;
+constexpr EndpointId kLightGenericSwitchEndpointId                   = 10;
+constexpr EndpointId kLightSwitchEndpointId[MAX_SUPPORTED_LIGHT_NUM] = { 2, 3, 4, 5, 6, 7, 8, 9 };
+#elif CONFIG_1_TO_11_ZAP
+#define MAX_SUPPORTED_LIGHT_NUM 11
+constexpr EndpointId kLightSwitchForGroupEndpointId                  = 1;
+constexpr EndpointId kLightGenericSwitchEndpointId                   = 10;
+constexpr EndpointId kLightSwitchEndpointId[MAX_SUPPORTED_LIGHT_NUM] = { 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13 };
+#endif
+
+enum Action : uint8_t
+{
+    Toggle, /// Switch state on lighting-app device
+    On,     /// Turn on light on lighting-app device
+    Off     /// Turn off light on lighting-app device
+};
+
+class LightSwitch
+{
+public:
+    void Init();
+    void InitiateActionSwitch(chip::EndpointId endpointId, uint8_t action);
+    void GenericSwitchInitialPress();
+    void GenericSwitchReleasePress();
+
+#if CONFIG_ENABLE_ATTRIBUTE_SUBSCRIBE
+    void SubscribeRequestForOneNode(chip::EndpointId endpointId);
+    void ShutdownSubscribeRequestForOneNode(chip::EndpointId endpointId);
+#endif
+
+    static LightSwitch & GetInstance()
+    {
+        static LightSwitch sLightSwitch;
+        return sLightSwitch;
+    }
+
+private:
+};
diff --git a/examples/lighting-app/realtek_bee/main/AppTask.cpp b/examples/lighting-app/realtek_bee/main/AppTask.cpp
old mode 100755
new mode 100644
index caab9609d5..486a51e470
--- a/examples/lighting-app/realtek_bee/main/AppTask.cpp
+++ b/examples/lighting-app/realtek_bee/main/AppTask.cpp
@@ -23,14 +23,14 @@
 #include "AppTask.h"
 #include "Globals.h"
 
-#include <app/server/OnboardingCodesUtil.h>
 #include <app-common/zap-generated/attributes/Accessors.h>
 #include <app/TestEventTriggerDelegate.h>
 #include <app/clusters/general-diagnostics-server/GenericFaultTestEventTriggerHandler.h>
-#include <app/clusters/ota-requestor/OTATestEventTriggerHandler.h>
 #include <app/clusters/general-diagnostics-server/general-diagnostics-server.h>
 #include <app/clusters/identify-server/identify-server.h>
+#include <app/clusters/ota-requestor/OTATestEventTriggerHandler.h>
 #include <app/server/Dnssd.h>
+#include <app/server/OnboardingCodesUtil.h>
 #include <app/server/Server.h>
 #include <app/util/attribute-storage.h>
 
@@ -65,7 +65,7 @@ using namespace ::chip::DeviceLayer;
 #include <platform/CHIPDeviceLayer.h>
 
 #define FACTORY_RESET_CANCEL_WINDOW_TIMEOUT 3500
-#define RESET_TRIGGER_TIMEOUT   1500
+#define RESET_TRIGGER_TIMEOUT 1500
 #define BLE_ADV_TRIGGER_TIMEOUT 1500
 
 #if CONFIG_DAC_KEY_ENC
@@ -146,7 +146,7 @@ void OnTriggerIdentifyEffect(Identify * identify)
 void OnIdentifyStart(Identify *)
 {
     ChipLogProgress(Zcl, "OnIdentifyStart");
-    identifyLED.Blink(500,500);
+    identifyLED.Blink(500, 500);
 }
 
 void OnIdentifyStop(Identify *)
@@ -156,10 +156,7 @@ void OnIdentifyStop(Identify *)
 }
 
 Identify gIdentify = {
-    chip::EndpointId{ 1 },
-    OnIdentifyStart, 
-    OnIdentifyStop, 
-    Clusters::Identify::IdentifyTypeEnum::kVisibleIndicator,
+    chip::EndpointId{ 1 },   OnIdentifyStart, OnIdentifyStop, Clusters::Identify::IdentifyTypeEnum::kVisibleIndicator,
     OnTriggerIdentifyEffect,
 };
 
@@ -251,7 +248,7 @@ void AppTask::InitGpio()
 
 CHIP_ERROR AppTask::Init()
 {
-    size_t check_mem_peak; 
+    size_t check_mem_peak;
     CHIP_ERROR err = CHIP_NO_ERROR;
     ChipLogProgress(DeviceLayer, "Lighting App Demo!");
 
@@ -259,8 +256,8 @@ CHIP_ERROR AppTask::Init()
     chip::rpc::Init();
 #endif
 
-	chip::DeviceManager::CHIPDeviceManager & deviceMgr = chip::DeviceManager::CHIPDeviceManager::GetInstance();
-    err = deviceMgr.Init(&EchoCallbacks);
+    chip::DeviceManager::CHIPDeviceManager & deviceMgr = chip::DeviceManager::CHIPDeviceManager::GetInstance();
+    err                                                = deviceMgr.Init(&EchoCallbacks);
     if (err != CHIP_NO_ERROR)
     {
         ChipLogError(DeviceLayer, "DeviceManagerInit() - ERROR!");
@@ -278,10 +275,10 @@ CHIP_ERROR AppTask::Init()
     chip::Shell::Engine::Root().RunMainLoop();
 #endif
 
-	check_mem_peak = os_mem_peek(RAM_TYPE_DATA_ON);
-	ChipLogProgress(DeviceLayer, "os_mem_peek(RAM_TYPE_DATA_ON) : (%u)", check_mem_peak);
+    check_mem_peak = os_mem_peek(RAM_TYPE_DATA_ON);
+    ChipLogProgress(DeviceLayer, "os_mem_peek(RAM_TYPE_DATA_ON) : (%u)", check_mem_peak);
 
-    //Setup light
+    // Setup light
     err = LightingMgr().Init();
     if (err != CHIP_NO_ERROR)
     {
@@ -293,7 +290,6 @@ CHIP_ERROR AppTask::Init()
     return err;
 }
 
-
 void AppTask::LightingActionEventHandler(AppEvent * aEvent)
 {
     LightingManager::Action_t action;
@@ -352,10 +348,7 @@ void AppTask::BLEAdvEventHandler(AppEvent * aEvent)
 
 void AppTask::ButtonEventHandler(uint8_t btnIdx, uint8_t btnPressed)
 {
-    if (btnIdx != APP_TOGGLE_BUTTON &&
-        btnIdx != APP_FUNCTION_BUTTON &&
-        btnIdx != APP_LEVEL_BUTTON &&
-        btnIdx != APP_BLE_ADV_BUTTON)
+    if (btnIdx != APP_TOGGLE_BUTTON && btnIdx != APP_FUNCTION_BUTTON && btnIdx != APP_LEVEL_BUTTON && btnIdx != APP_BLE_ADV_BUTTON)
     {
         return;
     }
@@ -365,7 +358,7 @@ void AppTask::ButtonEventHandler(uint8_t btnIdx, uint8_t btnPressed)
     AppEvent button_event              = {};
     button_event.Type                  = AppEvent::kEventType_Button;
     button_event.ButtonEvent.ButtonIdx = btnIdx;
-    button_event.ButtonEvent.Action    = btnPressed ? true:false;
+    button_event.ButtonEvent.Action    = btnPressed ? true : false;
 
     if (btnIdx == APP_TOGGLE_BUTTON && btnPressed == 1)
     {
@@ -383,7 +376,7 @@ void AppTask::ButtonEventHandler(uint8_t btnIdx, uint8_t btnPressed)
         // Hand off to Functionality handler - depends on duration of press
         button_event.Handler = FunctionHandler;
     }
-    else if(btnIdx == APP_BLE_ADV_BUTTON)
+    else if (btnIdx == APP_BLE_ADV_BUTTON)
     {
         button_event.Handler = BLEAdvEventHandler;
     }
@@ -424,7 +417,7 @@ void AppTask::FunctionTimerEventHandler(AppEvent * aEvent)
         systemStatusLED.Set(false);
         systemStatusLED.Blink(50, 950);
     }
-    else if(sAppTask.mFunctionTimerActive && sAppTask.mFunction == kFunction_BLEAdv)
+    else if (sAppTask.mFunctionTimerActive && sAppTask.mFunction == kFunction_BLEAdv)
     {
         ChipLogProgress(NotSpecified, "[BTN] Factory Reset selected. Release within %us to cancel.",
                         FACTORY_RESET_CANCEL_WINDOW_TIMEOUT / 1000);
@@ -435,7 +428,7 @@ void AppTask::FunctionTimerEventHandler(AppEvent * aEvent)
 
         // Turn off all LEDs before starting blink to make sure blink is coordinated.
         systemStatusLED.Set(false);
-        systemStatusLED.Blink(500,500);
+        systemStatusLED.Blink(500, 500);
     }
     else if (sAppTask.mFunctionTimerActive && sAppTask.mFunction == kFunction_FactoryReset)
     {
@@ -476,7 +469,7 @@ void AppTask::FunctionHandler(AppEvent * aEvent)
             chip::DeviceManager::CHIPDeviceManager::GetInstance().Shutdown();
             WDT_SystemReset(RESET_ALL, SW_RESET_APP_START);
         }
-        else if(sAppTask.mFunctionTimerActive && sAppTask.mFunction == kFunction_BLEAdv)
+        else if (sAppTask.mFunctionTimerActive && sAppTask.mFunction == kFunction_BLEAdv)
         {
             sAppTask.CancelTimer();
             sAppTask.mFunction = kFunction_NoneSelected;
@@ -559,7 +552,7 @@ void AppTask::PostEvent(const AppEvent * aEvent)
         if (xPortIsInsideInterrupt())
         {
             BaseType_t higherPrioTaskWoken = pdFALSE;
-            status              = xQueueSendFromISR(sAppEventQueue, aEvent, &higherPrioTaskWoken);
+            status                         = xQueueSendFromISR(sAppEventQueue, aEvent, &higherPrioTaskWoken);
             portYIELD_FROM_ISR(higherPrioTaskWoken);
         }
         else
@@ -614,4 +607,4 @@ void AppTask::UpdateClusterState(void)
             ChipLogError(NotSpecified, "ERR: updating level %x", to_underlying(status));
         }
     });
-}
\ No newline at end of file
+}
diff --git a/examples/lighting-app/realtek_bee/main/CHIPDeviceManager.cpp b/examples/lighting-app/realtek_bee/main/CHIPDeviceManager.cpp
old mode 100755
new mode 100644
index 9824f2059b..8a7022f299
--- a/examples/lighting-app/realtek_bee/main/CHIPDeviceManager.cpp
+++ b/examples/lighting-app/realtek_bee/main/CHIPDeviceManager.cpp
@@ -25,17 +25,17 @@
 #include <stdlib.h>
 
 #include "CHIPDeviceManager.h"
-#include <app/util/basic-types.h>
-#include <support/CHIPMem.h>
-#include <support/CodeUtils.h>
-#include <core/ErrorStr.h>
-#include <platform/Realtek_bee/FactoryDataProvider.h>
 #include <app-common/zap-generated/attributes/Accessors.h>
 #include <app-common/zap-generated/ids/Attributes.h>
 #include <app-common/zap-generated/ids/Clusters.h>
 #include <app/util/af-types.h>
 #include <app/util/attribute-storage.h>
+#include <app/util/basic-types.h>
 #include <app/util/util.h>
+#include <core/ErrorStr.h>
+#include <platform/Realtek_bee/FactoryDataProvider.h>
+#include <support/CHIPMem.h>
+#include <support/CodeUtils.h>
 
 using namespace ::chip;
 
@@ -62,12 +62,12 @@ CHIP_ERROR CHIPDeviceManager::Init(CHIPDeviceManagerCallbacks * cb)
     mCB = cb;
 
     ChipLogProgress(DeviceLayer, "Start to init MemoryInit");
-	err = Platform::MemoryInit();
+    err = Platform::MemoryInit();
     SuccessOrExit(err);
 
-	ChipLogProgress(DeviceLayer, "Start to init InitChipStack");
-	err = PlatformMgr().InitChipStack();
-	SuccessOrExit(err);
+    ChipLogProgress(DeviceLayer, "Start to init InitChipStack");
+    err = PlatformMgr().InitChipStack();
+    SuccessOrExit(err);
 
     ChipLogProgress(DeviceLayer, "Factorydata init");
     err = mFactoryDataProvider.Init();
@@ -87,9 +87,9 @@ CHIP_ERROR CHIPDeviceManager::Init(CHIPDeviceManagerCallbacks * cb)
     SuccessOrExit(err);
 
 #if CHIP_ENABLE_OPENTHREAD
-	ChipLogProgress(DeviceLayer, "Initializing OpenThread stack");
-	err = ThreadStackMgr().InitThreadStack();
-	SuccessOrExit(err);
+    ChipLogProgress(DeviceLayer, "Initializing OpenThread stack");
+    err = ThreadStackMgr().InitThreadStack();
+    SuccessOrExit(err);
 
     ChipLogProgress(DeviceLayer, "Set Thread Device Type");
 
@@ -108,10 +108,10 @@ CHIP_ERROR CHIPDeviceManager::Init(CHIPDeviceManagerCallbacks * cb)
 #endif // CHIP_DEVICE_CONFIG_THREAD_FTD
     SuccessOrExit(err);
 
-	ChipLogProgress(DeviceLayer, "Start OpenThread task");
+    ChipLogProgress(DeviceLayer, "Start OpenThread task");
     err = ThreadStackMgrImpl().StartThreadTask();
     SuccessOrExit(err);
-	ChipLogProgress(DeviceLayer, "Start OpenThread task done!!");
+    ChipLogProgress(DeviceLayer, "Start OpenThread task done!!");
 #endif // CHIP_ENABLE_OPENTHREAD
 
 exit:
diff --git a/examples/lighting-app/realtek_bee/main/DeviceCallbacks.cpp b/examples/lighting-app/realtek_bee/main/DeviceCallbacks.cpp
old mode 100755
new mode 100644
index 1a276354ba..7033bcbf42
--- a/examples/lighting-app/realtek_bee/main/DeviceCallbacks.cpp
+++ b/examples/lighting-app/realtek_bee/main/DeviceCallbacks.cpp
@@ -23,17 +23,17 @@
  *
  **/
 #include "DeviceCallbacks.h"
-#include "Globals.h"
 #include "AppTask.h"
+#include "Globals.h"
 
 #include "CHIPDeviceManager.h"
-#include <app/server/Dnssd.h>
 #include "LightingManager.h"
 #include <app-common/zap-generated/attributes/Accessors.h>
 #include <app-common/zap-generated/ids/Attributes.h>
 #include <app-common/zap-generated/ids/Clusters.h>
 #include <app/ConcreteAttributePath.h>
 #include <app/data-model/Nullable.h>
+#include <app/server/Dnssd.h>
 #include <assert.h>
 #include <lib/core/DataModelTypes.h>
 #include <lib/support/logging/CHIPLogging.h>
@@ -125,8 +125,8 @@ void DeviceCallbacks::UpdateStatusLED()
 
 void DeviceCallbacks::DeviceEventCallback(const ChipDeviceEvent * event, intptr_t arg)
 {
-    //ChipLogProgress(Zcl, "DeviceEventCallback event_type 0x%x", event->Type);
-   
+    // ChipLogProgress(Zcl, "DeviceEventCallback event_type 0x%x", event->Type);
+
     switch (event->Type)
     {
     case DeviceEventType::kCHIPoBLEAdvertisingChange:
@@ -159,30 +159,26 @@ void DeviceCallbacks::DeviceEventCallback(const ChipDeviceEvent * event, intptr_
         UpdateStatusLED();
         break;
 
-    case DeviceEventType::kServerReady:
+    case DeviceEventType::kServerReady: {
+        if (!sHaveBLEConnections)
         {
-            if(!sHaveBLEConnections)
-            {
-                chip::DeviceLayer::SystemLayer().StartTimer(chip::System::Clock::Seconds32(kBLEHandoverDelaySec),
-                                                            HandOverBLE, nullptr);
-            }
-#if CHIP_DEVICE_CONFIG_ENABLE_OTA_REQUESTOR
-            if (!isOTAInitialized)
-            {
-                chip::DeviceLayer::SystemLayer().StartTimer(chip::System::Clock::Seconds32(kInitOTARequestorDelaySec),
-                                                            InitOTARequestorHandler, nullptr);
-                isOTAInitialized = true;
-            }
-#endif         
+            chip::DeviceLayer::SystemLayer().StartTimer(chip::System::Clock::Seconds32(kBLEHandoverDelaySec), HandOverBLE, nullptr);
         }
-        break;
-
-    case DeviceEventType::kCommissioningComplete:
+#if CHIP_DEVICE_CONFIG_ENABLE_OTA_REQUESTOR
+        if (!isOTAInitialized)
         {
-            chip::DeviceLayer::SystemLayer().StartTimer(chip::System::Clock::Seconds32(kBLEHandoverDelaySec),
-                                                        HandOverBLE, nullptr);
+            chip::DeviceLayer::SystemLayer().StartTimer(chip::System::Clock::Seconds32(kInitOTARequestorDelaySec),
+                                                        InitOTARequestorHandler, nullptr);
+            isOTAInitialized = true;
         }
-        break;
+#endif
+    }
+    break;
+
+    case DeviceEventType::kCommissioningComplete: {
+        chip::DeviceLayer::SystemLayer().StartTimer(chip::System::Clock::Seconds32(kBLEHandoverDelaySec), HandOverBLE, nullptr);
+    }
+    break;
     }
 }
 
@@ -239,8 +235,7 @@ void DeviceCallbacks::OnOnOffPostAttributeChangeCallback(EndpointId endpointId,
 {
     VerifyOrExit(attributeId == app::Clusters::OnOff::Attributes::OnOff::Id,
                  ChipLogError(DeviceLayer, "Unhandled Attribute ID: '0x%04lx", attributeId));
-    VerifyOrExit(endpointId == 1,
-                 ChipLogError(DeviceLayer, "Unexpected EndPoint ID: `0x%02x'", endpointId));
+    VerifyOrExit(endpointId == 1, ChipLogError(DeviceLayer, "Unexpected EndPoint ID: `0x%02x'", endpointId));
 
     LightingMgr().InitiateAction(*value ? LightingManager::ON_ACTION : LightingManager::OFF_ACTION, 0, 0, value);
 
@@ -253,8 +248,7 @@ void DeviceCallbacks::OnLevelPostAttributeChangeCallback(EndpointId endpointId,
 {
     VerifyOrExit(attributeId == app::Clusters::LevelControl::Attributes::CurrentLevel::Id,
                  ChipLogError(DeviceLayer, "Unhandled Attribute ID: '0x%04lx", attributeId));
-    VerifyOrExit(endpointId == 1 , 
-                 ChipLogError(DeviceLayer, "Unexpected EndPoint ID: `0x%02x'", endpointId));
+    VerifyOrExit(endpointId == 1, ChipLogError(DeviceLayer, "Unexpected EndPoint ID: `0x%02x'", endpointId));
 
     if (size == 1)
     {
@@ -295,10 +289,9 @@ void DeviceCallbacks::OnColorPostAttributeChangeCallback(EndpointId endpointId,
     }
 
     ChipLogProgress(DeviceLayer, "New hue: %d, New saturation: %d", hue, saturation);
-    //statusLED1.SetColor(hue, saturation);
+    // statusLED1.SetColor(hue, saturation);
 }
 
-
 void DeviceCallbacks::PostAttributeChangeCallback(EndpointId endpointId, ClusterId clusterId, AttributeId attributeId, uint8_t type,
                                                   uint16_t size, uint8_t * value)
 {
@@ -326,8 +319,8 @@ void DeviceCallbacks::PostAttributeChangeCallback(EndpointId endpointId, Cluster
     }
 }
 
-void MatterPostAttributeChangeCallback(const chip::app::ConcreteAttributePath & attributePath, uint8_t type, 
-                                       uint16_t size, uint8_t * value)
+void MatterPostAttributeChangeCallback(const chip::app::ConcreteAttributePath & attributePath, uint8_t type, uint16_t size,
+                                       uint8_t * value)
 {
     chip::DeviceManager::CHIPDeviceManagerCallbacks * cb =
         chip::DeviceManager::CHIPDeviceManager::GetInstance().GetCHIPDeviceManagerCallbacks();
@@ -335,11 +328,13 @@ void MatterPostAttributeChangeCallback(const chip::app::ConcreteAttributePath &
     // ChipLogProgress(DeviceLayer,
     //                 "MatterPostAttributeChangeCallback - Cluster ID: " ChipLogFormatMEI
     //                 ", EndPoint ID: '0x%02x', Attribute ID: " ChipLogFormatMEI,
-    //                 ChipLogValueMEI(attributePath.mClusterId), attributePath.mEndpointId, ChipLogValueMEI(attributePath.mAttributeId));
+    //                 ChipLogValueMEI(attributePath.mClusterId), attributePath.mEndpointId,
+    //                 ChipLogValueMEI(attributePath.mAttributeId));
 
     if (cb != nullptr)
     {
-        cb->PostAttributeChangeCallback(attributePath.mEndpointId, attributePath.mClusterId, attributePath.mAttributeId, type, size, value);
+        cb->PostAttributeChangeCallback(attributePath.mEndpointId, attributePath.mClusterId, attributePath.mAttributeId, type, size,
+                                        value);
     }
 }
 
diff --git a/examples/lighting-app/realtek_bee/main/Globals.cpp b/examples/lighting-app/realtek_bee/main/Globals.cpp
index 582531a427..cc6099ad7d 100755
--- a/examples/lighting-app/realtek_bee/main/Globals.cpp
+++ b/examples/lighting-app/realtek_bee/main/Globals.cpp
@@ -19,4 +19,4 @@
 
 LEDWidget lightStatusLED;
 LEDWidget identifyLED;
-LEDWidget systemStatusLED;
\ No newline at end of file
+LEDWidget systemStatusLED;
diff --git a/examples/lighting-app/realtek_bee/main/LightingManager.cpp b/examples/lighting-app/realtek_bee/main/LightingManager.cpp
old mode 100755
new mode 100644
index 093f9b9a80..3b17270828
--- a/examples/lighting-app/realtek_bee/main/LightingManager.cpp
+++ b/examples/lighting-app/realtek_bee/main/LightingManager.cpp
@@ -104,7 +104,7 @@ bool LightingManager::InitiateAction(Action_t aAction, int32_t aActor, uint16_t
         {
             SetLevel(*value);
         }
-        else if(aAction == ON_ACTION || aAction == OFF_ACTION)
+        else if (aAction == ON_ACTION || aAction == OFF_ACTION)
         {
             Set(new_state == kState_On);
         }
@@ -135,4 +135,4 @@ void LightingManager::Set(bool aOn)
         mState = kState_Off;
     }
     lightStatusLED.Set(mState == kState_On);
-}
\ No newline at end of file
+}
diff --git a/examples/lighting-app/realtek_bee/main/chipinterface.cpp b/examples/lighting-app/realtek_bee/main/chipinterface.cpp
old mode 100755
new mode 100644
index 982b355f5f..2104ba67cb
--- a/examples/lighting-app/realtek_bee/main/chipinterface.cpp
+++ b/examples/lighting-app/realtek_bee/main/chipinterface.cpp
@@ -14,10 +14,10 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
- 
-#include <stdlib.h>
-#include "CHIPDeviceManager.h"
+
 #include "AppTask.h"
+#include "CHIPDeviceManager.h"
+#include <stdlib.h>
 
 using namespace ::chip;
 using namespace ::chip::app;
@@ -47,4 +47,4 @@ extern "C" void ChipTest(void)
         ChipLogError(NotSpecified, "GetAppTask().StartAppTask() failed");
         return;
     }
-}
\ No newline at end of file
+}
diff --git a/examples/lighting-app/realtek_bee/main/include/AppConfig.h b/examples/lighting-app/realtek_bee/main/include/AppConfig.h
old mode 100755
new mode 100644
index cf12fd310e..c2d7c45558
--- a/examples/lighting-app/realtek_bee/main/include/AppConfig.h
+++ b/examples/lighting-app/realtek_bee/main/include/AppConfig.h
@@ -30,13 +30,13 @@
 #define D3_LED 2
 
 #define APP_TASK_NAME "APP"
-#define APP_TOGGLE_BUTTON   SW1_BUTTON
+#define APP_TOGGLE_BUTTON SW1_BUTTON
 #define APP_FUNCTION_BUTTON SW2_BUTTON
-#define APP_LEVEL_BUTTON    SW3_BUTTON
-#define APP_BLE_ADV_BUTTON  SW4_BUTTON
+#define APP_LEVEL_BUTTON SW3_BUTTON
+#define APP_BLE_ADV_BUTTON SW4_BUTTON
 
-#define LIGHT_STATE_LED     D1_LED
-#define IDENTIFY_STATE_LED  D2_LED
-#define SYSTEM_STATE_LED    D3_LED
+#define LIGHT_STATE_LED D1_LED
+#define IDENTIFY_STATE_LED D2_LED
+#define SYSTEM_STATE_LED D3_LED
 
 #endif // APP_CONFIG_H
diff --git a/examples/lighting-app/realtek_bee/main/include/AppTask.h b/examples/lighting-app/realtek_bee/main/include/AppTask.h
old mode 100755
new mode 100644
index b77f4488c1..1dde188f4f
--- a/examples/lighting-app/realtek_bee/main/include/AppTask.h
+++ b/examples/lighting-app/realtek_bee/main/include/AppTask.h
@@ -40,16 +40,16 @@ public:
     CHIP_ERROR StartAppTask();
     void InitGpio();
 
-    static void AppTaskMain(void *pvParameter);
+    static void AppTaskMain(void * pvParameter);
 
-    //void PostLightActionRequest(int32_t aActor, LightingManager::Action_t aAction);//for shell
-    void PostEvent(const AppEvent *event);
+    // void PostLightActionRequest(int32_t aActor, LightingManager::Action_t aAction);//for shell
+    void PostEvent(const AppEvent * event);
     void UpdateClusterState();
 
     static void ButtonEventHandler(uint8_t btnIdx, uint8_t btnPressed);
 
 private:
-    friend AppTask &GetAppTask(void);
+    friend AppTask & GetAppTask(void);
 
     static void InitServer(intptr_t arg);
 
@@ -59,23 +59,23 @@ private:
     void StartTimer(uint32_t aTimeoutMs);
     void CancelTimer(void);
 
-    void DispatchEvent(AppEvent *event);
+    void DispatchEvent(AppEvent * event);
 
-    static void FunctionTimerEventHandler(AppEvent *aEvent);
-    static void FunctionHandler(AppEvent *aEvent);
+    static void FunctionTimerEventHandler(AppEvent * aEvent);
+    static void FunctionHandler(AppEvent * aEvent);
 
-    static void LightingActionEventHandler(AppEvent *aEvent);
-    static void TimerEventHandler(chip::System::Layer *aLayer, void *aAppState);
+    static void LightingActionEventHandler(AppEvent * aEvent);
+    static void TimerEventHandler(chip::System::Layer * aLayer, void * aAppState);
 
     static void BLEStartAdvertising(intptr_t arg);
-    static void BLEAdvEventHandler(AppEvent *aEvent);
+    static void BLEAdvEventHandler(AppEvent * aEvent);
 
     enum Function_t
     {
-        kFunction_NoneSelected   = 0,
-        kFunction_Reset          = 1,
-        kFunction_BLEAdv         = 2,
-        kFunction_FactoryReset   = 3,
+        kFunction_NoneSelected = 0,
+        kFunction_Reset        = 1,
+        kFunction_BLEAdv       = 2,
+        kFunction_FactoryReset = 3,
         kFunction_Invalid
     } Function;
 
@@ -86,7 +86,7 @@ private:
     static AppTask sAppTask;
 };
 
-inline AppTask &GetAppTask(void)
+inline AppTask & GetAppTask(void)
 {
     return AppTask::sAppTask;
 }
diff --git a/examples/lighting-app/realtek_bee/main/include/CHIPDeviceManager.h b/examples/lighting-app/realtek_bee/main/include/CHIPDeviceManager.h
old mode 100755
new mode 100644
index ba0739a1b9..9b37f4ac20
--- a/examples/lighting-app/realtek_bee/main/include/CHIPDeviceManager.h
+++ b/examples/lighting-app/realtek_bee/main/include/CHIPDeviceManager.h
@@ -85,8 +85,8 @@ public:
 class DLL_EXPORT CHIPDeviceManager
 {
 public:
-    CHIPDeviceManager(const CHIPDeviceManager &)  = delete;
-    CHIPDeviceManager(const CHIPDeviceManager &&) = delete;
+    CHIPDeviceManager(const CHIPDeviceManager &)             = delete;
+    CHIPDeviceManager(const CHIPDeviceManager &&)            = delete;
     CHIPDeviceManager & operator=(const CHIPDeviceManager &) = delete;
 
     static CHIPDeviceManager & GetInstance()
diff --git a/examples/lighting-app/realtek_bee/main/include/DeviceCallbacks.h b/examples/lighting-app/realtek_bee/main/include/DeviceCallbacks.h
old mode 100755
new mode 100644
index 88f238afe3..a66b4f8e27
--- a/examples/lighting-app/realtek_bee/main/include/DeviceCallbacks.h
+++ b/examples/lighting-app/realtek_bee/main/include/DeviceCallbacks.h
@@ -33,19 +33,17 @@
 class DeviceCallbacks : public chip::DeviceManager::CHIPDeviceManagerCallbacks
 {
 public:
-    virtual void DeviceEventCallback(const chip::DeviceLayer::ChipDeviceEvent *event, intptr_t arg);
-    void PostAttributeChangeCallback(chip::EndpointId endpointId, chip::ClusterId clusterId,
-                                     chip::AttributeId attributeId,
-                                     uint8_t type, uint16_t size, uint8_t *value) override;
+    virtual void DeviceEventCallback(const chip::DeviceLayer::ChipDeviceEvent * event, intptr_t arg);
+    void PostAttributeChangeCallback(chip::EndpointId endpointId, chip::ClusterId clusterId, chip::AttributeId attributeId,
+                                     uint8_t type, uint16_t size, uint8_t * value) override;
     static void UpdateStatusLED();
 
 private:
-    void OnInternetConnectivityChange(const chip::DeviceLayer::ChipDeviceEvent *event);
+    void OnInternetConnectivityChange(const chip::DeviceLayer::ChipDeviceEvent * event);
     void OnOnOffPostAttributeChangeCallback(chip::EndpointId endpointId, chip::AttributeId attributeId, uint8_t * value);
     void OnLevelPostAttributeChangeCallback(chip::EndpointId endpointId, chip::AttributeId attributeId, uint16_t size,
                                             uint8_t * value);
     void OnColorPostAttributeChangeCallback(chip::EndpointId endpointId, chip::AttributeId attributeId, uint8_t * value);
 
-    void OnIdentifyPostAttributeChangeCallback(chip::EndpointId endpointId,
-                                               chip::AttributeId attributeId, uint8_t *value);
+    void OnIdentifyPostAttributeChangeCallback(chip::EndpointId endpointId, chip::AttributeId attributeId, uint8_t * value);
 };
diff --git a/examples/lighting-app/realtek_bee/main/include/Globals.h b/examples/lighting-app/realtek_bee/main/include/Globals.h
index 24a38b62ff..c02f45ff04 100755
--- a/examples/lighting-app/realtek_bee/main/include/Globals.h
+++ b/examples/lighting-app/realtek_bee/main/include/Globals.h
@@ -22,4 +22,3 @@
 extern LEDWidget lightStatusLED;
 extern LEDWidget identifyLED;
 extern LEDWidget systemStatusLED;
-
diff --git a/examples/lighting-app/realtek_bee/main/include/LightingManager.h b/examples/lighting-app/realtek_bee/main/include/LightingManager.h
old mode 100755
new mode 100644
index 3287e34012..76fd0b1139
--- a/examples/lighting-app/realtek_bee/main/include/LightingManager.h
+++ b/examples/lighting-app/realtek_bee/main/include/LightingManager.h
@@ -23,8 +23,8 @@
 
 #include <functional>
 
-#include "Globals.h"
 #include "AppEvent.h"
+#include "Globals.h"
 
 #include "ColorFormat.h"
 #include "FreeRTOS.h"
diff --git a/examples/lock-app/realtek_bee/main/AppTask.cpp b/examples/lock-app/realtek_bee/main/AppTask.cpp
index 20e494ca33..1bba4e2997 100644
--- a/examples/lock-app/realtek_bee/main/AppTask.cpp
+++ b/examples/lock-app/realtek_bee/main/AppTask.cpp
@@ -23,14 +23,14 @@
 #include "AppTask.h"
 #include "Globals.h"
 
-#include <app/server/OnboardingCodesUtil.h>
 #include <app-common/zap-generated/attributes/Accessors.h>
 #include <app/TestEventTriggerDelegate.h>
 #include <app/clusters/general-diagnostics-server/GenericFaultTestEventTriggerHandler.h>
 #include <app/clusters/general-diagnostics-server/general-diagnostics-server.h>
-#include <app/clusters/ota-requestor/OTATestEventTriggerHandler.h>
 #include <app/clusters/identify-server/identify-server.h>
+#include <app/clusters/ota-requestor/OTATestEventTriggerHandler.h>
 #include <app/server/Dnssd.h>
+#include <app/server/OnboardingCodesUtil.h>
 #include <app/server/Server.h>
 #include <app/util/attribute-storage.h>
 
@@ -47,7 +47,6 @@
 #include <DeviceCallbacks.h>
 #include <os_mem.h>
 
-
 #if CONFIG_ENABLE_CHIP_SHELL
 #include <lib/shell/Engine.h>
 #endif
@@ -146,7 +145,7 @@ void OnTriggerIdentifyEffect(Identify * identify)
 void OnIdentifyStart(Identify *)
 {
     ChipLogProgress(Zcl, "OnIdentifyStart");
-    identifyLED.Blink(500,500);
+    identifyLED.Blink(500, 500);
 }
 
 void OnIdentifyStop(Identify *)
@@ -156,10 +155,7 @@ void OnIdentifyStop(Identify *)
 }
 
 Identify gIdentify = {
-    chip::EndpointId{ 1 },
-    OnIdentifyStart, 
-    OnIdentifyStop, 
-    Clusters::Identify::IdentifyTypeEnum::kVisibleIndicator,
+    chip::EndpointId{ 1 },   OnIdentifyStart, OnIdentifyStop, Clusters::Identify::IdentifyTypeEnum::kVisibleIndicator,
     OnTriggerIdentifyEffect,
 };
 
@@ -250,12 +246,12 @@ void AppTask::InitGpio()
 
 CHIP_ERROR AppTask::Init()
 {
-    size_t check_mem_peak; 
+    size_t check_mem_peak;
     CHIP_ERROR err = CHIP_NO_ERROR;
     ChipLogProgress(DeviceLayer, "Lock App Demo!");
 
-	chip::DeviceManager::CHIPDeviceManager & deviceMgr = chip::DeviceManager::CHIPDeviceManager::GetInstance();
-    err = deviceMgr.Init(&EchoCallbacks);
+    chip::DeviceManager::CHIPDeviceManager & deviceMgr = chip::DeviceManager::CHIPDeviceManager::GetInstance();
+    err                                                = deviceMgr.Init(&EchoCallbacks);
     if (err != CHIP_NO_ERROR)
     {
         ChipLogError(DeviceLayer, "DeviceManagerInit() - ERROR!");
@@ -273,8 +269,8 @@ CHIP_ERROR AppTask::Init()
     chip::Shell::Engine::Root().RunMainLoop();
 #endif
 
-	check_mem_peak = os_mem_peek(RAM_TYPE_DATA_ON);
-	ChipLogProgress(DeviceLayer, "os_mem_peek(RAM_TYPE_DATA_ON) : (%u)", check_mem_peak);
+    check_mem_peak = os_mem_peek(RAM_TYPE_DATA_ON);
+    ChipLogProgress(DeviceLayer, "os_mem_peek(RAM_TYPE_DATA_ON) : (%u)", check_mem_peak);
 
     // Setup Bolt
     err = BoltLockMgr().Init();
@@ -359,7 +355,7 @@ void AppTask::ButtonEventHandler(uint8_t btnIdx, uint8_t btnPressed)
     AppEvent button_event              = {};
     button_event.Type                  = AppEvent::kEventType_Button;
     button_event.ButtonEvent.ButtonIdx = btnIdx;
-    button_event.ButtonEvent.Action    = btnPressed ? true:false;
+    button_event.ButtonEvent.Action    = btnPressed ? true : false;
 
     if (btnIdx == APP_LOCK_BUTTON && btnPressed == 1)
     {
@@ -411,8 +407,8 @@ void AppTask::FunctionTimerEventHandler(AppEvent * aEvent)
         systemStatusLED.Set(false);
         lockLED.Set(false);
 
-        systemStatusLED.Blink(500,500);
-        lockLED.Blink(500,500);
+        systemStatusLED.Blink(500, 500);
+        lockLED.Blink(500, 500);
     }
     else if (sAppTask.mFunctionTimerActive && sAppTask.mFunction == kFunction_FactoryReset)
     {
@@ -424,7 +420,7 @@ void AppTask::FunctionTimerEventHandler(AppEvent * aEvent)
 
 void AppTask::FunctionHandler(AppEvent * aEvent)
 {
-   if (aEvent->ButtonEvent.ButtonIdx != APP_FUNCTION_BUTTON)
+    if (aEvent->ButtonEvent.ButtonIdx != APP_FUNCTION_BUTTON)
     {
         return;
     }
@@ -508,8 +504,8 @@ void AppTask::ActionInitiated(BoltLockManager::Action_t aAction, int32_t aActor)
     {
         sAppTask.mNotifyState = true;
     }
-    
-    lockLED.Blink(50,50);
+
+    lockLED.Blink(50, 50);
 }
 
 void AppTask::ActionCompleted(BoltLockManager::Action_t aAction)
@@ -529,7 +525,7 @@ void AppTask::ActionCompleted(BoltLockManager::Action_t aAction)
 
     if (sAppTask.mSyncClusterToButtonAction)
     {
-        sAppTask.UpdateClusterState();   
+        sAppTask.UpdateClusterState();
     }
 }
 
@@ -541,7 +537,7 @@ void AppTask::PostEvent(const AppEvent * aEvent)
         if (xPortIsInsideInterrupt())
         {
             BaseType_t higherPrioTaskWoken = pdFALSE;
-            status              = xQueueSendFromISR(sAppEventQueue, aEvent, &higherPrioTaskWoken);
+            status                         = xQueueSendFromISR(sAppEventQueue, aEvent, &higherPrioTaskWoken);
             portYIELD_FROM_ISR(higherPrioTaskWoken);
         }
         else
@@ -609,4 +605,4 @@ void AppTask::UpdateClusterState(void)
             }
         }
     });
-}
\ No newline at end of file
+}
diff --git a/examples/lock-app/realtek_bee/main/BoltLockManager.cpp b/examples/lock-app/realtek_bee/main/BoltLockManager.cpp
index af86ef07f1..e879aa7326 100644
--- a/examples/lock-app/realtek_bee/main/BoltLockManager.cpp
+++ b/examples/lock-app/realtek_bee/main/BoltLockManager.cpp
@@ -21,8 +21,8 @@
 
 #include "AppConfig.h"
 #include "AppTask.h"
-#include <app-common/zap-generated/attributes/Accessors.h>
 #include <FreeRTOS.h>
+#include <app-common/zap-generated/attributes/Accessors.h>
 
 using namespace chip;
 using BeeConfig = chip::DeviceLayer::Internal::BeeConfig;
@@ -71,16 +71,16 @@ bool BoltLockManager::ReadConfigValues()
 {
     size_t outLen;
     BeeConfig::ReadConfigValueBin(BeeConfig::kConfigKey_LockUser, reinterpret_cast<uint8_t *>(mUsers),
-                                     sizeof(EmberAfPluginDoorLockUserInfo) * ArraySize(mUsers), outLen);
+                                  sizeof(EmberAfPluginDoorLockUserInfo) * ArraySize(mUsers), outLen);
 
     BeeConfig::ReadConfigValueBin(BeeConfig::kConfigKey_LockUserData, reinterpret_cast<uint8_t *>(mUserData),
-                                     sizeof(UserData) * ArraySize(mUserData), outLen);
+                                  sizeof(UserData) * ArraySize(mUserData), outLen);
 
     BeeConfig::ReadConfigValueBin(BeeConfig::kConfigKey_Credential, reinterpret_cast<uint8_t *>(mCredentials),
-                                     sizeof(EmberAfPluginDoorLockCredentialInfo) * ArraySize(mCredentials), outLen);
+                                  sizeof(EmberAfPluginDoorLockCredentialInfo) * ArraySize(mCredentials), outLen);
 
     BeeConfig::ReadConfigValueBin(BeeConfig::kConfigKey_CredentialData, reinterpret_cast<uint8_t *>(mCredentialData),
-                                     sizeof(mCredentialData), outLen);
+                                  sizeof(mCredentialData), outLen);
 
     return true;
 }
@@ -105,8 +105,8 @@ bool BoltLockManager::SetUser(uint16_t userIndex, FabricIndex creator, FabricInd
     VerifyOrReturnError(userName.size() <= DOOR_LOCK_MAX_USER_NAME_SIZE, false);
     VerifyOrReturnError(totalCredentials <= CONFIG_LOCK_NUM_CREDENTIALS_PER_USER, false);
 
-    UserData & userData     = mUserData[userIndex - 1];
-    auto & user             = mUsers[userIndex - 1];
+    UserData & userData = mUserData[userIndex - 1];
+    auto & user         = mUsers[userIndex - 1];
 
     Platform::CopyString(userData.mName, userName);
     memcpy(userData.mCredentials, credentials, totalCredentials * sizeof(CredentialStruct));
@@ -124,12 +124,12 @@ bool BoltLockManager::SetUser(uint16_t userIndex, FabricIndex creator, FabricInd
 
     // Save user information in NVM flash
     BeeConfig::WriteConfigValueBin(BeeConfig::kConfigKey_LockUser, reinterpret_cast<const uint8_t *>(mUsers),
-                                      sizeof(EmberAfPluginDoorLockUserInfo) * CONFIG_LOCK_NUM_USERS);
+                                   sizeof(EmberAfPluginDoorLockUserInfo) * CONFIG_LOCK_NUM_USERS);
 
     BeeConfig::WriteConfigValueBin(BeeConfig::kConfigKey_LockUserData, reinterpret_cast<const uint8_t *>(mUserData),
-                                      sizeof(UserData) * CONFIG_LOCK_NUM_USERS);
+                                   sizeof(UserData) * CONFIG_LOCK_NUM_USERS);
 
-    ChipLogProgress(Zcl, "Successfully set the user [index=%d]",  userIndex);
+    ChipLogProgress(Zcl, "Successfully set the user [index=%d]", userIndex);
 
     return true;
 }
@@ -153,8 +153,8 @@ bool BoltLockManager::SetCredential(uint16_t credentialIndex, FabricIndex creato
     VerifyOrReturnError(credentialIndex > 0 && credentialIndex <= CONFIG_LOCK_NUM_CREDENTIALS, false);
     VerifyOrReturnError(secret.size() <= kMaxCredentialLength, false);
 
-    auto & credentialData           = mCredentialData[credentialIndex - 1];
-    auto & credential               = mCredentials[credentialIndex - 1];
+    auto & credentialData = mCredentialData[credentialIndex - 1];
+    auto & credential     = mCredentials[credentialIndex - 1];
 
     memcpy(credentialData, secret.data(), secret.size());
 
@@ -167,10 +167,10 @@ bool BoltLockManager::SetCredential(uint16_t credentialIndex, FabricIndex creato
     credential.lastModifiedBy     = modifier;
 
     BeeConfig::WriteConfigValueBin(BeeConfig::kConfigKey_Credential, reinterpret_cast<const uint8_t *>(mCredentials),
-                                      sizeof(EmberAfPluginDoorLockCredentialInfo) * CONFIG_LOCK_NUM_CREDENTIALS);
+                                   sizeof(EmberAfPluginDoorLockCredentialInfo) * CONFIG_LOCK_NUM_CREDENTIALS);
 
     BeeConfig::WriteConfigValueBin(BeeConfig::kConfigKey_CredentialData, reinterpret_cast<const uint8_t *>(mCredentialData),
-                                      CONFIG_LOCK_NUM_CREDENTIALS * kMaxCredentialLength);
+                                   CONFIG_LOCK_NUM_CREDENTIALS * kMaxCredentialLength);
 
     ChipLogProgress(Zcl, "Setting lock credential %u: %s", static_cast<unsigned>(credentialIndex),
                     credential.status == DlCredentialStatus::kAvailable ? "available" : "occupied");
@@ -279,9 +279,8 @@ void BoltLockManager::ActuatorMovementTimerEventHandler(AppEvent * aEvent)
     }
 }
 
-bool BoltLockManager::setLockState(EndpointId endpointId, const Nullable<FabricIndex> & fabricIdx,
-                               const Nullable<NodeId> & nodeId, DlLockState lockState, const Optional<ByteSpan> & pinCode,
-                               OperationErrorEnum & err)
+bool BoltLockManager::setLockState(EndpointId endpointId, const Nullable<FabricIndex> & fabricIdx, const Nullable<NodeId> & nodeId,
+                                   DlLockState lockState, const Optional<ByteSpan> & pinCode, OperationErrorEnum & err)
 {
     // Assume pin is required until told otherwise
     bool requirePin = true;
@@ -320,7 +319,7 @@ bool BoltLockManager::setLockState(EndpointId endpointId, const Nullable<FabricI
 
             DoorLockServer::Instance().SetLockState(endpointId, lockState, OperationSourceEnum::kRemote, NullNullable, NullNullable,
                                                     fabricIdx, nodeId);
-                                                    
+
             return true;
         }
     }
@@ -331,14 +330,14 @@ bool BoltLockManager::setLockState(EndpointId endpointId, const Nullable<FabricI
     return false;
 }
 
-bool BoltLockManager::Lock(EndpointId endpointId, const Nullable<FabricIndex> & fabricIdx,
-                       const Nullable<NodeId> & nodeId, const Optional<ByteSpan> & pin, OperationErrorEnum & err)
+bool BoltLockManager::Lock(EndpointId endpointId, const Nullable<FabricIndex> & fabricIdx, const Nullable<NodeId> & nodeId,
+                           const Optional<ByteSpan> & pin, OperationErrorEnum & err)
 {
     return setLockState(endpointId, fabricIdx, nodeId, DlLockState::kLocked, pin, err);
 }
 
-bool BoltLockManager::Unlock(EndpointId endpointId, const Nullable<FabricIndex> & fabricIdx,
-                         const Nullable<NodeId> & nodeId, const Optional<ByteSpan> & pin, OperationErrorEnum & err)
+bool BoltLockManager::Unlock(EndpointId endpointId, const Nullable<FabricIndex> & fabricIdx, const Nullable<NodeId> & nodeId,
+                             const Optional<ByteSpan> & pin, OperationErrorEnum & err)
 {
     if (DoorLockServer::Instance().SupportsUnbolt(endpointId))
     {
@@ -346,4 +345,4 @@ bool BoltLockManager::Unlock(EndpointId endpointId, const Nullable<FabricIndex>
         return setLockState(endpointId, fabricIdx, nodeId, DlLockState::kUnlatched, pin, err);
     }
     return setLockState(endpointId, fabricIdx, nodeId, DlLockState::kUnlocked, pin, err);
-}
\ No newline at end of file
+}
diff --git a/examples/lock-app/realtek_bee/main/CHIPDeviceManager.cpp b/examples/lock-app/realtek_bee/main/CHIPDeviceManager.cpp
old mode 100755
new mode 100644
index ec267f49c7..6096e9fe74
--- a/examples/lock-app/realtek_bee/main/CHIPDeviceManager.cpp
+++ b/examples/lock-app/realtek_bee/main/CHIPDeviceManager.cpp
@@ -26,10 +26,10 @@
 
 #include "CHIPDeviceManager.h"
 #include <app/util/basic-types.h>
-#include <support/CHIPMem.h>
-#include <support/CodeUtils.h>
 #include <core/ErrorStr.h>
 #include <platform/Realtek_bee/FactoryDataProvider.h>
+#include <support/CHIPMem.h>
+#include <support/CodeUtils.h>
 
 #include <app-common/zap-generated/attributes/Accessors.h>
 #include <app-common/zap-generated/ids/Attributes.h>
@@ -63,12 +63,12 @@ CHIP_ERROR CHIPDeviceManager::Init(CHIPDeviceManagerCallbacks * cb)
     mCB = cb;
 
     ChipLogProgress(DeviceLayer, "Start to init MemoryInit");
-	err = Platform::MemoryInit();
+    err = Platform::MemoryInit();
     SuccessOrExit(err);
 
-	ChipLogProgress(DeviceLayer, "Start to init InitChipStack");
-	err = PlatformMgr().InitChipStack();
-	SuccessOrExit(err);
+    ChipLogProgress(DeviceLayer, "Start to init InitChipStack");
+    err = PlatformMgr().InitChipStack();
+    SuccessOrExit(err);
 
     ChipLogProgress(DeviceLayer, "Factorydata init");
     err = mFactoryDataProvider.Init();
@@ -88,9 +88,9 @@ CHIP_ERROR CHIPDeviceManager::Init(CHIPDeviceManagerCallbacks * cb)
     SuccessOrExit(err);
 
 #if CHIP_ENABLE_OPENTHREAD
-	ChipLogProgress(DeviceLayer, "Initializing OpenThread stack");
-	err = ThreadStackMgr().InitThreadStack();
-	SuccessOrExit(err);
+    ChipLogProgress(DeviceLayer, "Initializing OpenThread stack");
+    err = ThreadStackMgr().InitThreadStack();
+    SuccessOrExit(err);
 
     ChipLogProgress(DeviceLayer, "Set Thread Device Type");
 #if CHIP_DEVICE_CONFIG_THREAD_FTD
@@ -108,10 +108,10 @@ CHIP_ERROR CHIPDeviceManager::Init(CHIPDeviceManagerCallbacks * cb)
 #endif // CHIP_DEVICE_CONFIG_THREAD_FTD
     SuccessOrExit(err);
 
-	ChipLogProgress(DeviceLayer, "Start OpenThread task");
+    ChipLogProgress(DeviceLayer, "Start OpenThread task");
     err = ThreadStackMgrImpl().StartThreadTask();
     SuccessOrExit(err);
-	ChipLogProgress(DeviceLayer, "Start OpenThread task done!!");
+    ChipLogProgress(DeviceLayer, "Start OpenThread task done!!");
 #endif // CHIP_ENABLE_OPENTHREAD
 
 exit:
diff --git a/examples/lock-app/realtek_bee/main/DeviceCallbacks.cpp b/examples/lock-app/realtek_bee/main/DeviceCallbacks.cpp
old mode 100755
new mode 100644
index f9bcb9032d..1832f20512
--- a/examples/lock-app/realtek_bee/main/DeviceCallbacks.cpp
+++ b/examples/lock-app/realtek_bee/main/DeviceCallbacks.cpp
@@ -25,14 +25,14 @@
 #include "DeviceCallbacks.h"
 #include "Globals.h"
 
-#include "CHIPDeviceManager.h"
-#include <app/server/Dnssd.h>
 #include "BoltLockManager.h"
+#include "CHIPDeviceManager.h"
 #include <app-common/zap-generated/attributes/Accessors.h>
 #include <app-common/zap-generated/ids/Attributes.h>
 #include <app-common/zap-generated/ids/Clusters.h>
 #include <app/ConcreteAttributePath.h>
 #include <app/data-model/Nullable.h>
+#include <app/server/Dnssd.h>
 #include <assert.h>
 #include <lib/core/DataModelTypes.h>
 #include <lib/support/logging/CHIPLogging.h>
@@ -58,7 +58,7 @@ uint32_t identifyTimerCount;
 constexpr uint32_t kIdentifyTimerDelayMS     = 250;
 constexpr uint32_t kInitOTARequestorDelaySec = 3;
 
-constexpr EndpointId kLightEndpointId          = 1;
+constexpr EndpointId kLightEndpointId = 1;
 
 bool sIsNetworkProvisioned = false;
 bool sIsNetworkEnabled     = false;
@@ -118,7 +118,7 @@ void DeviceCallbacks::UpdateStatusLED()
 
 void DeviceCallbacks::DeviceEventCallback(const ChipDeviceEvent * event, intptr_t arg)
 {
-    //ChipLogProgress(Zcl, "DeviceEventCallback event_type 0x%x", event->Type);
+    // ChipLogProgress(Zcl, "DeviceEventCallback event_type 0x%x", event->Type);
     switch (event->Type)
     {
     case DeviceEventType::kCHIPoBLEAdvertisingChange:
@@ -150,7 +150,7 @@ void DeviceCallbacks::DeviceEventCallback(const ChipDeviceEvent * event, intptr_
         sIsNetworkEnabled     = ConnectivityMgr().IsThreadEnabled();
         UpdateStatusLED();
         break;
-    
+
     case DeviceEventType::kCommissioningComplete:
         break;
 
@@ -217,8 +217,7 @@ exit:
     return;
 }
 
-void DeviceCallbacks::OnLockPostAttributeChangeCallback(chip::EndpointId endpointId,
-                                           chip::AttributeId attributeId, uint8_t *value)
+void DeviceCallbacks::OnLockPostAttributeChangeCallback(chip::EndpointId endpointId, chip::AttributeId attributeId, uint8_t * value)
 {
     if (attributeId == app::Clusters::DoorLock::Attributes::LockState::Id)
     {
@@ -229,7 +228,7 @@ void DeviceCallbacks::OnLockPostAttributeChangeCallback(chip::EndpointId endpoin
         // case to_underlying(DlLockState::kLocked):
         //     BoltLockMgr().InitiateAction(0, BoltLockManager::LOCK_ACTION);
         // break;
-            
+
         // case to_underlying(DlLockState::kUnlocked):
         //     BoltLockMgr().InitiateAction(0, BoltLockManager::UNLOCK_ACTION);
         // break;
@@ -259,8 +258,8 @@ void DeviceCallbacks::PostAttributeChangeCallback(EndpointId endpointId, Cluster
     }
 }
 
-void MatterPostAttributeChangeCallback(const chip::app::ConcreteAttributePath & attributePath, uint8_t type, 
-                                       uint16_t size, uint8_t * value)
+void MatterPostAttributeChangeCallback(const chip::app::ConcreteAttributePath & attributePath, uint8_t type, uint16_t size,
+                                       uint8_t * value)
 {
     chip::DeviceManager::CHIPDeviceManagerCallbacks * cb =
         chip::DeviceManager::CHIPDeviceManager::GetInstance().GetCHIPDeviceManagerCallbacks();
@@ -268,11 +267,13 @@ void MatterPostAttributeChangeCallback(const chip::app::ConcreteAttributePath &
     ChipLogProgress(Zcl,
                     "MatterPostAttributeChangeCallback - Cluster ID: " ChipLogFormatMEI
                     ", EndPoint ID: '0x%02x', Attribute ID: " ChipLogFormatMEI,
-                    ChipLogValueMEI(attributePath.mClusterId), attributePath.mEndpointId, ChipLogValueMEI(attributePath.mAttributeId));
+                    ChipLogValueMEI(attributePath.mClusterId), attributePath.mEndpointId,
+                    ChipLogValueMEI(attributePath.mAttributeId));
 
     if (cb != nullptr)
     {
-        cb->PostAttributeChangeCallback(attributePath.mEndpointId, attributePath.mClusterId, attributePath.mAttributeId, type, size, value);
+        cb->PostAttributeChangeCallback(attributePath.mEndpointId, attributePath.mClusterId, attributePath.mAttributeId, type, size,
+                                        value);
     }
 }
 
@@ -324,7 +325,7 @@ bool emberAfPluginDoorLockOnDoorUnlockCommand(chip::EndpointId endpointId, const
     ChipLogProgress(Zcl, "Door Lock App: UnLock Command endpoint=%d", endpointId);
 
     bool status = BoltLockMgr().Unlock(endpointId, fabricIdx, nodeId, pinCode, err);
-    if (status)    
+    if (status)
     {
         BoltLockMgr().InitiateAction(AppEvent::kEventType_Lock, BoltLockManager::UNLOCK_ACTION);
     }
@@ -355,4 +356,3 @@ void emberAfPluginDoorLockOnAutoRelock(chip::EndpointId endpointId)
     // Apply the relock state in the application control
     BoltLockMgr().InitiateAction(AppEvent::kEventType_Timer, BoltLockManager::LOCK_ACTION);
 }
-
diff --git a/examples/lock-app/realtek_bee/main/Globals.cpp b/examples/lock-app/realtek_bee/main/Globals.cpp
index 43bf5b36c1..7f242b8b40 100755
--- a/examples/lock-app/realtek_bee/main/Globals.cpp
+++ b/examples/lock-app/realtek_bee/main/Globals.cpp
@@ -19,4 +19,4 @@
 
 LEDWidget lockLED;
 LEDWidget identifyLED;
-LEDWidget systemStatusLED;
\ No newline at end of file
+LEDWidget systemStatusLED;
diff --git a/examples/lock-app/realtek_bee/main/chipinterface.cpp b/examples/lock-app/realtek_bee/main/chipinterface.cpp
old mode 100755
new mode 100644
index 283a6d4e3d..90821e204c
--- a/examples/lock-app/realtek_bee/main/chipinterface.cpp
+++ b/examples/lock-app/realtek_bee/main/chipinterface.cpp
@@ -14,10 +14,10 @@
  *    See the License for the specific language governing permissions and
  *    limitations under the License.
  */
- 
-#include <stdlib.h>
-#include "CHIPDeviceManager.h"
+
 #include "AppTask.h"
+#include "CHIPDeviceManager.h"
+#include <stdlib.h>
 
 using namespace ::chip;
 using namespace ::chip::app;
@@ -52,4 +52,4 @@ extern "C" void ChipTest(void)
         ChipLogError(NotSpecified, "GetAppTask().StartAppTask() failed");
         return;
     }
-}
\ No newline at end of file
+}
diff --git a/examples/lock-app/realtek_bee/main/include/AppConfig.h b/examples/lock-app/realtek_bee/main/include/AppConfig.h
index ea1709f536..9ce8307437 100644
--- a/examples/lock-app/realtek_bee/main/include/AppConfig.h
+++ b/examples/lock-app/realtek_bee/main/include/AppConfig.h
@@ -30,13 +30,13 @@
 
 #define APP_TASK_NAME "APP"
 
-#define APP_LOCK_BUTTON        SW1_BUTTON
-#define APP_FUNCTION_BUTTON    SW2_BUTTON
+#define APP_LOCK_BUTTON SW1_BUTTON
+#define APP_FUNCTION_BUTTON SW2_BUTTON
 #define APP_LOCK_JAMMED_BUTTON SW3_BUTTON
 
-#define LOCK_STATE_LED         D1_LED
-#define IDENTIFY_STATE_LED     D2_LED
-#define SYSTEM_STATE_LED       D3_LED
+#define LOCK_STATE_LED D1_LED
+#define IDENTIFY_STATE_LED D2_LED
+#define SYSTEM_STATE_LED D3_LED
 
 // Time it takes in ms for the simulated actuator to move from one
 // state to another.
diff --git a/examples/lock-app/realtek_bee/main/include/AppEvent.h b/examples/lock-app/realtek_bee/main/include/AppEvent.h
index 4bbaf6e254..0782f3de53 100644
--- a/examples/lock-app/realtek_bee/main/include/AppEvent.h
+++ b/examples/lock-app/realtek_bee/main/include/AppEvent.h
@@ -22,7 +22,6 @@
 #include <stdbool.h>
 #include <stdint.h>
 
-
 struct AppEvent;
 typedef void (*EventHandler)(AppEvent *);
 
diff --git a/examples/lock-app/realtek_bee/main/include/AppTask.h b/examples/lock-app/realtek_bee/main/include/AppTask.h
index 68e3bb3a54..c2043d8ae8 100644
--- a/examples/lock-app/realtek_bee/main/include/AppTask.h
+++ b/examples/lock-app/realtek_bee/main/include/AppTask.h
@@ -46,7 +46,7 @@ public:
 
     static void AppTaskMain(void * pvParameter);
 
-    //void PostLockActionRequest(int32_t aActor, BoltLockManager::Action_t aAction);//for shell
+    // void PostLockActionRequest(int32_t aActor, BoltLockManager::Action_t aAction);//for shell
     void PostEvent(const AppEvent * event);
     void UpdateClusterState();
 
@@ -70,24 +70,24 @@ private:
     static void JammedLockEventHandler(AppEvent * aEvent);
     static void TimerEventHandler(chip::System::Layer * aLayer, void * aAppState);
 
-    //static void MatterEventHandler(const chip::DeviceLayer::ChipDeviceEvent * event, intptr_t arg);
-    //static void UpdateLEDs(void);
+    // static void MatterEventHandler(const chip::DeviceLayer::ChipDeviceEvent * event, intptr_t arg);
+    // static void UpdateLEDs(void);
 
     void StartTimer(uint32_t aTimeoutMs);
 
     enum Function_t
     {
-        kFunction_NoneSelected   = 0,
-        kFunction_Reset          = 1,
-        kFunction_FactoryReset   = 2,
-       
+        kFunction_NoneSelected = 0,
+        kFunction_Reset        = 1,
+        kFunction_FactoryReset = 2,
+
         kFunction_Invalid
     } Function;
 
-    Function_t mFunction                 = Function_t::kFunction_NoneSelected;
-    bool mFunctionTimerActive            = false;
-    bool mSyncClusterToButtonAction      = false;
-    bool mNotifyState                    = false;
+    Function_t mFunction            = Function_t::kFunction_NoneSelected;
+    bool mFunctionTimerActive       = false;
+    bool mSyncClusterToButtonAction = false;
+    bool mNotifyState               = false;
 
     chip::DeviceLayer::FactoryDataProvider mFactoryDataProvider;
 
diff --git a/examples/lock-app/realtek_bee/main/include/BoltLockManager.h b/examples/lock-app/realtek_bee/main/include/BoltLockManager.h
index 8bca5f2025..2ae9e41e83 100644
--- a/examples/lock-app/realtek_bee/main/include/BoltLockManager.h
+++ b/examples/lock-app/realtek_bee/main/include/BoltLockManager.h
@@ -81,8 +81,8 @@ public:
     bool SetCredential(uint16_t credentialIndex, chip::FabricIndex creator, chip::FabricIndex modifier,
                        DlCredentialStatus credentialStatus, CredentialTypeEnum credentialType, const chip::ByteSpan & secret);
 
-    bool Lock(chip::EndpointId endpointId, const Nullable<chip::FabricIndex> & fabricIdx,
-                       const Nullable<chip::NodeId> & nodeId, const Optional<chip::ByteSpan> & pin, OperationErrorEnum & err);
+    bool Lock(chip::EndpointId endpointId, const Nullable<chip::FabricIndex> & fabricIdx, const Nullable<chip::NodeId> & nodeId,
+              const Optional<chip::ByteSpan> & pin, OperationErrorEnum & err);
     bool Unlock(chip::EndpointId endpointId, const Nullable<chip::FabricIndex> & fabricIdx, const Nullable<chip::NodeId> & nodeId,
                 const Optional<chip::ByteSpan> & pin, OperationErrorEnum & err);
     bool setLockState(chip::EndpointId endpointId, const Nullable<chip::FabricIndex> & fabricIdx,
diff --git a/examples/lock-app/realtek_bee/main/include/CHIPDeviceManager.h b/examples/lock-app/realtek_bee/main/include/CHIPDeviceManager.h
old mode 100755
new mode 100644
index ba0739a1b9..9b37f4ac20
--- a/examples/lock-app/realtek_bee/main/include/CHIPDeviceManager.h
+++ b/examples/lock-app/realtek_bee/main/include/CHIPDeviceManager.h
@@ -85,8 +85,8 @@ public:
 class DLL_EXPORT CHIPDeviceManager
 {
 public:
-    CHIPDeviceManager(const CHIPDeviceManager &)  = delete;
-    CHIPDeviceManager(const CHIPDeviceManager &&) = delete;
+    CHIPDeviceManager(const CHIPDeviceManager &)             = delete;
+    CHIPDeviceManager(const CHIPDeviceManager &&)            = delete;
     CHIPDeviceManager & operator=(const CHIPDeviceManager &) = delete;
 
     static CHIPDeviceManager & GetInstance()
diff --git a/examples/lock-app/realtek_bee/main/include/DeviceCallbacks.h b/examples/lock-app/realtek_bee/main/include/DeviceCallbacks.h
old mode 100755
new mode 100644
index f6dbe2d516..5de97cdb10
--- a/examples/lock-app/realtek_bee/main/include/DeviceCallbacks.h
+++ b/examples/lock-app/realtek_bee/main/include/DeviceCallbacks.h
@@ -33,16 +33,13 @@
 class DeviceCallbacks : public chip::DeviceManager::CHIPDeviceManagerCallbacks
 {
 public:
-    virtual void DeviceEventCallback(const chip::DeviceLayer::ChipDeviceEvent *event, intptr_t arg);
-    void PostAttributeChangeCallback(chip::EndpointId endpointId, chip::ClusterId clusterId,
-                                     chip::AttributeId attributeId,
-                                     uint8_t type, uint16_t size, uint8_t *value) override;
+    virtual void DeviceEventCallback(const chip::DeviceLayer::ChipDeviceEvent * event, intptr_t arg);
+    void PostAttributeChangeCallback(chip::EndpointId endpointId, chip::ClusterId clusterId, chip::AttributeId attributeId,
+                                     uint8_t type, uint16_t size, uint8_t * value) override;
     static void UpdateStatusLED();
 
 private:
-    void OnInternetConnectivityChange(const chip::DeviceLayer::ChipDeviceEvent *event);
-    void OnLockPostAttributeChangeCallback(chip::EndpointId endpointId,
-                                           chip::AttributeId attributeId, uint8_t *value);
-    void OnIdentifyPostAttributeChangeCallback(chip::EndpointId endpointId,
-                                               chip::AttributeId attributeId, uint8_t *value);
+    void OnInternetConnectivityChange(const chip::DeviceLayer::ChipDeviceEvent * event);
+    void OnLockPostAttributeChangeCallback(chip::EndpointId endpointId, chip::AttributeId attributeId, uint8_t * value);
+    void OnIdentifyPostAttributeChangeCallback(chip::EndpointId endpointId, chip::AttributeId attributeId, uint8_t * value);
 };
diff --git a/examples/lock-app/realtek_bee/main/include/Globals.h b/examples/lock-app/realtek_bee/main/include/Globals.h
old mode 100755
new mode 100644
index a90c619078..ff680c9644
--- a/examples/lock-app/realtek_bee/main/include/Globals.h
+++ b/examples/lock-app/realtek_bee/main/include/Globals.h
@@ -19,7 +19,6 @@
 
 #include "util/LEDWidget.h"
 
-
 extern LEDWidget lockLED;
 extern LEDWidget identifyLED;
-extern LEDWidget systemStatusLED;
\ No newline at end of file
+extern LEDWidget systemStatusLED;
diff --git a/examples/ota-requestor-app/realtek_bee/main/AppTask.cpp b/examples/ota-requestor-app/realtek_bee/main/AppTask.cpp
index 03d78dbfb4..6a9891afd7 100644
--- a/examples/ota-requestor-app/realtek_bee/main/AppTask.cpp
+++ b/examples/ota-requestor-app/realtek_bee/main/AppTask.cpp
@@ -21,29 +21,28 @@
 #include "AppEvent.h"
 #include "AppTask.h"
 
-#include "Server.h"
 #include "LEDWidget.h"
+#include "Server.h"
 #include <DeviceInfoProviderImpl.h>
-#include <credentials/DeviceAttestationCredsProvider.h>
-#include <credentials/examples/DeviceAttestationCredsExample.h>
-#include <platform/CHIPDeviceLayer.h>
-#include <support/CHIPMem.h>
 #include <app/TestEventTriggerDelegate.h>
 #include <app/clusters/identify-server/identify-server.h>
-#include <app/clusters/ota-requestor/OTATestEventTriggerHandler.h>
 #include <app/clusters/network-commissioning/network-commissioning.h>
-#include <app/util/endpoint-config-api.h>
+#include <app/clusters/ota-requestor/OTATestEventTriggerHandler.h>
 #include <app/server/OnboardingCodesUtil.h>
+#include <app/util/endpoint-config-api.h>
+#include <credentials/DeviceAttestationCredsProvider.h>
+#include <credentials/examples/DeviceAttestationCredsExample.h>
+#include <inet/EndPointStateOpenThread.h>
 #include <lib/core/ErrorStr.h>
 #include <platform/CHIPDeviceLayer.h>
 #include <setup_payload/QRCodeSetupPayloadGenerator.h>
-#include <inet/EndPointStateOpenThread.h>
+#include <support/CHIPMem.h>
 
 #include <CHIPDeviceManager.h>
 #include <DeviceCallbacks.h>
 
-#include <os_mem.h>
 #include "matter_gpio.h"
+#include <os_mem.h>
 
 #if CONFIG_ENABLE_CHIP_SHELL
 #include <lib/shell/Engine.h>
@@ -83,7 +82,7 @@ LEDWidget identifyLED;
 void OnIdentifyStart(Identify *)
 {
     ChipLogProgress(Zcl, "OnIdentifyStart");
-    identifyLED.Blink(500,500);
+    identifyLED.Blink(500, 500);
 }
 
 void OnIdentifyStop(Identify *)
@@ -123,7 +122,6 @@ static Identify gIdentify1 = {
 uint8_t sTestEventTriggerEnableKey[TestEventTriggerDelegate::kEnableKeyLength] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                                                                                    0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
 
-
 void LockOpenThreadTask(void)
 {
     chip::DeviceLayer::ThreadStackMgr().LockThreadStack();
@@ -208,7 +206,7 @@ void AppTask::PostEvent(const AppEvent * aEvent)
         if (xPortIsInsideInterrupt())
         {
             BaseType_t higherPrioTaskWoken = pdFALSE;
-            status              = xQueueSendFromISR(sAppEventQueue, aEvent, &higherPrioTaskWoken);
+            status                         = xQueueSendFromISR(sAppEventQueue, aEvent, &higherPrioTaskWoken);
             portYIELD_FROM_ISR(higherPrioTaskWoken);
         }
         else
@@ -246,16 +244,15 @@ void AppTask::ButtonEventHandler(uint8_t btnIdx, uint8_t btnPressed)
     AppEvent button_event              = {};
     button_event.ButtonEvent.ButtonIdx = btnIdx;
     button_event.Type                  = AppEvent::kEventType_Button;
-    button_event.ButtonEvent.Action    = btnPressed ? true:false;
+    button_event.ButtonEvent.Action    = btnPressed ? true : false;
 
     switch (btnIdx)
     {
-    case APP_FUNCTION_BUTTON:
-        {
-            // Hand off to Functionality handler - depends on duration of press
-            button_event.Handler = FunctionHandler;
-        }
-        break;
+    case APP_FUNCTION_BUTTON: {
+        // Hand off to Functionality handler - depends on duration of press
+        button_event.Handler = FunctionHandler;
+    }
+    break;
 
     default:
         return;
@@ -331,7 +328,7 @@ void AppTask::FunctionTimerEventHandler(AppEvent * aEvent)
         sAppTask.mFunction = kFunction_FactoryReset;
         // Turn off all LEDs before starting blink to make sure blink is coordinated.
         identifyLED.Set(false);
-        identifyLED.Blink(500,500);
+        identifyLED.Blink(500, 500);
     }
     else if (sAppTask.mFunctionTimerActive && sAppTask.mFunction == kFunction_FactoryReset)
     {
@@ -384,8 +381,8 @@ CHIP_ERROR AppTask::Init()
     ChipLogProgress(DeviceLayer, "OTA Requestor App Demo!");
     CHIP_ERROR err = CHIP_NO_ERROR;
 
-    CHIPDeviceManager &deviceMgr = CHIPDeviceManager::GetInstance();
-    err = deviceMgr.Init(&EchoCallbacks);
+    CHIPDeviceManager & deviceMgr = CHIPDeviceManager::GetInstance();
+    err                           = deviceMgr.Init(&EchoCallbacks);
     if (err != CHIP_NO_ERROR)
     {
         ChipLogError(DeviceLayer, "DeviceManagerInit() - ERROR!");
diff --git a/examples/ota-requestor-app/realtek_bee/main/CHIPDeviceManager.cpp b/examples/ota-requestor-app/realtek_bee/main/CHIPDeviceManager.cpp
index 60707280bc..22f4eabcab 100644
--- a/examples/ota-requestor-app/realtek_bee/main/CHIPDeviceManager.cpp
+++ b/examples/ota-requestor-app/realtek_bee/main/CHIPDeviceManager.cpp
@@ -28,10 +28,10 @@
 #include "CHIPDeviceManager.h"
 #include <app/ConcreteAttributePath.h>
 #include <app/util/basic-types.h>
-#include <support/CHIPMem.h>
-#include <support/CodeUtils.h>
 #include <core/ErrorStr.h>
 #include <platform/Realtek_bee/FactoryDataProvider.h>
+#include <support/CHIPMem.h>
+#include <support/CodeUtils.h>
 
 using namespace ::chip;
 
@@ -58,12 +58,12 @@ CHIP_ERROR CHIPDeviceManager::Init(CHIPDeviceManagerCallbacks * cb)
     mCB = cb;
 
     ChipLogProgress(DeviceLayer, "Start to init MemoryInit");
-	err = Platform::MemoryInit();
+    err = Platform::MemoryInit();
     SuccessOrExit(err);
 
-	ChipLogProgress(DeviceLayer, "Start to init InitChipStack");
-	err = PlatformMgr().InitChipStack();
-	SuccessOrExit(err);
+    ChipLogProgress(DeviceLayer, "Start to init InitChipStack");
+    err = PlatformMgr().InitChipStack();
+    SuccessOrExit(err);
 
     ChipLogProgress(DeviceLayer, "Factorydata init");
     err = mFactoryDataProvider.Init();
@@ -82,14 +82,14 @@ CHIP_ERROR CHIPDeviceManager::Init(CHIPDeviceManagerCallbacks * cb)
     err = PlatformMgr().StartEventLoopTask();
     SuccessOrExit(err);
 
-    //chip::DeviceLayer::PlatformMgr().ScheduleWork(InitServer, 0);
+    // chip::DeviceLayer::PlatformMgr().ScheduleWork(InitServer, 0);
 #if CHIP_ENABLE_OPENTHREAD
-	ChipLogProgress(DeviceLayer, "Initializing OpenThread stack");
-	err = ThreadStackMgr().InitThreadStack();
-	SuccessOrExit(err);
+    ChipLogProgress(DeviceLayer, "Initializing OpenThread stack");
+    err = ThreadStackMgr().InitThreadStack();
+    SuccessOrExit(err);
 
     ChipLogProgress(DeviceLayer, "Set Thread Device Type");
-    
+
 #if CHIP_DEVICE_CONFIG_THREAD_FTD
     err = ConnectivityMgr().SetThreadDeviceType(ConnectivityManager::kThreadDeviceType_Router);
 #else // CHIP_DEVICE_CONFIG_THREAD_FTD
@@ -105,10 +105,10 @@ CHIP_ERROR CHIPDeviceManager::Init(CHIPDeviceManagerCallbacks * cb)
 #endif // CHIP_DEVICE_CONFIG_THREAD_FTD
     SuccessOrExit(err);
 
-	ChipLogProgress(DeviceLayer, "Start OpenThread task");
+    ChipLogProgress(DeviceLayer, "Start OpenThread task");
     err = ThreadStackMgrImpl().StartThreadTask();
     SuccessOrExit(err);
-	ChipLogProgress(DeviceLayer, "Start OpenThread task done!!");
+    ChipLogProgress(DeviceLayer, "Start OpenThread task done!!");
 #endif // CHIP_ENABLE_OPENTHREAD
 
 exit:
diff --git a/examples/ota-requestor-app/realtek_bee/main/DeviceCallbacks.cpp b/examples/ota-requestor-app/realtek_bee/main/DeviceCallbacks.cpp
index b4f39d21ac..d4e1507f29 100644
--- a/examples/ota-requestor-app/realtek_bee/main/DeviceCallbacks.cpp
+++ b/examples/ota-requestor-app/realtek_bee/main/DeviceCallbacks.cpp
@@ -108,7 +108,7 @@ void DeviceCallbacks::UpdateStatusLED()
 
 void DeviceCallbacks::DeviceEventCallback(const ChipDeviceEvent * event, intptr_t arg)
 {
-    //ChipLogProgress(Zcl, "DeviceEventCallback event_type 0x%x", event->Type);
+    // ChipLogProgress(Zcl, "DeviceEventCallback event_type 0x%x", event->Type);
 
     switch (event->Type)
     {
@@ -173,4 +173,3 @@ void DeviceCallbacks::OnInternetConnectivityChange(const ChipDeviceEvent * event
         ChipLogProgress(DeviceLayer, "Lost IPv6 connectivity...");
     }
 }
-
diff --git a/examples/ota-requestor-app/realtek_bee/main/chipinterface.cpp b/examples/ota-requestor-app/realtek_bee/main/chipinterface.cpp
index b6473e3aa3..fe03645a11 100644
--- a/examples/ota-requestor-app/realtek_bee/main/chipinterface.cpp
+++ b/examples/ota-requestor-app/realtek_bee/main/chipinterface.cpp
@@ -15,9 +15,9 @@
  *    limitations under the License.
  */
 
-#include <stdlib.h>
-#include "CHIPDeviceManager.h"
 #include "AppTask.h"
+#include "CHIPDeviceManager.h"
+#include <stdlib.h>
 
 using namespace ::chip;
 using namespace ::chip::DeviceManager;
diff --git a/examples/ota-requestor-app/realtek_bee/main/include/AppEvent.h b/examples/ota-requestor-app/realtek_bee/main/include/AppEvent.h
index 36cdcd7f7e..b142e9a98c 100644
--- a/examples/ota-requestor-app/realtek_bee/main/include/AppEvent.h
+++ b/examples/ota-requestor-app/realtek_bee/main/include/AppEvent.h
@@ -44,7 +44,7 @@ struct AppEvent
         } ButtonEvent;
         struct
         {
-            void *Context;
+            void * Context;
         } TimerEvent;
     };
 
diff --git a/examples/ota-requestor-app/realtek_bee/main/include/AppTask.h b/examples/ota-requestor-app/realtek_bee/main/include/AppTask.h
index c7b5df1fa5..79c8990d6b 100644
--- a/examples/ota-requestor-app/realtek_bee/main/include/AppTask.h
+++ b/examples/ota-requestor-app/realtek_bee/main/include/AppTask.h
@@ -39,32 +39,32 @@ public:
     CHIP_ERROR StartAppTask();
     void InitGpio();
 
-    static void AppTaskMain(void *pvParameter);
+    static void AppTaskMain(void * pvParameter);
 
-    void PostEvent(const AppEvent *event);
+    void PostEvent(const AppEvent * event);
 
     static void ButtonEventHandler(uint8_t btnIdx, uint8_t btnPressed);
 
 private:
-    friend AppTask &GetAppTask(void);
+    friend AppTask & GetAppTask(void);
 
     static void InitServer(intptr_t arg);
 
     void StartTimer(uint32_t aTimeoutMs);
     void CancelTimer(void);
 
-    void DispatchEvent(AppEvent *event);
+    void DispatchEvent(AppEvent * event);
 
-    static void FunctionTimerEventHandler(AppEvent *aEvent);
-    static void FunctionHandler(AppEvent *aEvent);
+    static void FunctionTimerEventHandler(AppEvent * aEvent);
+    static void FunctionHandler(AppEvent * aEvent);
 
-    static void TimerEventHandler(chip::System::Layer *aLayer, void *aAppState);
+    static void TimerEventHandler(chip::System::Layer * aLayer, void * aAppState);
 
     enum Function_t
     {
-        kFunction_NoneSelected   = 0,
-        kFunction_Reset          = 1,
-        kFunction_FactoryReset   = 2,
+        kFunction_NoneSelected = 0,
+        kFunction_Reset        = 1,
+        kFunction_FactoryReset = 2,
         kFunction_Invalid
     } Function;
 
@@ -74,7 +74,7 @@ private:
     static AppTask sAppTask;
 };
 
-inline AppTask &GetAppTask(void)
+inline AppTask & GetAppTask(void)
 {
     return AppTask::sAppTask;
 }
diff --git a/examples/ota-requestor-app/realtek_bee/main/include/CHIPDeviceManager.h b/examples/ota-requestor-app/realtek_bee/main/include/CHIPDeviceManager.h
index 70f547e4cd..b636d95120 100644
--- a/examples/ota-requestor-app/realtek_bee/main/include/CHIPDeviceManager.h
+++ b/examples/ota-requestor-app/realtek_bee/main/include/CHIPDeviceManager.h
@@ -38,10 +38,8 @@
 
 #include <app/util/af-types.h>
 
-namespace chip
-{
-namespace DeviceManager
-{
+namespace chip {
+namespace DeviceManager {
 
 /**
  * @brief
@@ -60,7 +58,7 @@ public:
      * @param event   ChipDeviceEvent that occurred
      * @param arg     arguments specific to the event, if any
      */
-    virtual void DeviceEventCallback(const chip::DeviceLayer::ChipDeviceEvent *event, intptr_t arg) {}
+    virtual void DeviceEventCallback(const chip::DeviceLayer::ChipDeviceEvent * event, intptr_t arg) {}
 
     /**
      * @brief
@@ -74,9 +72,8 @@ public:
      * @param size               size of the attribute
      * @param value              pointer to the new value
      */
-    virtual void PostAttributeChangeCallback(chip::EndpointId endpoint, chip::ClusterId clusterId,
-                                             chip::AttributeId attributeId,
-                                             uint8_t type, uint16_t size, uint8_t *value)
+    virtual void PostAttributeChangeCallback(chip::EndpointId endpoint, chip::ClusterId clusterId, chip::AttributeId attributeId,
+                                             uint8_t type, uint16_t size, uint8_t * value)
     {}
     virtual ~CHIPDeviceManagerCallbacks() {}
 };
@@ -88,11 +85,11 @@ public:
 class DLL_EXPORT CHIPDeviceManager
 {
 public:
-    CHIPDeviceManager(const CHIPDeviceManager &)  = delete;
-    CHIPDeviceManager(const CHIPDeviceManager &&) = delete;
-    CHIPDeviceManager &operator=(const CHIPDeviceManager &) = delete;
+    CHIPDeviceManager(const CHIPDeviceManager &)             = delete;
+    CHIPDeviceManager(const CHIPDeviceManager &&)            = delete;
+    CHIPDeviceManager & operator=(const CHIPDeviceManager &) = delete;
 
-    static CHIPDeviceManager &GetInstance()
+    static CHIPDeviceManager & GetInstance()
     {
         static CHIPDeviceManager instance;
         return instance;
@@ -104,7 +101,7 @@ public:
      *
      * @param cb Application's instance of the CHIPDeviceManagerCallbacks for consuming events
      */
-    CHIP_ERROR Init(CHIPDeviceManagerCallbacks *cb);
+    CHIP_ERROR Init(CHIPDeviceManagerCallbacks * cb);
 
     void Shutdown();
 
@@ -113,15 +110,15 @@ public:
      *   Fetch a pointer to the registered CHIPDeviceManagerCallbacks object.
      *
      */
-    CHIPDeviceManagerCallbacks *GetCHIPDeviceManagerCallbacks() { return mCB; }
+    CHIPDeviceManagerCallbacks * GetCHIPDeviceManagerCallbacks() { return mCB; }
 
     /**
      * Use internally for registration of the ChipDeviceEvents
      */
-    static void CommonDeviceEventHandler(const chip::DeviceLayer::ChipDeviceEvent *event, intptr_t arg);
+    static void CommonDeviceEventHandler(const chip::DeviceLayer::ChipDeviceEvent * event, intptr_t arg);
 
 private:
-    CHIPDeviceManagerCallbacks *mCB = nullptr;
+    CHIPDeviceManagerCallbacks * mCB = nullptr;
     CHIPDeviceManager() {}
 };
 
diff --git a/examples/ota-requestor-app/realtek_bee/main/include/CHIPProjectConfig.h b/examples/ota-requestor-app/realtek_bee/main/include/CHIPProjectConfig.h
index e0eab0a2f1..3b10a557e6 100644
--- a/examples/ota-requestor-app/realtek_bee/main/include/CHIPProjectConfig.h
+++ b/examples/ota-requestor-app/realtek_bee/main/include/CHIPProjectConfig.h
@@ -144,5 +144,3 @@
 #ifndef CHIP_DEVICE_CONFIG_DEVICE_SOFTWARE_VERSION_STRING
 #define CHIP_DEVICE_CONFIG_DEVICE_SOFTWARE_VERSION_STRING "1.0"
 #endif
-
-
diff --git a/examples/ota-requestor-app/realtek_bee/main/include/DeviceCallbacks.h b/examples/ota-requestor-app/realtek_bee/main/include/DeviceCallbacks.h
index 0f254d5532..a26e605b29 100644
--- a/examples/ota-requestor-app/realtek_bee/main/include/DeviceCallbacks.h
+++ b/examples/ota-requestor-app/realtek_bee/main/include/DeviceCallbacks.h
@@ -33,11 +33,10 @@
 class DeviceCallbacks : public chip::DeviceManager::CHIPDeviceManagerCallbacks
 {
 public:
-    void DeviceEventCallback(const chip::DeviceLayer::ChipDeviceEvent *event, intptr_t arg) override;
+    void DeviceEventCallback(const chip::DeviceLayer::ChipDeviceEvent * event, intptr_t arg) override;
     static void UpdateStatusLED();
 
 private:
-    void OnInternetConnectivityChange(const chip::DeviceLayer::ChipDeviceEvent *event);
-    void OnIdentifyPostAttributeChangeCallback(chip::EndpointId endpointId,
-                                               chip::AttributeId attributeId, uint8_t *value);
+    void OnInternetConnectivityChange(const chip::DeviceLayer::ChipDeviceEvent * event);
+    void OnIdentifyPostAttributeChangeCallback(chip::EndpointId endpointId, chip::AttributeId attributeId, uint8_t * value);
 };
diff --git a/examples/pigweed-app/realtek_bee/README.md b/examples/pigweed-app/realtek_bee/README.md
index 4b6d936e2a..7de1f40803 100644
--- a/examples/pigweed-app/realtek_bee/README.md
+++ b/examples/pigweed-app/realtek_bee/README.md
@@ -51,8 +51,8 @@ following features are available:
     The bootloader image files are stored in
     `out/realtek-bee-pigweed/asdk/bootloader` folder.
 
--   After building the application, **Realtek Image Tool** is used to flash it to
-    Realtek board.
+-   After building the application, **Realtek Image Tool** is used to flash it
+    to Realtek board.
 
 1. Connect your device via USB and open Realtek Image Tool.
 2. Select correct serial port and set baudrate as **115200**.
@@ -72,8 +72,8 @@ Connect a USB-TTL Adapter as shown below
 Build the
 [chip-rpc console](https://github.com/project-chip/connectedhomeip/tree/master/examples/common/pigweed/rpc_console)
 
-Reset Realtek board, then launch the chip-rpc console, where the Echo RPC commands
-can be invoked
+Reset Realtek board, then launch the chip-rpc console, where the Echo RPC
+commands can be invoked
 
         python -m pw_hdlc.rpc_console --device /dev/tty<USB-TTL port> -b 115200
 
diff --git a/examples/platform/realtek_bee/Rpc.cpp b/examples/platform/realtek_bee/Rpc.cpp
index 6e0be07a9a..f9042473c2 100644
--- a/examples/platform/realtek_bee/Rpc.cpp
+++ b/examples/platform/realtek_bee/Rpc.cpp
@@ -20,13 +20,13 @@
 #include "FreeRTOS.h"
 #include "PigweedLoggerMutex.h"
 #include "RpcService.h"
-#include "pw_sys_io_bee/init.h"
-#include "wdt.h"
-#include "task.h"
 #include "pw_log/log.h"
 #include "pw_rpc/server.h"
 #include "pw_sys_io/sys_io.h"
+#include "pw_sys_io_bee/init.h"
 #include "support/CodeUtils.h"
+#include "task.h"
+#include "wdt.h"
 #include <string.h>
 
 #if defined(PW_RPC_ATTRIBUTE_SERVICE) && PW_RPC_ATTRIBUTE_SERVICE
@@ -34,7 +34,7 @@
 #endif // defined(PW_RPC_ATTRIBUTE_SERVICE) && PW_RPC_ATTRIBUTE_SERVICE
 
 #if defined(PW_RPC_BUTTON_SERVICE) && PW_RPC_BUTTON_SERVICE
-//#include "ScreenManager.h"
+// #include "ScreenManager.h"
 #include "pigweed/rpc_services/Button.h"
 #endif // defined(PW_RPC_BUTTON_SERVICE) && PW_RPC_BUTTON_SERVICE
 
@@ -94,10 +94,10 @@ private:
     TimerHandle_t mRebootTimer;
 
     static void RebootHandler(TimerHandle_t)
-	{
-		ChipLogProgress(NotSpecified, "Reboot by Device funcion");
-		WDT_SystemReset(RESET_ALL, SW_RESET_APP_START);
-	}
+    {
+        ChipLogProgress(NotSpecified, "Reboot by Device funcion");
+        WDT_SystemReset(RESET_ALL, SW_RESET_APP_START);
+    }
 };
 #endif // defined(PW_RPC_DEVICE_SERVICE) && PW_RPC_DEVICE_SERVICE
 
@@ -106,7 +106,7 @@ namespace {
 #define RPC_TASK_STACK_SIZE (8 * 1024)
 #define RPC_TASK_PRIORITY 1
 static TaskHandle_t sRpcTaskHandle;
-//StaticTask_t sRpcTaskBuffer;
+// StaticTask_t sRpcTaskBuffer;
 StackType_t sRpcTaskStack[RPC_TASK_STACK_SIZE];
 
 #if defined(PW_RPC_ATTRIBUTE_SERVICE) && PW_RPC_ATTRIBUTE_SERVICE
@@ -173,8 +173,7 @@ void Init()
     PigweedLogger::init();
 
     // Start App task.
-    xTaskCreate(RunRpcService, "RPC_TASK", RPC_TASK_STACK_SIZE/sizeof(StackType_t), nullptr, RPC_TASK_PRIORITY,
-                &sRpcTaskHandle);
+    xTaskCreate(RunRpcService, "RPC_TASK", RPC_TASK_STACK_SIZE / sizeof(StackType_t), nullptr, RPC_TASK_PRIORITY, &sRpcTaskHandle);
 }
 
 } // namespace rpc
diff --git a/examples/platform/realtek_bee/pw_sys_io/sys_io_bee.cc b/examples/platform/realtek_bee/pw_sys_io/sys_io_bee.cc
index 1132a37007..406dc499c6 100644
--- a/examples/platform/realtek_bee/pw_sys_io/sys_io_bee.cc
+++ b/examples/platform/realtek_bee/pw_sys_io/sys_io_bee.cc
@@ -26,8 +26,8 @@
 #ifdef __cplusplus
 extern "C" {
 #endif
-int bee_putchar(const uint8_t *aBuf);
-int bee_getchar(uint8_t *read_byte);
+int bee_putchar(const uint8_t * aBuf);
+int bee_getchar(uint8_t * read_byte);
 #ifdef __cplusplus
 }
 #endif
diff --git a/examples/platform/realtek_bee/util/LEDWidget.cpp b/examples/platform/realtek_bee/util/LEDWidget.cpp
old mode 100755
new mode 100644
index 28331780f2..becfb70487
--- a/examples/platform/realtek_bee/util/LEDWidget.cpp
+++ b/examples/platform/realtek_bee/util/LEDWidget.cpp
@@ -23,9 +23,9 @@
  * It also updates the display widget if it's enabled
  */
 
-#include <stdlib.h>
-#include "matter_led.h"
 #include "LEDWidget.h"
+#include "matter_led.h"
+#include <stdlib.h>
 
 void LEDWidget::InitGpio()
 {
@@ -61,7 +61,7 @@ void LEDWidget::Invert(void)
 
 void LEDWidget::Set(bool state)
 {
-    if(mLEDHandle)
+    if (mLEDHandle)
     {
         mState = state;
         matter_led_state_set(mLEDHandle, state);
@@ -70,7 +70,7 @@ void LEDWidget::Set(bool state)
 
 void LEDWidget::Blink(uint32_t changeRateMS)
 {
-    if(mLEDHandle)
+    if (mLEDHandle)
     {
         matter_led_blink_start(mLEDHandle, changeRateMS, changeRateMS, 0xFFFF);
     }
@@ -78,7 +78,7 @@ void LEDWidget::Blink(uint32_t changeRateMS)
 
 void LEDWidget::Blink(uint32_t onTimeMS, uint32_t offTimeMS)
 {
-    if(mLEDHandle)
+    if (mLEDHandle)
     {
         matter_led_blink_start(mLEDHandle, onTimeMS, offTimeMS, 0xFFFF);
     }
@@ -86,7 +86,7 @@ void LEDWidget::Blink(uint32_t onTimeMS, uint32_t offTimeMS)
 
 void LEDWidget::BlinkStop()
 {
-    if(mLEDHandle)
+    if (mLEDHandle)
     {
         matter_led_blink_stop(mLEDHandle);
     }
@@ -94,11 +94,11 @@ void LEDWidget::BlinkStop()
 
 void LEDWidget::SetLevel(uint8_t aLevel)
 {
-    if(mLEDHandle)
+    if (mLEDHandle)
     {
         uint16_t brightness;
 
-        mLevel = aLevel;
+        mLevel     = aLevel;
         brightness = (aLevel * 65535.0) / mMaxLevel;
         matter_led_brightness_set(mLEDHandle, brightness);
     }
diff --git a/examples/platform/realtek_bee/util/LEDWidget.h b/examples/platform/realtek_bee/util/LEDWidget.h
old mode 100755
new mode 100644
index 3193860c96..2296c61126
--- a/examples/platform/realtek_bee/util/LEDWidget.h
+++ b/examples/platform/realtek_bee/util/LEDWidget.h
@@ -19,14 +19,13 @@
 
 #pragma once
 
-#include <cstdio>
-#include <app/util/basic-types.h>
 #include "matter_led.h"
+#include <app/util/basic-types.h>
+#include <cstdio>
 
 class LEDWidget
 {
 public:
-
     LEDWidget() : mLEDHandle(NULL) {}
 
     static void InitGpio();
diff --git a/examples/window-app/realtek_bee/README.md b/examples/window-app/realtek_bee/README.md
index dc6c192cfc..30169909fa 100755
--- a/examples/window-app/realtek_bee/README.md
+++ b/examples/window-app/realtek_bee/README.md
@@ -1,6 +1,7 @@
 # CHIP Realtek Window Covering Example
 
-This example demonstrates the Matter Window Covering application on Realtek platform.
+This example demonstrates the Matter Window Covering application on Realtek
+platform.
 
 ---
 
diff --git a/examples/window-app/realtek_bee/main/AppTask.cpp b/examples/window-app/realtek_bee/main/AppTask.cpp
index 2fbc0ba6c3..72e6b14115 100644
--- a/examples/window-app/realtek_bee/main/AppTask.cpp
+++ b/examples/window-app/realtek_bee/main/AppTask.cpp
@@ -21,29 +21,28 @@
 #include "AppEvent.h"
 #include "AppTask.h"
 
-#include "Server.h"
 #include "LEDWidget.h"
+#include "Server.h"
 #include "WindowCovering.h"
 #include <DeviceInfoProviderImpl.h>
-#include <credentials/DeviceAttestationCredsProvider.h>
-#include <credentials/examples/DeviceAttestationCredsExample.h>
-#include <platform/CHIPDeviceLayer.h>
-#include <support/CHIPMem.h>
 #include <app/TestEventTriggerDelegate.h>
 #include <app/clusters/identify-server/identify-server.h>
-#include <app/clusters/ota-requestor/OTATestEventTriggerHandler.h>
 #include <app/clusters/network-commissioning/network-commissioning.h>
+#include <app/clusters/ota-requestor/OTATestEventTriggerHandler.h>
 #include <app/server/OnboardingCodesUtil.h>
+#include <credentials/DeviceAttestationCredsProvider.h>
+#include <credentials/examples/DeviceAttestationCredsExample.h>
+#include <inet/EndPointStateOpenThread.h>
 #include <lib/core/ErrorStr.h>
 #include <platform/CHIPDeviceLayer.h>
 #include <setup_payload/QRCodeSetupPayloadGenerator.h>
-#include <inet/EndPointStateOpenThread.h>
+#include <support/CHIPMem.h>
 
 #include <CHIPDeviceManager.h>
 #include <DeviceCallbacks.h>
 
-#include <os_mem.h>
 #include "matter_gpio.h"
+#include <os_mem.h>
 
 #if CONFIG_ENABLE_CHIP_SHELL
 #include <lib/shell/Engine.h>
@@ -76,7 +75,7 @@ LEDWidget identifyLED;
 void OnIdentifyStart(Identify *)
 {
     ChipLogProgress(Zcl, "OnIdentifyStart");
-    identifyLED.Blink(500,500);
+    identifyLED.Blink(500, 500);
 }
 
 void OnIdentifyStop(Identify *)
@@ -116,7 +115,6 @@ static Identify gIdentify1 = {
 uint8_t sTestEventTriggerEnableKey[TestEventTriggerDelegate::kEnableKeyLength] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                                                                                    0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
 
-
 void LockOpenThreadTask(void)
 {
     chip::DeviceLayer::ThreadStackMgr().LockThreadStack();
@@ -201,7 +199,7 @@ void AppTask::PostEvent(const AppEvent * aEvent)
         if (xPortIsInsideInterrupt())
         {
             BaseType_t higherPrioTaskWoken = pdFALSE;
-            status              = xQueueSendFromISR(sAppEventQueue, aEvent, &higherPrioTaskWoken);
+            status                         = xQueueSendFromISR(sAppEventQueue, aEvent, &higherPrioTaskWoken);
             portYIELD_FROM_ISR(higherPrioTaskWoken);
         }
         else
@@ -239,24 +237,22 @@ void AppTask::ButtonEventHandler(uint8_t btnIdx, uint8_t btnPressed)
     AppEvent button_event              = {};
     button_event.ButtonEvent.ButtonIdx = btnIdx;
     button_event.Type                  = AppEvent::kEventType_Button;
-    button_event.ButtonEvent.Action    = btnPressed ? true:false;
+    button_event.ButtonEvent.Action    = btnPressed ? true : false;
 
     switch (btnIdx)
     {
-    case APP_FUNCTION_BUTTON:
-        {
-            // Hand off to Functionality handler - depends on duration of press
-            button_event.Handler = FunctionHandler;
-        }
-        break;
+    case APP_FUNCTION_BUTTON: {
+        // Hand off to Functionality handler - depends on duration of press
+        button_event.Handler = FunctionHandler;
+    }
+    break;
 
     case APP_TOGGLE_BUTTON:
     case APP_CLOSE_BUTTON:
-    case APP_OPEN_BUTTON:
-        {
-            button_event.Handler = WindowActionEventHandler;
-        }
-        break;
+    case APP_OPEN_BUTTON: {
+        button_event.Handler = WindowActionEventHandler;
+    }
+    break;
 
     default:
         return;
@@ -317,10 +313,10 @@ void AppTask::CloseHandler(intptr_t)
 
 void AppTask::WindowActionEventHandler(AppEvent * aEvent)
 {
-    switch(aEvent->ButtonEvent.ButtonIdx)
+    switch (aEvent->ButtonEvent.ButtonIdx)
     {
     case APP_TOGGLE_BUTTON:
-        if(aEvent->ButtonEvent.Action == false)
+        if (aEvent->ButtonEvent.Action == false)
         {
             if (WindowCovering::Instance().GetMoveType() == WindowCovering::MoveType::LIFT)
             {
@@ -336,14 +332,14 @@ void AppTask::WindowActionEventHandler(AppEvent * aEvent)
         break;
 
     case APP_CLOSE_BUTTON:
-        if(aEvent->ButtonEvent.Action == false)
+        if (aEvent->ButtonEvent.Action == false)
         {
             PlatformMgr().ScheduleWork(CloseHandler);
         }
         break;
 
     case APP_OPEN_BUTTON:
-        if(aEvent->ButtonEvent.Action == false)
+        if (aEvent->ButtonEvent.Action == false)
         {
             PlatformMgr().ScheduleWork(OpenHandler);
         }
@@ -381,7 +377,7 @@ void AppTask::FunctionTimerEventHandler(AppEvent * aEvent)
         sAppTask.mFunction = kFunction_FactoryReset;
         // Turn off all LEDs before starting blink to make sure blink is coordinated.
         identifyLED.Set(false);
-        identifyLED.Blink(500,500);
+        identifyLED.Blink(500, 500);
     }
     else if (sAppTask.mFunctionTimerActive && sAppTask.mFunction == kFunction_FactoryReset)
     {
@@ -434,8 +430,8 @@ CHIP_ERROR AppTask::Init()
     ChipLogProgress(DeviceLayer, "Window App Demo!");
     CHIP_ERROR err = CHIP_NO_ERROR;
 
-    CHIPDeviceManager &deviceMgr = CHIPDeviceManager::GetInstance();
-    err = deviceMgr.Init(&EchoCallbacks);
+    CHIPDeviceManager & deviceMgr = CHIPDeviceManager::GetInstance();
+    err                           = deviceMgr.Init(&EchoCallbacks);
     if (err != CHIP_NO_ERROR)
     {
         ChipLogError(DeviceLayer, "DeviceManagerInit() - ERROR!");
diff --git a/examples/window-app/realtek_bee/main/CHIPDeviceManager.cpp b/examples/window-app/realtek_bee/main/CHIPDeviceManager.cpp
old mode 100755
new mode 100644
index 611086b069..4054762738
--- a/examples/window-app/realtek_bee/main/CHIPDeviceManager.cpp
+++ b/examples/window-app/realtek_bee/main/CHIPDeviceManager.cpp
@@ -26,10 +26,10 @@
 
 #include "CHIPDeviceManager.h"
 #include <app/util/basic-types.h>
-#include <support/CHIPMem.h>
-#include <support/CodeUtils.h>
 #include <core/ErrorStr.h>
 #include <platform/Realtek_bee/FactoryDataProvider.h>
+#include <support/CHIPMem.h>
+#include <support/CodeUtils.h>
 
 #include <app-common/zap-generated/attributes/Accessors.h>
 #include <app-common/zap-generated/ids/Attributes.h>
@@ -63,12 +63,12 @@ CHIP_ERROR CHIPDeviceManager::Init(CHIPDeviceManagerCallbacks * cb)
     mCB = cb;
 
     ChipLogProgress(DeviceLayer, "Start to init MemoryInit");
-	err = Platform::MemoryInit();
+    err = Platform::MemoryInit();
     SuccessOrExit(err);
 
-	ChipLogProgress(DeviceLayer, "Start to init InitChipStack");
-	err = PlatformMgr().InitChipStack();
-	SuccessOrExit(err);
+    ChipLogProgress(DeviceLayer, "Start to init InitChipStack");
+    err = PlatformMgr().InitChipStack();
+    SuccessOrExit(err);
 
     ChipLogProgress(DeviceLayer, "Factorydata init");
     err = mFactoryDataProvider.Init();
@@ -88,12 +88,12 @@ CHIP_ERROR CHIPDeviceManager::Init(CHIPDeviceManagerCallbacks * cb)
     SuccessOrExit(err);
 
 #if CHIP_ENABLE_OPENTHREAD
-	ChipLogProgress(DeviceLayer, "Initializing OpenThread stack");
-	err = ThreadStackMgr().InitThreadStack();
-	SuccessOrExit(err);
+    ChipLogProgress(DeviceLayer, "Initializing OpenThread stack");
+    err = ThreadStackMgr().InitThreadStack();
+    SuccessOrExit(err);
 
     ChipLogProgress(DeviceLayer, "Set Thread Device Type");
-    
+
 #if CHIP_DEVICE_CONFIG_THREAD_FTD
     err = ConnectivityMgr().SetThreadDeviceType(ConnectivityManager::kThreadDeviceType_Router);
 #else // CHIP_DEVICE_CONFIG_THREAD_FTD
@@ -109,10 +109,10 @@ CHIP_ERROR CHIPDeviceManager::Init(CHIPDeviceManagerCallbacks * cb)
 #endif // CHIP_DEVICE_CONFIG_THREAD_FTD
     SuccessOrExit(err);
 
-	ChipLogProgress(DeviceLayer, "Start OpenThread task");
+    ChipLogProgress(DeviceLayer, "Start OpenThread task");
     err = ThreadStackMgrImpl().StartThreadTask();
     SuccessOrExit(err);
-	ChipLogProgress(DeviceLayer, "Start OpenThread task done!!");
+    ChipLogProgress(DeviceLayer, "Start OpenThread task done!!");
 #endif // CHIP_ENABLE_OPENTHREAD
 
 exit:
diff --git a/examples/window-app/realtek_bee/main/DeviceCallbacks.cpp b/examples/window-app/realtek_bee/main/DeviceCallbacks.cpp
old mode 100755
new mode 100644
index 28f77721f2..c689bbcb0f
--- a/examples/window-app/realtek_bee/main/DeviceCallbacks.cpp
+++ b/examples/window-app/realtek_bee/main/DeviceCallbacks.cpp
@@ -23,9 +23,9 @@
  *
  **/
 #include "DeviceCallbacks.h"
-#include "WindowCovering.h"
 #include "CHIPDeviceManager.h"
 #include "LEDWidget.h"
+#include "WindowCovering.h"
 
 #include <app-common/zap-generated/attributes/Accessors.h>
 #include <app-common/zap-generated/ids/Attributes.h>
@@ -207,4 +207,4 @@ void MatterWindowCoveringClusterServerAttributeChangedCallback(const app::Concre
             break;
         };
     }
-}
\ No newline at end of file
+}
diff --git a/examples/window-app/realtek_bee/main/WindowCovering.cpp b/examples/window-app/realtek_bee/main/WindowCovering.cpp
index 53ed9a7aaf..c547e471ec 100644
--- a/examples/window-app/realtek_bee/main/WindowCovering.cpp
+++ b/examples/window-app/realtek_bee/main/WindowCovering.cpp
@@ -310,13 +310,13 @@ uint8_t WindowCovering::PositionToBrightness(uint16_t aPosition, MoveType aMoveT
     {
         pwmLimits.open   = mLiftIndicator.GetMinLevel();
         pwmLimits.closed = mLiftIndicator.GetMaxLevel();
-        brightness = mLiftIndicator.GetMaxLevel() - Percent100thsToValue(pwmLimits, aPosition);
+        brightness       = mLiftIndicator.GetMaxLevel() - Percent100thsToValue(pwmLimits, aPosition);
     }
     else if (aMoveType == MoveType::TILT)
     {
         pwmLimits.open   = mTiltIndicator.GetMinLevel();
         pwmLimits.closed = mTiltIndicator.GetMaxLevel();
-        brightness = mTiltIndicator.GetMaxLevel() - Percent100thsToValue(pwmLimits, aPosition);
+        brightness       = mTiltIndicator.GetMaxLevel() - Percent100thsToValue(pwmLimits, aPosition);
     }
 
     return brightness;
diff --git a/examples/window-app/realtek_bee/main/chipinterface.cpp b/examples/window-app/realtek_bee/main/chipinterface.cpp
old mode 100755
new mode 100644
index eb99751ba2..47dbbd2441
--- a/examples/window-app/realtek_bee/main/chipinterface.cpp
+++ b/examples/window-app/realtek_bee/main/chipinterface.cpp
@@ -15,9 +15,9 @@
  *    limitations under the License.
  */
 
-#include <stdlib.h>
-#include "CHIPDeviceManager.h"
 #include "AppTask.h"
+#include "CHIPDeviceManager.h"
+#include <stdlib.h>
 
 using namespace ::chip;
 using namespace ::chip::DeviceManager;
diff --git a/examples/window-app/realtek_bee/main/include/AppConfig.h b/examples/window-app/realtek_bee/main/include/AppConfig.h
index 3029fb2d8d..f3220a1fb6 100644
--- a/examples/window-app/realtek_bee/main/include/AppConfig.h
+++ b/examples/window-app/realtek_bee/main/include/AppConfig.h
@@ -24,10 +24,10 @@
 #define SW4_BUTTON 3
 
 #define APP_TASK_NAME "APP"
-#define APP_TOGGLE_BUTTON   SW1_BUTTON
+#define APP_TOGGLE_BUTTON SW1_BUTTON
 #define APP_FUNCTION_BUTTON SW2_BUTTON
-#define APP_CLOSE_BUTTON    SW3_BUTTON
-#define APP_OPEN_BUTTON     SW4_BUTTON
+#define APP_CLOSE_BUTTON SW3_BUTTON
+#define APP_OPEN_BUTTON SW4_BUTTON
 
 #define LCD_SIZE 128
 #define LCD_MARGIN_SIZE 1
@@ -57,4 +57,4 @@
 
 #ifndef COVER_LIFT_TILT_TIMEOUT
 #define COVER_LIFT_TILT_TIMEOUT 500
-#endif
\ No newline at end of file
+#endif
diff --git a/examples/window-app/realtek_bee/main/include/AppEvent.h b/examples/window-app/realtek_bee/main/include/AppEvent.h
index 36cdcd7f7e..b142e9a98c 100644
--- a/examples/window-app/realtek_bee/main/include/AppEvent.h
+++ b/examples/window-app/realtek_bee/main/include/AppEvent.h
@@ -44,7 +44,7 @@ struct AppEvent
         } ButtonEvent;
         struct
         {
-            void *Context;
+            void * Context;
         } TimerEvent;
     };
 
diff --git a/examples/window-app/realtek_bee/main/include/AppTask.h b/examples/window-app/realtek_bee/main/include/AppTask.h
index 46a1b0ff5f..a1db9f8ad3 100644
--- a/examples/window-app/realtek_bee/main/include/AppTask.h
+++ b/examples/window-app/realtek_bee/main/include/AppTask.h
@@ -39,35 +39,35 @@ public:
     CHIP_ERROR StartAppTask();
     void InitGpio();
 
-    static void AppTaskMain(void *pvParameter);
+    static void AppTaskMain(void * pvParameter);
 
-    void PostEvent(const AppEvent *event);
+    void PostEvent(const AppEvent * event);
 
     static void ButtonEventHandler(uint8_t btnIdx, uint8_t btnPressed);
 
 private:
-    friend AppTask &GetAppTask(void);
+    friend AppTask & GetAppTask(void);
 
     static void InitServer(intptr_t arg);
 
     void StartTimer(uint32_t aTimeoutMs);
     void CancelTimer(void);
 
-    void DispatchEvent(AppEvent *event);
+    void DispatchEvent(AppEvent * event);
 
-    static void FunctionTimerEventHandler(AppEvent *aEvent);
-    static void FunctionHandler(AppEvent *aEvent);
+    static void FunctionTimerEventHandler(AppEvent * aEvent);
+    static void FunctionHandler(AppEvent * aEvent);
 
     static void OpenHandler(intptr_t);
     static void CloseHandler(intptr_t);
-    static void WindowActionEventHandler(AppEvent *aEvent);
-    static void TimerEventHandler(chip::System::Layer *aLayer, void *aAppState);
+    static void WindowActionEventHandler(AppEvent * aEvent);
+    static void TimerEventHandler(chip::System::Layer * aLayer, void * aAppState);
 
     enum Function_t
     {
-        kFunction_NoneSelected   = 0,
-        kFunction_Reset          = 1,
-        kFunction_FactoryReset   = 2,
+        kFunction_NoneSelected = 0,
+        kFunction_Reset        = 1,
+        kFunction_FactoryReset = 2,
         kFunction_Invalid
     } Function;
 
@@ -77,7 +77,7 @@ private:
     static AppTask sAppTask;
 };
 
-inline AppTask &GetAppTask(void)
+inline AppTask & GetAppTask(void)
 {
     return AppTask::sAppTask;
 }
diff --git a/examples/window-app/realtek_bee/main/include/CHIPDeviceManager.h b/examples/window-app/realtek_bee/main/include/CHIPDeviceManager.h
old mode 100755
new mode 100644
index fd3c452fdf..9b37f4ac20
--- a/examples/window-app/realtek_bee/main/include/CHIPDeviceManager.h
+++ b/examples/window-app/realtek_bee/main/include/CHIPDeviceManager.h
@@ -38,10 +38,8 @@
 
 #include <app/util/af-types.h>
 
-namespace chip
-{
-namespace DeviceManager
-{
+namespace chip {
+namespace DeviceManager {
 
 /**
  * @brief
@@ -60,7 +58,7 @@ public:
      * @param event   ChipDeviceEvent that occurred
      * @param arg     arguments specific to the event, if any
      */
-    virtual void DeviceEventCallback(const chip::DeviceLayer::ChipDeviceEvent *event, intptr_t arg) {}
+    virtual void DeviceEventCallback(const chip::DeviceLayer::ChipDeviceEvent * event, intptr_t arg) {}
 
     /**
      * @brief
@@ -74,9 +72,8 @@ public:
      * @param size               size of the attribute
      * @param value              pointer to the new value
      */
-    virtual void PostAttributeChangeCallback(chip::EndpointId endpoint, chip::ClusterId clusterId,
-                                             chip::AttributeId attributeId,
-                                             uint8_t type, uint16_t size, uint8_t *value)
+    virtual void PostAttributeChangeCallback(chip::EndpointId endpoint, chip::ClusterId clusterId, chip::AttributeId attributeId,
+                                             uint8_t type, uint16_t size, uint8_t * value)
     {}
     virtual ~CHIPDeviceManagerCallbacks() {}
 };
@@ -88,11 +85,11 @@ public:
 class DLL_EXPORT CHIPDeviceManager
 {
 public:
-    CHIPDeviceManager(const CHIPDeviceManager &)  = delete;
-    CHIPDeviceManager(const CHIPDeviceManager &&) = delete;
-    CHIPDeviceManager &operator=(const CHIPDeviceManager &) = delete;
+    CHIPDeviceManager(const CHIPDeviceManager &)             = delete;
+    CHIPDeviceManager(const CHIPDeviceManager &&)            = delete;
+    CHIPDeviceManager & operator=(const CHIPDeviceManager &) = delete;
 
-    static CHIPDeviceManager &GetInstance()
+    static CHIPDeviceManager & GetInstance()
     {
         static CHIPDeviceManager instance;
         return instance;
@@ -104,22 +101,22 @@ public:
      *
      * @param cb Application's instance of the CHIPDeviceManagerCallbacks for consuming events
      */
-    CHIP_ERROR Init(CHIPDeviceManagerCallbacks *cb);
+    CHIP_ERROR Init(CHIPDeviceManagerCallbacks * cb);
     void Shutdown();
     /**
      * @brief
      *   Fetch a pointer to the registered CHIPDeviceManagerCallbacks object.
      *
      */
-    CHIPDeviceManagerCallbacks *GetCHIPDeviceManagerCallbacks() { return mCB; }
+    CHIPDeviceManagerCallbacks * GetCHIPDeviceManagerCallbacks() { return mCB; }
 
     /**
      * Use internally for registration of the ChipDeviceEvents
      */
-    static void CommonDeviceEventHandler(const chip::DeviceLayer::ChipDeviceEvent *event, intptr_t arg);
+    static void CommonDeviceEventHandler(const chip::DeviceLayer::ChipDeviceEvent * event, intptr_t arg);
 
 private:
-    CHIPDeviceManagerCallbacks *mCB = nullptr;
+    CHIPDeviceManagerCallbacks * mCB = nullptr;
     CHIPDeviceManager() {}
 };
 
diff --git a/examples/window-app/realtek_bee/main/include/CHIPProjectConfig.h b/examples/window-app/realtek_bee/main/include/CHIPProjectConfig.h
index a941cadd41..8f45bd1cff 100644
--- a/examples/window-app/realtek_bee/main/include/CHIPProjectConfig.h
+++ b/examples/window-app/realtek_bee/main/include/CHIPProjectConfig.h
@@ -145,7 +145,6 @@
 #define CHIP_DEVICE_CONFIG_DEVICE_SOFTWARE_VERSION_STRING "1.0"
 #endif
 
-
 /**
  * CHIP_DEVICE_CONFIG_THREAD_SSED
  *
@@ -156,4 +155,4 @@
 #ifndef CHIP_DEVICE_CONFIG_THREAD_SSED
 #define CHIP_DEVICE_CONFIG_THREAD_SSED 1
 #endif
-#endif
\ No newline at end of file
+#endif
diff --git a/examples/window-app/realtek_bee/main/include/DeviceCallbacks.h b/examples/window-app/realtek_bee/main/include/DeviceCallbacks.h
old mode 100755
new mode 100644
index 3853ce5eca..cf0983da6a
--- a/examples/window-app/realtek_bee/main/include/DeviceCallbacks.h
+++ b/examples/window-app/realtek_bee/main/include/DeviceCallbacks.h
@@ -33,11 +33,10 @@
 class DeviceCallbacks : public chip::DeviceManager::CHIPDeviceManagerCallbacks
 {
 public:
-    virtual void DeviceEventCallback(const chip::DeviceLayer::ChipDeviceEvent *event, intptr_t arg);
+    virtual void DeviceEventCallback(const chip::DeviceLayer::ChipDeviceEvent * event, intptr_t arg);
     static void UpdateStatusLED();
 
 private:
-    void OnInternetConnectivityChange(const chip::DeviceLayer::ChipDeviceEvent *event);
-    void OnIdentifyPostAttributeChangeCallback(chip::EndpointId endpointId,
-                                               chip::AttributeId attributeId, uint8_t *value);
+    void OnInternetConnectivityChange(const chip::DeviceLayer::ChipDeviceEvent * event);
+    void OnIdentifyPostAttributeChangeCallback(chip::EndpointId endpointId, chip::AttributeId attributeId, uint8_t * value);
 };
diff --git a/examples/window-app/realtek_bee/main/include/WindowCovering.h b/examples/window-app/realtek_bee/main/include/WindowCovering.h
index 5b1a539bf2..772dc2f2ec 100644
--- a/examples/window-app/realtek_bee/main/include/WindowCovering.h
+++ b/examples/window-app/realtek_bee/main/include/WindowCovering.h
@@ -17,8 +17,8 @@
 
 #pragma once
 
-#include <cstdint>
 #include "LEDWidget.h"
+#include <cstdint>
 
 #include <app/clusters/window-covering-server/window-covering-server.h>
 
@@ -41,14 +41,14 @@ public:
     };
 
     WindowCovering();
-    static WindowCovering &Instance()
+    static WindowCovering & Instance()
     {
         static WindowCovering sInstance;
         return sInstance;
     }
 
-    LEDWidget &GetLiftIndicator() { return mLiftIndicator; }
-    LEDWidget &GetTiltIndicator() { return mTiltIndicator; }
+    LEDWidget & GetLiftIndicator() { return mLiftIndicator; }
+    LEDWidget & GetTiltIndicator() { return mTiltIndicator; }
 
     void StartMove(MoveType aMoveType);
     void SetSingleStepTarget(OperationalState aDirection);
@@ -70,7 +70,7 @@ private:
     static chip::Percent100ths CalculateNextPosition(MoveType aMoveType);
     static void DriveCurrentLiftPosition(intptr_t);
     static void DriveCurrentTiltPosition(intptr_t);
-    static void MoveTimerTimeoutCallback(chip::System::Layer *systemLayer, void *appState);
+    static void MoveTimerTimeoutCallback(chip::System::Layer * systemLayer, void * appState);
     static void DoPostAttributeChange(intptr_t aArg);
 
     MoveType mCurrentUIMoveType;
diff --git a/src/lib/shell/MainLoopBee.cpp b/src/lib/shell/MainLoopBee.cpp
index 1f04984741..296e9f8671 100644
--- a/src/lib/shell/MainLoopBee.cpp
+++ b/src/lib/shell/MainLoopBee.cpp
@@ -23,9 +23,9 @@
 #include <ctype.h>
 #include <string.h>
 
-#include <openthread/error.h>
-#include <openthread/cli.h>
 #include "chip_porting.h"
+#include <openthread/cli.h>
+#include <openthread/error.h>
 
 using chip::FormatCHIPError;
 using chip::Platform::MemoryAlloc;
@@ -35,15 +35,15 @@ using chip::Shell::streamer_get;
 
 typedef otError (*cmd)(void *, uint8_t, char **);
 
-otError matter_cmd_handler(void *aContext, uint8_t argc, char *argv[])
+otError matter_cmd_handler(void * aContext, uint8_t argc, char * argv[])
 {
     Engine::Root().ExecCommand(argc, argv);
     return OT_ERROR_NONE;
 }
 
 otCliCommand bee_cmd[] = {
-    {"kv",(cmd)matter_kvs_cmd_handle},
-    {"matter",matter_cmd_handler},
+    { "kv", (cmd) matter_kvs_cmd_handle },
+    { "matter", matter_cmd_handler },
 };
 
 namespace chip {
@@ -51,7 +51,7 @@ namespace Shell {
 
 void Engine::RunMainLoop()
 {
-    otCliSetUserCommands(bee_cmd, sizeof(bee_cmd)/sizeof(bee_cmd[0]), NULL);
+    otCliSetUserCommands(bee_cmd, sizeof(bee_cmd) / sizeof(bee_cmd[0]), NULL);
 }
 
 } // namespace Shell
diff --git a/src/lib/shell/streamer_bee.cpp b/src/lib/shell/streamer_bee.cpp
index 25f8901807..eb1489ff0e 100644
--- a/src/lib/shell/streamer_bee.cpp
+++ b/src/lib/shell/streamer_bee.cpp
@@ -23,9 +23,9 @@
 #include <lib/shell/Engine.h>
 #include <lib/shell/streamer.h>
 
+#include "chip_porting.h"
 #include <stdio.h>
 #include <string.h>
-#include "chip_porting.h"
 
 namespace chip {
 namespace Shell {
@@ -45,7 +45,7 @@ ssize_t streamer_bee_read(streamer_t * streamer, char * buffer, size_t length)
 
 ssize_t streamer_bee_write(streamer_t * streamer, const char * buffer, size_t length)
 {
-    return MatterPlatUartSend(buffer, (uint16_t)length);
+    return MatterPlatUartSend(buffer, (uint16_t) length);
 }
 
 static streamer_t streamer_bee = {
diff --git a/src/platform/Realtek_bee/BLEManagerImpl.cpp b/src/platform/Realtek_bee/BLEManagerImpl.cpp
index da4dc49125..96100cff71 100644
--- a/src/platform/Realtek_bee/BLEManagerImpl.cpp
+++ b/src/platform/Realtek_bee/BLEManagerImpl.cpp
@@ -122,7 +122,7 @@ CHIP_ERROR BLEManagerImpl::_Init()
     VerifyOrExit(!mFlags.Has(Flags::kAMEBABLEStackInitialized), err = CHIP_ERROR_INCORRECT_STATE);
 
     err = MapBLEError(matter_ble_init(APP_MAX_LINKS));
-    matter_ble_cback_register((P_MATTER_BLE_CBACK)(ble_callback_dispatcher));
+    matter_ble_cback_register((P_MATTER_BLE_CBACK) (ble_callback_dispatcher));
 
     SuccessOrExit(err);
 
@@ -179,8 +179,7 @@ void BLEManagerImpl::HandleTXCharCCCDWrite(int conn_id, int indicationsEnabled)
     // whether the client is enabling or disabling indications.
     {
         ChipDeviceEvent event;
-        event.Type = indicationsEnabled ? DeviceEventType::kCHIPoBLESubscribe
-                                        : DeviceEventType::kCHIPoBLEUnsubscribe;
+        event.Type = indicationsEnabled ? DeviceEventType::kCHIPoBLESubscribe : DeviceEventType::kCHIPoBLEUnsubscribe;
         event.CHIPoBLESubscribe.ConId = conn_id;
         PlatformMgr().PostEventOrDie(&event);
     }
@@ -480,13 +479,15 @@ void BLEManagerImpl::_OnPlatformEvent(const ChipDeviceEvent * event)
     }
 }
 
-CHIP_ERROR BLEManagerImpl::SubscribeCharacteristic(BLE_CONNECTION_OBJECT conId, const ChipBleUUID * svcId, const ChipBleUUID * charId)
+CHIP_ERROR BLEManagerImpl::SubscribeCharacteristic(BLE_CONNECTION_OBJECT conId, const ChipBleUUID * svcId,
+                                                   const ChipBleUUID * charId)
 {
     ChipLogProgress(DeviceLayer, "BLEManagerImpl::SubscribeCharacteristic() not supported");
     return CHIP_ERROR_NOT_IMPLEMENTED;
 }
 
-CHIP_ERROR BLEManagerImpl::UnsubscribeCharacteristic(BLE_CONNECTION_OBJECT conId, const ChipBleUUID * svcId, const ChipBleUUID * charId)
+CHIP_ERROR BLEManagerImpl::UnsubscribeCharacteristic(BLE_CONNECTION_OBJECT conId, const ChipBleUUID * svcId,
+                                                     const ChipBleUUID * charId)
 {
     ChipLogProgress(DeviceLayer, "BLEManagerImpl::UnsubscribeCharacteristic() not supported");
     return CHIP_ERROR_NOT_IMPLEMENTED;
@@ -518,7 +519,7 @@ uint16_t BLEManagerImpl::GetMTU(BLE_CONNECTION_OBJECT conId) const
 }
 
 CHIP_ERROR BLEManagerImpl::SendWriteRequest(BLE_CONNECTION_OBJECT conId, const ChipBleUUID * svcId, const ChipBleUUID * charId,
-                                      PacketBufferHandle pBuf)
+                                            PacketBufferHandle pBuf)
 {
     ChipLogError(DeviceLayer, "BLEManagerImpl::SendWriteRequest() not supported");
     return CHIP_ERROR_NOT_IMPLEMENTED;
@@ -531,7 +532,7 @@ void BLEManagerImpl::NotifyChipConnectionClosed(BLE_CONNECTION_OBJECT conId)
 }
 
 CHIP_ERROR BLEManagerImpl::SendIndication(BLE_CONNECTION_OBJECT conId, const ChipBleUUID * svcId, const ChipBleUUID * charId,
-                                    PacketBufferHandle data)
+                                          PacketBufferHandle data)
 {
     CHIP_ERROR err = CHIP_NO_ERROR;
 
@@ -550,8 +551,8 @@ exit:
 CHIP_ERROR BLEManagerImpl::ConfigureAdvertisingData()
 {
     CHIP_ERROR err;
-    uint8_t advData[MAX_ADV_DATA_LEN] = { 0 };
-    uint8_t rspData[MAX_RSP_DATA_LEN] = { 0 };
+    uint8_t advData[MAX_ADV_DATA_LEN]                                                      = { 0 };
+    uint8_t rspData[MAX_RSP_DATA_LEN]                                                      = { 0 };
     char serialNumberString[DeviceLayer::ConfigurationManager::kMaxSerialNumberLength + 1] = { 0 };
     ChipBLEDeviceIdentificationInfo deviceIdInfo;
     uint8_t index = 0;
@@ -610,10 +611,10 @@ CHIP_ERROR BLEManagerImpl::ConfigureAdvertisingData()
     index = 0;
 
     /**************** Prepare scan response data *******************************************/
-    rspData[index++] = 0x00;           // length
-    rspData[index++] = 0xFF;           // GAP_ADTYPE_MANUFACTURER_SPECIFIC
+    rspData[index++] = 0x00; // length
+    rspData[index++] = 0xFF; // GAP_ADTYPE_MANUFACTURER_SPECIFIC
     rspData[index++] = 0x5D;
-    rspData[index++] = 0x00;           // Company Id
+    rspData[index++] = 0x00; // Company Id
 
     err = GetDeviceInstanceInfoProvider()->GetSerialNumber(serialNumberString, sizeof(serialNumberString));
     if (err == CHIP_NO_ERROR)
@@ -858,14 +859,14 @@ CHIP_ERROR BLEManagerImpl::HandleGapMsg(T_IO_MSG * p_gap_msg)
 {
     T_LE_GAP_MSG gap_msg;
     memcpy(&gap_msg, &p_gap_msg->u.param, sizeof(p_gap_msg->u.param));
-    CHIP_ERROR err      = CHIP_NO_ERROR;
+    CHIP_ERROR err = CHIP_NO_ERROR;
 
     ChipLogProgress(DeviceLayer, "HandleGapMsg subtype: %d", p_gap_msg->subtype);
     switch (p_gap_msg->subtype)
     {
     case GAP_MSG_LE_CONN_STATE_CHANGE:
         /* A new connection was established or a connection attempt failed */
-         {
+        {
             uint16_t conn_id    = gap_msg.msg_data.gap_conn_state_change.conn_id;
             uint16_t new_state  = gap_msg.msg_data.gap_conn_state_change.new_state;
             uint16_t disc_cause = gap_msg.msg_data.gap_conn_state_change.disc_cause;
@@ -881,30 +882,29 @@ CHIP_ERROR BLEManagerImpl::HandleGapMsg(T_IO_MSG * p_gap_msg)
                 err = sInstance.HandleGAPDisconnect(conn_id, disc_cause);
                 SuccessOrExit(err);
             }
-         }
+        }
         break;
 
-    case GAP_MSG_LE_DEV_STATE_CHANGE:
+    case GAP_MSG_LE_DEV_STATE_CHANGE: {
+        T_GAP_DEV_STATE new_state = gap_msg.msg_data.gap_dev_state_change.new_state;
+        ChipLogProgress(DeviceLayer, "HandleGapMsg: init state %d, adv state %d, cause 0x%x", new_state.gap_init_state,
+                        new_state.gap_adv_state, gap_msg.msg_data.gap_dev_state_change.cause);
+
+        if (new_state.gap_init_state == GAP_INIT_STATE_STACK_READY)
         {
-            T_GAP_DEV_STATE new_state =  gap_msg.msg_data.gap_dev_state_change.new_state;
-            ChipLogProgress(DeviceLayer, "HandleGapMsg: init state %d, adv state %d, cause 0x%x",
-                            new_state.gap_init_state, new_state.gap_adv_state, gap_msg.msg_data.gap_dev_state_change.cause);        
-            
-            if (new_state.gap_init_state == GAP_INIT_STATE_STACK_READY)
-            {
-                ChipLogProgress(DeviceLayer, "GAP stack ready");
-            }
+            ChipLogProgress(DeviceLayer, "GAP stack ready");
+        }
 
-            if (new_state.gap_adv_state == GAP_ADV_STATE_IDLE)
-            {
-                ChipLogProgress(DeviceLayer,"GAP adv stoped");
-            }
-            else if (new_state.gap_adv_state == GAP_ADV_STATE_ADVERTISING)
-            {
-                ChipLogProgress(DeviceLayer,"GAP adv start");
-            }
+        if (new_state.gap_adv_state == GAP_ADV_STATE_IDLE)
+        {
+            ChipLogProgress(DeviceLayer, "GAP adv stoped");
         }
-        break;
+        else if (new_state.gap_adv_state == GAP_ADV_STATE_ADVERTISING)
+        {
+            ChipLogProgress(DeviceLayer, "GAP adv start");
+        }
+    }
+    break;
 
     default:
         break;
@@ -951,32 +951,27 @@ CHIP_ERROR BLEManagerImpl::gatt_svr_chr_access(T_SERVER_ID service_id, TBTCONFIG
             break;
 
         case SERVICE_CALLBACK_TYPE_WRITE_CHAR_VALUE:
-            sInstance.HandleRXCharWrite(p_data->msg_data.write.p_value,
-                                        p_data->msg_data.write.len,
-                                        p_data->conn_id);
+            sInstance.HandleRXCharWrite(p_data->msg_data.write.p_value, p_data->msg_data.write.len, p_data->conn_id);
             break;
 
-        case SERVICE_CALLBACK_TYPE_INDIFICATION_NOTIFICATION:
+        case SERVICE_CALLBACK_TYPE_INDIFICATION_NOTIFICATION: {
+            T_MATTER_BLE_CBACK_DATA * pp_data = (T_MATTER_BLE_CBACK_DATA *) p_data;
+
+            switch (pp_data->msg_data.indication_index)
             {
-                T_MATTER_BLE_CBACK_DATA * pp_data = (T_MATTER_BLE_CBACK_DATA *)p_data;
-
-                switch (pp_data->msg_data.indication_index)
-                {
-                case MATTER_BLE_SERVICE_INDICATE_V3_ENABLE:
-                    {
-                        sInstance.HandleTXCharCCCDWrite(p_data->conn_id, 1);
-                    }
-                    break;
-
-                case MATTER_BLE_SERVICE_INDICATE_V3_DISABLE:
-                    {
-                        sInstance.HandleTXCharCCCDWrite(p_data->conn_id, 0);
-                    }
-                    break;
-                }
+            case MATTER_BLE_SERVICE_INDICATE_V3_ENABLE: {
+                sInstance.HandleTXCharCCCDWrite(p_data->conn_id, 1);
             }
             break;
 
+            case MATTER_BLE_SERVICE_INDICATE_V3_DISABLE: {
+                sInstance.HandleTXCharCCCDWrite(p_data->conn_id, 0);
+            }
+            break;
+            }
+        }
+        break;
+
         default:
             break;
         }
diff --git a/src/platform/Realtek_bee/BLEManagerImpl.h b/src/platform/Realtek_bee/BLEManagerImpl.h
old mode 100755
new mode 100644
index 9a9cd89dc7..1ab2935a8a
--- a/src/platform/Realtek_bee/BLEManagerImpl.h
+++ b/src/platform/Realtek_bee/BLEManagerImpl.h
@@ -20,26 +20,22 @@
 
 #if CHIP_DEVICE_CONFIG_ENABLE_CHIPOBLE
 #include "FreeRTOS.h"
-#include "event_groups.h"
-#include "timers.h"
 #include "app_msg.h"
+#include "event_groups.h"
 #include "matter_ble.h"
 #include "matter_ble_service.h"
+#include "timers.h"
 
-namespace chip
-{
-namespace DeviceLayer
-{
-namespace Internal
-{
+namespace chip {
+namespace DeviceLayer {
+namespace Internal {
 
 using namespace chip::Ble;
 
 /**
  * Concrete implementation of the BLEManager singleton object for the Realtek platforms.
  */
-class BLEManagerImpl final : public BLEManager, private BleLayer, private BlePlatformDelegate,
-    private BleApplicationDelegate
+class BLEManagerImpl final : public BLEManager, private BleLayer, private BlePlatformDelegate, private BleApplicationDelegate
 {
     // Allow the BLEManager interface class to delegate method calls to
     // the implementation methods provided by this class.
@@ -54,26 +50,24 @@ private:
     CHIP_ERROR _SetAdvertisingEnabled(bool val);
     bool _IsAdvertising(void);
     CHIP_ERROR _SetAdvertisingMode(BLEAdvertisingMode mode);
-    CHIP_ERROR _GetDeviceName(char *buf, size_t bufSize);
-    CHIP_ERROR _SetDeviceName(const char *deviceName);
+    CHIP_ERROR _GetDeviceName(char * buf, size_t bufSize);
+    CHIP_ERROR _SetDeviceName(const char * deviceName);
     uint16_t _NumConnections(void);
-    void _OnPlatformEvent(const ChipDeviceEvent *event);
-    BleLayer *_GetBleLayer(void);
+    void _OnPlatformEvent(const ChipDeviceEvent * event);
+    BleLayer * _GetBleLayer(void);
 
     // ===== Members that implement virtual methods on BlePlatformDelegate.
 
-    CHIP_ERROR SubscribeCharacteristic(BLE_CONNECTION_OBJECT conId, const Ble::ChipBleUUID *svcId,
-                                 const Ble::ChipBleUUID *charId) override;
-    CHIP_ERROR UnsubscribeCharacteristic(BLE_CONNECTION_OBJECT conId, const Ble::ChipBleUUID *svcId,
-                                   const Ble::ChipBleUUID *charId) override;
+    CHIP_ERROR SubscribeCharacteristic(BLE_CONNECTION_OBJECT conId, const Ble::ChipBleUUID * svcId,
+                                       const Ble::ChipBleUUID * charId) override;
+    CHIP_ERROR UnsubscribeCharacteristic(BLE_CONNECTION_OBJECT conId, const Ble::ChipBleUUID * svcId,
+                                         const Ble::ChipBleUUID * charId) override;
     CHIP_ERROR CloseConnection(BLE_CONNECTION_OBJECT conId) override;
     uint16_t GetMTU(BLE_CONNECTION_OBJECT conId) const override;
-    CHIP_ERROR SendIndication(BLE_CONNECTION_OBJECT conId, const Ble::ChipBleUUID *svcId,
-                        const Ble::ChipBleUUID *charId,
-                        System::PacketBufferHandle pBuf) override;
-    CHIP_ERROR SendWriteRequest(BLE_CONNECTION_OBJECT conId, const Ble::ChipBleUUID *svcId,
-                          const Ble::ChipBleUUID *charId,
-                          System::PacketBufferHandle pBuf) override;
+    CHIP_ERROR SendIndication(BLE_CONNECTION_OBJECT conId, const Ble::ChipBleUUID * svcId, const Ble::ChipBleUUID * charId,
+                              System::PacketBufferHandle pBuf) override;
+    CHIP_ERROR SendWriteRequest(BLE_CONNECTION_OBJECT conId, const Ble::ChipBleUUID * svcId, const Ble::ChipBleUUID * charId,
+                                System::PacketBufferHandle pBuf) override;
 
     // ===== Members that implement virtual methods on BleApplicationDelegate.
 
@@ -81,8 +75,8 @@ private:
 
     // ===== Members for internal use by the following friends.
 
-    friend BLEManager &BLEMgr(void);
-    friend BLEManagerImpl &BLEMgrImpl(void);
+    friend BLEManager & BLEMgr(void);
+    friend BLEManagerImpl & BLEMgrImpl(void);
 
     static BLEManagerImpl sInstance;
 
@@ -132,12 +126,12 @@ private:
     CHIP_ERROR StopAdvertising(void);
     CHIP_ERROR ConfigureAdvertisingData(void);
 
-    static void HandleFastAdvertisementTimer(System::Layer *systemLayer, void *context);
+    static void HandleFastAdvertisementTimer(System::Layer * systemLayer, void * context);
     void HandleFastAdvertisementTimer();
 
     void HandleRXCharWrite(uint8_t *, uint16_t, uint8_t);
-    void HandleTXCharRead(void *param);
-    void HandleTXCharCCCDRead(void *param);
+    void HandleTXCharRead(void * param);
+    void HandleTXCharCCCDRead(void * param);
     void HandleTXCharCCCDWrite(int, int);
     CHIP_ERROR HandleTXComplete(int);
     CHIP_ERROR HandleGAPConnect(uint16_t);
@@ -149,16 +143,14 @@ private:
     bool RemoveConnection(uint8_t connectionHandle);
     void AddConnection(uint8_t connectionHandle);
 
-    BLEManagerImpl::CHIPoBLEConState *GetConnectionState(uint8_t connectionHandle, bool allocate);
+    BLEManagerImpl::CHIPoBLEConState * GetConnectionState(uint8_t connectionHandle, bool allocate);
 
 #if CHIP_ENABLE_ADDITIONAL_DATA_ADVERTISING
-    void HandleC3CharRead(TBTCONFIG_CALLBACK_DATA *p_data);
+    void HandleC3CharRead(TBTCONFIG_CALLBACK_DATA * p_data);
 #endif
-    static CHIP_ERROR HandleGapMsg(T_IO_MSG *p_gap_msg);
-    static CHIP_ERROR gatt_svr_chr_access(T_SERVER_ID service_id,
-                                          TBTCONFIG_CALLBACK_DATA  *p_data);
-    static int ble_callback_dispatcher(void *p_cb_data, int type,
-                                       T_CHIP_BLEMGR_CALLBACK_TYPE callback_type);
+    static CHIP_ERROR HandleGapMsg(T_IO_MSG * p_gap_msg);
+    static CHIP_ERROR gatt_svr_chr_access(T_SERVER_ID service_id, TBTCONFIG_CALLBACK_DATA * p_data);
+    static int ble_callback_dispatcher(void * p_cb_data, int type, T_CHIP_BLEMGR_CALLBACK_TYPE callback_type);
 
     static void DriveBLEState(intptr_t arg);
     static void BleAdvTimeoutHandler(TimerHandle_t xTimer);
@@ -172,7 +164,7 @@ private:
  * Internal components should use this to access features of the BLEManager object
  * that are common to all platforms.
  */
-inline BLEManager &BLEMgr(void)
+inline BLEManager & BLEMgr(void)
 {
     return BLEManagerImpl::sInstance;
 }
@@ -183,12 +175,12 @@ inline BLEManager &BLEMgr(void)
  * Internal components can use this to gain access to features of the BLEManager
  * that are specific to the platforms.
  */
-inline BLEManagerImpl &BLEMgrImpl(void)
+inline BLEManagerImpl & BLEMgrImpl(void)
 {
     return BLEManagerImpl::sInstance;
 }
 
-inline BleLayer *BLEManagerImpl::_GetBleLayer()
+inline BleLayer * BLEManagerImpl::_GetBleLayer()
 {
     return this;
 }
diff --git a/src/platform/Realtek_bee/BUILD.gn b/src/platform/Realtek_bee/BUILD.gn
index 26d642f3ae..e01adec9a0 100755
--- a/src/platform/Realtek_bee/BUILD.gn
+++ b/src/platform/Realtek_bee/BUILD.gn
@@ -24,6 +24,8 @@ static_library("Realtek_bee") {
     "../SingletonConfigurationManager.cpp",
     "BLEManagerImpl.cpp",
     "BLEManagerImpl.h",
+    "BeeConfig.cpp",
+    "BeeConfig.h",
     "BlePlatformConfig.h",
     "CHIPDevicePlatformConfig.h",
     "CHIPDevicePlatformEvent.h",
@@ -38,18 +40,16 @@ static_library("Realtek_bee") {
     "FactoryDataDecoder.h",
     "FactoryDataProvider.cpp",
     "FactoryDataProvider.h",
+    "InetPlatformConfig.h",
     "KeyValueStoreManagerImpl.cpp",
     "KeyValueStoreManagerImpl.h",
-    "InetPlatformConfig.h",
     "OTAImageProcessorImpl.cpp",
     "PlatformManagerImpl.cpp",
     "PlatformManagerImpl.h",
     "SystemPlatformConfig.h",
-    "BeeConfig.cpp",
-    "BeeConfig.h",
   ]
 
- deps = [
+  deps = [
     "${chip_root}/src/lib/dnssd:platform_header",
     "${chip_root}/src/platform/logging:headers",
     "${chip_root}/src/setup_payload",
@@ -62,13 +62,12 @@ static_library("Realtek_bee") {
   public_configs = []
 
   if (chip_enable_openthread) {
-
     sources += [
-      "../OpenThread/OpenThreadUtils.cpp",
       "../OpenThread/GenericNetworkCommissioningThreadDriver.cpp",
       "../OpenThread/GenericNetworkCommissioningThreadDriver.h",
-      "../OpenThread/OpenThreadDnssdImpl.h",
       "../OpenThread/OpenThreadDnssdImpl.cpp",
+      "../OpenThread/OpenThreadDnssdImpl.h",
+      "../OpenThread/OpenThreadUtils.cpp",
       "ThreadStackManagerImpl.cpp",
       "ThreadStackManagerImpl.h",
     ]
@@ -85,7 +84,5 @@ source_set("logging") {
     "${chip_root}/src/platform:platform_base",
     "${chip_root}/src/platform/logging:headers",
   ]
-  sources = [
-    "Logging.cpp",
-  ]
+  sources = [ "Logging.cpp" ]
 }
diff --git a/src/platform/Realtek_bee/BeeConfig.cpp b/src/platform/Realtek_bee/BeeConfig.cpp
old mode 100755
new mode 100644
index a11fbd8844..8c01e07369
--- a/src/platform/Realtek_bee/BeeConfig.cpp
+++ b/src/platform/Realtek_bee/BeeConfig.cpp
@@ -19,13 +19,13 @@
 /* this file behaves like a config.h, comes first */
 #include <platform/internal/CHIPDeviceLayerInternal.h>
 
+#include "chip_porting.h"
 #include <core/CHIPEncoding.h>
 #include <platform/Realtek_bee/BeeConfig.h>
 #include <support/CHIPMem.h>
 #include <support/CHIPMemString.h>
 #include <support/CodeUtils.h>
 #include <support/logging/CHIPLogging.h>
-#include "chip_porting.h"
 
 enum
 {
diff --git a/src/platform/Realtek_bee/CHIPDevicePlatformConfig.h b/src/platform/Realtek_bee/CHIPDevicePlatformConfig.h
index b53f70bedc..27a9a7c094 100755
--- a/src/platform/Realtek_bee/CHIPDevicePlatformConfig.h
+++ b/src/platform/Realtek_bee/CHIPDevicePlatformConfig.h
@@ -62,4 +62,3 @@
 #define CHIP_DEVICE_CONFIG_ENABLE_WIFI_TELEMETRY 0
 #define CHIP_DEVICE_CONFIG_ENABLE_THREAD_TELEMETRY 0
 #define CHIP_DEVICE_CONFIG_ENABLE_THREAD_TELEMETRY_FULL 0
-
diff --git a/src/platform/Realtek_bee/CHIPDevicePlatformEvent.h b/src/platform/Realtek_bee/CHIPDevicePlatformEvent.h
old mode 100755
new mode 100644
index b81b4e9701..edbe753a20
--- a/src/platform/Realtek_bee/CHIPDevicePlatformEvent.h
+++ b/src/platform/Realtek_bee/CHIPDevicePlatformEvent.h
@@ -28,15 +28,12 @@
 namespace chip {
 namespace DeviceLayer {
 
-
-
 /**
  * Represents platform-specific event information
  */
 struct ChipDevicePlatformEvent final
 {
     // TODO - add platform specific definition extension
-
 };
 
 } // namespace DeviceLayer
diff --git a/src/platform/Realtek_bee/ConfigurationManagerImpl.cpp b/src/platform/Realtek_bee/ConfigurationManagerImpl.cpp
index 8b331566ae..271ea7ef95 100644
--- a/src/platform/Realtek_bee/ConfigurationManagerImpl.cpp
+++ b/src/platform/Realtek_bee/ConfigurationManagerImpl.cpp
@@ -24,9 +24,9 @@
 /* this file behaves like a config.h, comes first */
 #include <platform/internal/CHIPDeviceLayerInternal.h>
 
-#include <platform/Realtek_bee/BeeConfig.h>
 #include <platform/ConfigurationManager.h>
 #include <platform/DiagnosticDataProvider.h>
+#include <platform/Realtek_bee/BeeConfig.h>
 #include <platform/internal/GenericConfigurationManagerImpl.ipp>
 #include <support/CodeUtils.h>
 #include <support/logging/CHIPLogging.h>
@@ -118,8 +118,6 @@ CHIP_ERROR ConfigurationManagerImpl::StoreBootReason(uint32_t bootReason)
     return WriteConfigValue(BeeConfig::kCounterKey_BootReason, bootReason);
 }
 
-
-
 bool ConfigurationManagerImpl::CanFactoryReset()
 {
     // TODO: query the application to determine if factory reset is allowed.
diff --git a/src/platform/Realtek_bee/ConfigurationManagerImpl.h b/src/platform/Realtek_bee/ConfigurationManagerImpl.h
index ec1d526647..c8b59312e3 100644
--- a/src/platform/Realtek_bee/ConfigurationManagerImpl.h
+++ b/src/platform/Realtek_bee/ConfigurationManagerImpl.h
@@ -24,8 +24,8 @@
 
 #pragma once
 
-#include <platform/Realtek_bee/BeeConfig.h>
 #include <platform/ConnectivityManager.h>
+#include <platform/Realtek_bee/BeeConfig.h>
 #include <platform/internal/GenericConfigurationManagerImpl.h>
 
 namespace chip {
@@ -50,7 +50,7 @@ private:
     // ===== Members that implement the ConfigurationManager public interface.
 
     CHIP_ERROR Init(void) override;
-    //CHIP_ERROR GetPrimaryWiFiMACAddress(uint8_t * buf) override;
+    // CHIP_ERROR GetPrimaryWiFiMACAddress(uint8_t * buf) override;
     bool CanFactoryReset(void) override;
     void InitiateFactoryReset(void) override;
     CHIP_ERROR ReadPersistedStorageValue(::chip::Platform::PersistedStorage::Key key, uint32_t & value) override;
diff --git a/src/platform/Realtek_bee/DiagnosticDataProviderImpl.cpp b/src/platform/Realtek_bee/DiagnosticDataProviderImpl.cpp
old mode 100755
new mode 100644
index b9b10aa28f..11ced13536
--- a/src/platform/Realtek_bee/DiagnosticDataProviderImpl.cpp
+++ b/src/platform/Realtek_bee/DiagnosticDataProviderImpl.cpp
@@ -54,14 +54,14 @@ CHIP_ERROR DiagnosticDataProviderImpl::GetCurrentHeapFree(uint64_t & currentHeap
 CHIP_ERROR DiagnosticDataProviderImpl::GetCurrentHeapUsed(uint64_t & currentHeapUsed)
 {
     size_t usedHeapSize = NS_HEAP_SIZE - os_mem_peek(RAM_TYPE_DATA_ON);
-    currentHeapUsed = static_cast<uint64_t>(usedHeapSize);
+    currentHeapUsed     = static_cast<uint64_t>(usedHeapSize);
     return CHIP_NO_ERROR;
 }
 
 CHIP_ERROR DiagnosticDataProviderImpl::GetCurrentHeapHighWatermark(uint64_t & currentHeapHighWatermark)
 {
     size_t highestHeapUsageRecorded = NS_HEAP_SIZE - xPortGetMinimumEverFreeHeapSize(RAM_TYPE_DATA_ON);
-    currentHeapHighWatermark = static_cast<uint64_t>(highestHeapUsageRecorded);
+    currentHeapHighWatermark        = static_cast<uint64_t>(highestHeapUsageRecorded);
     return CHIP_NO_ERROR;
 }
 
@@ -82,7 +82,7 @@ CHIP_ERROR DiagnosticDataProviderImpl::GetThreadMetrics(ThreadMetrics ** threadM
 
     arraySize = uxTaskGetNumberOfTasks();
 
-    taskStatusArray = (TaskStatus_t *)os_mem_alloc(RAM_TYPE_DATA_ON, arraySize * sizeof(TaskStatus_t));
+    taskStatusArray = (TaskStatus_t *) os_mem_alloc(RAM_TYPE_DATA_ON, arraySize * sizeof(TaskStatus_t));
 
     if (taskStatusArray != NULL)
     {
@@ -93,7 +93,7 @@ CHIP_ERROR DiagnosticDataProviderImpl::GetThreadMetrics(ThreadMetrics ** threadM
 
         for (x = 0; x < arraySize; x++)
         {
-            ThreadMetrics * thread = (ThreadMetrics *)os_mem_alloc(RAM_TYPE_DATA_ON, sizeof(ThreadMetrics));
+            ThreadMetrics * thread = (ThreadMetrics *) os_mem_alloc(RAM_TYPE_DATA_ON, sizeof(ThreadMetrics));
 
             Platform::CopyString(thread->NameBuf, taskStatusArray[x].pcTaskName);
             thread->name.Emplace(CharSpan::fromCharString(thread->NameBuf));
@@ -151,7 +151,7 @@ CHIP_ERROR DiagnosticDataProviderImpl::GetBootReason(BootReasonType & bootReason
 {
     uint32_t reason = 0;
 
-    CHIP_ERROR err  = ConfigurationMgr().GetBootReason(reason);
+    CHIP_ERROR err = ConfigurationMgr().GetBootReason(reason);
 
     if (err == CHIP_NO_ERROR)
     {
@@ -241,7 +241,8 @@ CHIP_ERROR DiagnosticDataProviderImpl::GetNetworkInterfaces(NetworkInterface **
     ifp->isOperational             = true;
     ifp->offPremiseServicesReachableIPv4.SetNull();
     ifp->offPremiseServicesReachableIPv6.SetNull();
-    ifp->type = app::Clusters::GeneralDiagnostics::InterfaceTypeEnum::kThread;;
+    ifp->type = app::Clusters::GeneralDiagnostics::InterfaceTypeEnum::kThread;
+    ;
 
     otExtAddress extAddr;
     ThreadStackMgrImpl().GetExtAddress(extAddr);
diff --git a/src/platform/Realtek_bee/DiagnosticDataProviderImpl.h b/src/platform/Realtek_bee/DiagnosticDataProviderImpl.h
old mode 100755
new mode 100644
index ef1f714405..dbf4edea65
--- a/src/platform/Realtek_bee/DiagnosticDataProviderImpl.h
+++ b/src/platform/Realtek_bee/DiagnosticDataProviderImpl.h
@@ -26,10 +26,8 @@
 
 #include <platform/DiagnosticDataProvider.h>
 
-namespace chip
-{
-namespace DeviceLayer
-{
+namespace chip {
+namespace DeviceLayer {
 
 /**
  * Concrete implementation of the PlatformManager singleton object for Realtek platforms.
@@ -37,30 +35,30 @@ namespace DeviceLayer
 class DiagnosticDataProviderImpl : public DiagnosticDataProvider
 {
 public:
-    static DiagnosticDataProviderImpl &GetDefaultInstance();
+    static DiagnosticDataProviderImpl & GetDefaultInstance();
 
     // ===== Methods that implement the DiagnosticDataProvider abstract interface.
 
     bool SupportsWatermarks() override { return false; }
     // Heap diag
-    CHIP_ERROR GetCurrentHeapFree(uint64_t &currentHeapFree) override;
-    CHIP_ERROR GetCurrentHeapUsed(uint64_t &currentHeapUsed) override;
-    CHIP_ERROR GetCurrentHeapHighWatermark(uint64_t &currentHeapHighWatermark) override;
+    CHIP_ERROR GetCurrentHeapFree(uint64_t & currentHeapFree) override;
+    CHIP_ERROR GetCurrentHeapUsed(uint64_t & currentHeapUsed) override;
+    CHIP_ERROR GetCurrentHeapHighWatermark(uint64_t & currentHeapHighWatermark) override;
     CHIP_ERROR ResetWatermarks() override;
-    CHIP_ERROR GetThreadMetrics(ThreadMetrics **threadMetricsOut) override;
-    void ReleaseThreadMetrics(ThreadMetrics *threadMetrics) override;
+    CHIP_ERROR GetThreadMetrics(ThreadMetrics ** threadMetricsOut) override;
+    void ReleaseThreadMetrics(ThreadMetrics * threadMetrics) override;
     // Uptime diag
-    CHIP_ERROR GetRebootCount(uint16_t &rebootCount) override;
-    CHIP_ERROR GetBootReason(BootReasonType &bootReason) override;
-    CHIP_ERROR GetUpTime(uint64_t &upTime) override;
-    CHIP_ERROR GetTotalOperationalHours(uint32_t &totalOperationalHours) override;
+    CHIP_ERROR GetRebootCount(uint16_t & rebootCount) override;
+    CHIP_ERROR GetBootReason(BootReasonType & bootReason) override;
+    CHIP_ERROR GetUpTime(uint64_t & upTime) override;
+    CHIP_ERROR GetTotalOperationalHours(uint32_t & totalOperationalHours) override;
     // Fault diag
-    CHIP_ERROR GetActiveHardwareFaults(GeneralFaults<kMaxHardwareFaults> &hardwareFaults) override;
-    CHIP_ERROR GetActiveRadioFaults(GeneralFaults<kMaxRadioFaults> &radioFaults) override;
-    CHIP_ERROR GetActiveNetworkFaults(GeneralFaults<kMaxNetworkFaults> &networkFaults) override;
+    CHIP_ERROR GetActiveHardwareFaults(GeneralFaults<kMaxHardwareFaults> & hardwareFaults) override;
+    CHIP_ERROR GetActiveRadioFaults(GeneralFaults<kMaxRadioFaults> & radioFaults) override;
+    CHIP_ERROR GetActiveNetworkFaults(GeneralFaults<kMaxNetworkFaults> & networkFaults) override;
     // Network diag
-    CHIP_ERROR GetNetworkInterfaces(NetworkInterface **netifpp) override;
-    void ReleaseNetworkInterfaces(NetworkInterface *netifp) override;
+    CHIP_ERROR GetNetworkInterfaces(NetworkInterface ** netifpp) override;
+    void ReleaseNetworkInterfaces(NetworkInterface * netifp) override;
 };
 
 /**
@@ -69,7 +67,7 @@ public:
  * Applications can use this to gain access to features of the DiagnosticDataProvider
  * that are specific to the selected platform.
  */
-DiagnosticDataProvider &GetDiagnosticDataProviderImpl();
+DiagnosticDataProvider & GetDiagnosticDataProviderImpl();
 
 } // namespace DeviceLayer
 } // namespace chip
diff --git a/src/platform/Realtek_bee/FactoryDataDecoder.cpp b/src/platform/Realtek_bee/FactoryDataDecoder.cpp
index 5a29a86fb1..4be8227fe0 100644
--- a/src/platform/Realtek_bee/FactoryDataDecoder.cpp
+++ b/src/platform/Realtek_bee/FactoryDataDecoder.cpp
@@ -17,14 +17,13 @@
 
 #include "FactoryDataDecoder.h"
 #include "chip_porting.h"
-#include <platform/internal/CHIPDeviceLayerInternal.h>
 #include "matter_utils.h"
+#include <platform/internal/CHIPDeviceLayerInternal.h>
 
 namespace chip {
 namespace DeviceLayer {
 
-extern "C"
-{
+extern "C" {
 
 CHIP_ERROR FactoryDataDecoder::ReadFactoryData(uint8_t * buffer, uint32_t buffer_len, uint16_t * pfactorydata_len)
 {
@@ -45,7 +44,6 @@ CHIP_ERROR FactoryDataDecoder::DecodeFactoryData(uint8_t * buffer, FactoryData *
 
     return CHIP_NO_ERROR;
 }
-
 }
 } // namespace DeviceLayer
 } // namespace chip
diff --git a/src/platform/Realtek_bee/FactoryDataProvider.cpp b/src/platform/Realtek_bee/FactoryDataProvider.cpp
index 82bc7735e6..75f31ea4fd 100644
--- a/src/platform/Realtek_bee/FactoryDataProvider.cpp
+++ b/src/platform/Realtek_bee/FactoryDataProvider.cpp
@@ -23,10 +23,10 @@
 #include <lib/support/Base64.h>
 #include <lib/support/BytesToHex.h>
 #include <lib/support/Span.h>
-#include <platform/Realtek_bee/CHIPDevicePlatformConfig.h>
 #include <platform/CHIPDeviceConfig.h>
 #include <platform/CHIPDeviceLayer.h>
 #include <platform/ConnectivityManager.h>
+#include <platform/Realtek_bee/CHIPDevicePlatformConfig.h>
 #include <platform/internal/CHIPDeviceLayerInternal.h>
 #include <platform/internal/GenericConfigurationManagerImpl.ipp>
 
@@ -38,29 +38,23 @@ namespace chip {
 namespace DeviceLayer {
 
 #if FACTORY_TEST
-void buf_dump(const char *title, uint8_t *buf, uint32_t data_len)
+void buf_dump(const char * title, uint8_t * buf, uint32_t data_len)
 {
     const uint32_t bat_num = 8;
-    uint32_t times = data_len / bat_num;
-    uint32_t residue = data_len % bat_num;
-    uint8_t *residue_buf = buf + times * bat_num;
+    uint32_t times         = data_len / bat_num;
+    uint32_t residue       = data_len % bat_num;
+    uint8_t * residue_buf  = buf + times * bat_num;
 
-    ChipLogProgress(DeviceLayer, "buf_dump: data_len %d, times %d, residue %d", data_len,
-                     times, residue);
-    ChipLogProgress(DeviceLayer, "buf_dump: buf is 0x%08x, residue_buf is 0x%08x\r\n",
-                     (uint32_t)buf,
-                     (uint32_t)residue_buf);
+    ChipLogProgress(DeviceLayer, "buf_dump: data_len %d, times %d, residue %d", data_len, times, residue);
+    ChipLogProgress(DeviceLayer, "buf_dump: buf is 0x%08x, residue_buf is 0x%08x\r\n", (uint32_t) buf, (uint32_t) residue_buf);
 
     ChipLogProgress(DeviceLayer, "@@@@@@@@@@@@@@@@@@@@@%s@@@@@@@@@@@@@@@@@@@@@@@@@@@", title);
 
     for (int32_t i = 0; i < times; i++)
     {
         ChipLogProgress(DeviceLayer, "buf_dump: 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x\r\n",
-                         buf[i * bat_num], buf[i * bat_num + 1], buf[i * bat_num + 2],
-                         buf[i * bat_num + 3],
-                         buf[i * bat_num + 4], buf[i * bat_num + 5],
-                         buf[i * bat_num + 6],
-                         buf[i * bat_num + 7]);
+                        buf[i * bat_num], buf[i * bat_num + 1], buf[i * bat_num + 2], buf[i * bat_num + 3], buf[i * bat_num + 4],
+                        buf[i * bat_num + 5], buf[i * bat_num + 6], buf[i * bat_num + 7]);
     }
 
     switch (residue)
@@ -72,25 +66,23 @@ void buf_dump(const char *title, uint8_t *buf, uint32_t data_len)
         ChipLogProgress(DeviceLayer, "buf_dump: 0x%02x, 0x%02x\r\n", residue_buf[0], residue_buf[1]);
         break;
     case 3:
-        ChipLogProgress(DeviceLayer, "buf_dump: 0x%02x, 0x%02x, 0x%02x\r\n", residue_buf[0], residue_buf[1],
-                         residue_buf[2]);
+        ChipLogProgress(DeviceLayer, "buf_dump: 0x%02x, 0x%02x, 0x%02x\r\n", residue_buf[0], residue_buf[1], residue_buf[2]);
         break;
     case 4:
-        ChipLogProgress(DeviceLayer, "buf_dump: 0x%02x, 0x%02x, 0x%02x, 0x%02x\r\n", residue_buf[0],
-                         residue_buf[1], residue_buf[2], residue_buf[3]);
+        ChipLogProgress(DeviceLayer, "buf_dump: 0x%02x, 0x%02x, 0x%02x, 0x%02x\r\n", residue_buf[0], residue_buf[1], residue_buf[2],
+                        residue_buf[3]);
         break;
     case 5:
-        ChipLogProgress(DeviceLayer, "buf_dump: 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x\r\n",
-                         residue_buf[0], residue_buf[1], residue_buf[2], residue_buf[3], residue_buf[4]);
+        ChipLogProgress(DeviceLayer, "buf_dump: 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x\r\n", residue_buf[0], residue_buf[1],
+                        residue_buf[2], residue_buf[3], residue_buf[4]);
         break;
     case 6:
-        ChipLogProgress(DeviceLayer, "buf_dump: 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x\r\n",
-                         residue_buf[0], residue_buf[1], residue_buf[2], residue_buf[3], residue_buf[4], residue_buf[5]);
+        ChipLogProgress(DeviceLayer, "buf_dump: 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x\r\n", residue_buf[0], residue_buf[1],
+                        residue_buf[2], residue_buf[3], residue_buf[4], residue_buf[5]);
         break;
     case 7:
-        ChipLogProgress(DeviceLayer, "buf_dump: 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x\r\n",
-                         residue_buf[0], residue_buf[1], residue_buf[2], residue_buf[3], residue_buf[4], residue_buf[5],
-                         residue_buf[6]);
+        ChipLogProgress(DeviceLayer, "buf_dump: 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x\r\n", residue_buf[0],
+                        residue_buf[1], residue_buf[2], residue_buf[3], residue_buf[4], residue_buf[5], residue_buf[6]);
         break;
 
     default:
@@ -101,7 +93,6 @@ void buf_dump(const char *title, uint8_t *buf, uint32_t data_len)
 }
 #endif
 
-
 // TODO: This should be moved to a method of P256Keypair
 CHIP_ERROR LoadKeypairFromRaw(ByteSpan private_key, ByteSpan public_key, Crypto::P256Keypair & keypair)
 {
@@ -117,11 +108,11 @@ CHIP_ERROR FactoryDataProvider::Init()
     CHIP_ERROR err = CHIP_NO_ERROR;
 
 #if CONFIG_FACTORY_DATA
-    #define BUFFER_LEN (1024*3)
-    uint8_t* buffer = (uint8_t*)malloc(BUFFER_LEN); // FactoryData won't overflow 2KB
+#define BUFFER_LEN (1024 * 3)
+    uint8_t * buffer         = (uint8_t *) malloc(BUFFER_LEN); // FactoryData won't overflow 2KB
     uint16_t factorydata_len = 0x5A5A;
 
-    if(buffer)
+    if (buffer)
     {
         FactoryDataDecoder decoder = FactoryDataDecoder::GetInstance();
         err                        = decoder.ReadFactoryData(buffer, BUFFER_LEN, &factorydata_len);
@@ -158,7 +149,6 @@ CHIP_ERROR FactoryDataProvider::Init()
         free(buffer);
     }
 
-
 #endif // CONFIG_FACTORY_DATA
 
     return err;
@@ -449,7 +439,7 @@ CHIP_ERROR FactoryDataProvider::GetSpake2pVerifier(MutableByteSpan & verifierBuf
     verifierB64Len = strlen(CHIP_DEVICE_CONFIG_USE_TEST_SPAKE2P_VERIFIER);
     VerifyOrReturnError(verifierB64Len <= sizeof(verifierB64), CHIP_ERROR_BUFFER_TOO_SMALL);
     memcpy(verifierB64, CHIP_DEVICE_CONFIG_USE_TEST_SPAKE2P_VERIFIER, verifierB64Len);
-    err           = CHIP_NO_ERROR;
+    err = CHIP_NO_ERROR;
 #endif // defined(CHIP_DEVICE_CONFIG_USE_TEST_SPAKE2P_VERIFIER)
 #endif // CONFIG_FACTORY_DATA
 
@@ -592,7 +582,7 @@ CHIP_ERROR FactoryDataProvider::GetSerialNumber(char * buf, size_t bufSize)
     VerifyOrReturnError(serialNumLen < bufSize, CHIP_ERROR_BUFFER_TOO_SMALL);
     VerifyOrReturnError(buf[serialNumLen] == 0, CHIP_ERROR_INVALID_STRING_LENGTH);
 
-    err = CHIP_NO_ERROR;
+    err             = CHIP_NO_ERROR;
 #endif // CONFIG_FACTORY_DATA
 
     return err;
@@ -603,37 +593,37 @@ CHIP_ERROR FactoryDataProvider::GetManufacturingDate(uint16_t & year, uint8_t &
     CHIP_ERROR err = CHIP_DEVICE_ERROR_CONFIG_NOT_FOUND;
 
 #if CONFIG_FACTORY_DATA
-    #if FACTORY_TEST
-        err = CHIP_ERROR_UNSUPPORTED_CHIP_FEATURE;
-    #else
-        enum
-        {
-            kDateStringLength = 10 // YYYY-MM-DD
-        };
-        char * parseEnd;
-        size_t dateLen;
-        dateLen = mFactoryData.dii.mfg_date.len;
-        VerifyOrExit(dateLen == kDateStringLength, err = CHIP_ERROR_INVALID_ARGUMENT);
-
-        // Cast does not lose information, because we then check that we only parsed
-        // 4 digits, so our number can't be bigger than 9999.
-        year = static_cast<uint16_t>(strtoul((char *) mFactoryData.dii.mfg_date.value, &parseEnd, 10));
-        VerifyOrExit(parseEnd == (char *) mFactoryData.dii.mfg_date.value + 4, err = CHIP_ERROR_INVALID_ARGUMENT);
-
-        // Cast does not lose information, because we then check that we only parsed
-        // 2 digits, so our number can't be bigger than 99.
-        month = static_cast<uint8_t>(strtoul((char *) mFactoryData.dii.mfg_date.value + 5, &parseEnd, 10));
-        VerifyOrExit(parseEnd == (char *) mFactoryData.dii.mfg_date.value + 7, err = CHIP_ERROR_INVALID_ARGUMENT);
-
-        // Cast does not lose information, because we then check that we only parsed
-        // 2 digits, so our number can't be bigger than 99.
-        day = static_cast<uint8_t>(strtoul((char *) mFactoryData.dii.mfg_date.value + 8, &parseEnd, 10));
-        VerifyOrExit(parseEnd == (char *) mFactoryData.dii.mfg_date.value + 10, err = CHIP_ERROR_INVALID_ARGUMENT);
-
-        err = CHIP_NO_ERROR;
-    #endif
-#else
+#if FACTORY_TEST
     err = CHIP_ERROR_UNSUPPORTED_CHIP_FEATURE;
+#else
+    enum
+    {
+        kDateStringLength = 10 // YYYY-MM-DD
+    };
+    char * parseEnd;
+    size_t dateLen;
+    dateLen = mFactoryData.dii.mfg_date.len;
+    VerifyOrExit(dateLen == kDateStringLength, err = CHIP_ERROR_INVALID_ARGUMENT);
+
+    // Cast does not lose information, because we then check that we only parsed
+    // 4 digits, so our number can't be bigger than 9999.
+    year = static_cast<uint16_t>(strtoul((char *) mFactoryData.dii.mfg_date.value, &parseEnd, 10));
+    VerifyOrExit(parseEnd == (char *) mFactoryData.dii.mfg_date.value + 4, err = CHIP_ERROR_INVALID_ARGUMENT);
+
+    // Cast does not lose information, because we then check that we only parsed
+    // 2 digits, so our number can't be bigger than 99.
+    month = static_cast<uint8_t>(strtoul((char *) mFactoryData.dii.mfg_date.value + 5, &parseEnd, 10));
+    VerifyOrExit(parseEnd == (char *) mFactoryData.dii.mfg_date.value + 7, err = CHIP_ERROR_INVALID_ARGUMENT);
+
+    // Cast does not lose information, because we then check that we only parsed
+    // 2 digits, so our number can't be bigger than 99.
+    day = static_cast<uint8_t>(strtoul((char *) mFactoryData.dii.mfg_date.value + 8, &parseEnd, 10));
+    VerifyOrExit(parseEnd == (char *) mFactoryData.dii.mfg_date.value + 10, err = CHIP_ERROR_INVALID_ARGUMENT);
+
+    err             = CHIP_NO_ERROR;
+#endif
+#else
+    err             = CHIP_ERROR_UNSUPPORTED_CHIP_FEATURE;
 #endif // CONFIG_FACTORY_DATA
 
 exit:
@@ -649,12 +639,12 @@ CHIP_ERROR FactoryDataProvider::GetHardwareVersion(uint16_t & hardwareVersion)
     CHIP_ERROR err = CHIP_DEVICE_ERROR_CONFIG_NOT_FOUND;
 
 #if CONFIG_FACTORY_DATA
-    #if FACTORY_TEST
+#if FACTORY_TEST
     err = CHIP_ERROR_UNSUPPORTED_CHIP_FEATURE;
-    #else
-        hardwareVersion = mFactoryData.dii.hw_ver;
-        err             = CHIP_NO_ERROR;
-    #endif
+#else
+    hardwareVersion = mFactoryData.dii.hw_ver;
+    err             = CHIP_NO_ERROR;
+#endif
 #else
     hardwareVersion = static_cast<uint16_t>(CHIP_DEVICE_CONFIG_DEFAULT_DEVICE_HARDWARE_VERSION);
     err             = CHIP_NO_ERROR;
@@ -710,4 +700,4 @@ CHIP_ERROR FactoryDataProvider::GetRotatingDeviceIdUniqueId(MutableByteSpan & un
 }
 
 } // namespace DeviceLayer
-} // namespace chip
\ No newline at end of file
+} // namespace chip
diff --git a/src/platform/Realtek_bee/KeyValueStoreManagerImpl.cpp b/src/platform/Realtek_bee/KeyValueStoreManagerImpl.cpp
old mode 100755
new mode 100644
index b2add10dbb..52f0e7ee3e
--- a/src/platform/Realtek_bee/KeyValueStoreManagerImpl.cpp
+++ b/src/platform/Realtek_bee/KeyValueStoreManagerImpl.cpp
@@ -35,22 +35,22 @@ KeyValueStoreManagerImpl KeyValueStoreManagerImpl::sInstance;
 CHIP_ERROR KeyValueStoreManagerImpl::_Get(const char * key, void * value, size_t value_size, size_t * read_bytes_size,
                                           size_t offset_bytes)
 {
-    CHIP_ERROR err = CHIP_NO_ERROR;
-    int32_t result = -1;
+    CHIP_ERROR err           = CHIP_NO_ERROR;
+    int32_t result           = -1;
     size_t actual_read_bytes = 0;
 
     VerifyOrExit(key, err = CHIP_ERROR_INVALID_ARGUMENT);
-    if(value_size)
+    if (value_size)
     {
         VerifyOrExit(value, err = CHIP_ERROR_INVALID_ARGUMENT);
     }
     else
     {
-        if(matter_kvs_key_find(key))
+        if (matter_kvs_key_find(key))
         {
             return err = CHIP_ERROR_BUFFER_TOO_SMALL;
         }
-        return  err = CHIP_ERROR_PERSISTED_STORAGE_VALUE_NOT_FOUND;
+        return err = CHIP_ERROR_PERSISTED_STORAGE_VALUE_NOT_FOUND;
     }
 
     if (offset_bytes > 0)
@@ -61,11 +61,11 @@ CHIP_ERROR KeyValueStoreManagerImpl::_Get(const char * key, void * value, size_t
     }
 
     result = matter_kvs_get(key, value, value_size, &actual_read_bytes);
-    if(MATTER_KVS_LOOKUP_NOT_FOUND == result)//to add 
+    if (MATTER_KVS_LOOKUP_NOT_FOUND == result) // to add
     {
         err = CHIP_ERROR_PERSISTED_STORAGE_VALUE_NOT_FOUND;
     }
-    if(read_bytes_size)
+    if (read_bytes_size)
     {
         *read_bytes_size = actual_read_bytes;
     }
@@ -77,15 +77,15 @@ exit:
 CHIP_ERROR KeyValueStoreManagerImpl::_Put(const char * key, const void * value, size_t value_size)
 {
     CHIP_ERROR err = CHIP_NO_ERROR;
-	int32_t error;
+    int32_t error;
     int32_t result = -1;
 
-    //ChipLogError(DeviceLayer, "[KeyValueStoreManagerImpl_Put] Bee4 put key(%s)", key);
+    // ChipLogError(DeviceLayer, "[KeyValueStoreManagerImpl_Put] Bee4 put key(%s)", key);
     VerifyOrExit((key != NULL) && (value != NULL), err = CHIP_ERROR_INVALID_ARGUMENT);
     result = matter_kvs_put(key, value, value_size);
-    if(MATTER_KVS_LOOKUP_NOT_FOUND == result)//to add
+    if (MATTER_KVS_LOOKUP_NOT_FOUND == result) // to add
     {
-        //ChipLogError(DeviceLayer, "[KeyValueStoreManagerImpl_Put] Bee4 put key");
+        // ChipLogError(DeviceLayer, "[KeyValueStoreManagerImpl_Put] Bee4 put key");
         err = CHIP_ERROR_PERSISTED_STORAGE_VALUE_NOT_FOUND;
     }
 
@@ -97,12 +97,12 @@ CHIP_ERROR KeyValueStoreManagerImpl::_Delete(const char * key)
 {
     CHIP_ERROR err = CHIP_NO_ERROR;
     int32_t result = -1;
-    //ChipLogProgress(DeviceLayer, "[KeyValueStoreManagerImpl_Delete][INFO] Bee4 delete key (%s)", key);
+    // ChipLogProgress(DeviceLayer, "[KeyValueStoreManagerImpl_Delete][INFO] Bee4 delete key (%s)", key);
     VerifyOrExit(key != NULL, err = CHIP_ERROR_INVALID_ARGUMENT);
     result = matter_kvs_key_delete(key);
-    if(MATTER_KVS_LOOKUP_NOT_FOUND == result)//to add
+    if (MATTER_KVS_LOOKUP_NOT_FOUND == result) // to add
     {
-       // ChipLogProgress(DeviceLayer, "[KeyValueStoreManagerImpl_Delete][INFO] Bee4 delete key");
+        // ChipLogProgress(DeviceLayer, "[KeyValueStoreManagerImpl_Delete][INFO] Bee4 delete key");
         err = CHIP_ERROR_PERSISTED_STORAGE_VALUE_NOT_FOUND;
     }
 
diff --git a/src/platform/Realtek_bee/Logging.cpp b/src/platform/Realtek_bee/Logging.cpp
old mode 100755
new mode 100644
index aa8bd5d798..b0d9e62856
--- a/src/platform/Realtek_bee/Logging.cpp
+++ b/src/platform/Realtek_bee/Logging.cpp
@@ -4,19 +4,19 @@
 #include <core/CHIPConfig.h>
 #include <support/logging/Constants.h>
 
+#include "chip_porting.h"
 #include <cstdio>
 #include <ctype.h>
 #include <string.h>
-#include "chip_porting.h"
 
 #ifdef PW_RPC_ENABLED
 #include "PigweedLogger.h"
 #endif
 
-#include <openthread/logging.h>
 #include <openthread/cli.h>
+#include <openthread/logging.h>
 
-extern "C" int dbg_vprintf(const char * module, const char *format, va_list va);
+extern "C" int dbg_vprintf(const char * module, const char * format, va_list va);
 
 namespace chip {
 namespace DeviceLayer {
@@ -32,7 +32,6 @@ void __attribute__((weak)) OnLogOutput(void) {}
 } // namespace DeviceLayer
 } // namespace chip
 
-
 namespace chip {
 namespace Logging {
 namespace Platform {
@@ -43,7 +42,7 @@ void LogV(const char * module, uint8_t category, const char * msg, va_list v)
     // uint8_t level = otLoggingGetLevel();
     // if (category && category <= level)
     // {
-    //     dbg_vprintf(module, msg, v);  
+    //     dbg_vprintf(module, msg, v);
     // }
 }
 
diff --git a/src/platform/Realtek_bee/OTAImageProcessorImpl.cpp b/src/platform/Realtek_bee/OTAImageProcessorImpl.cpp
old mode 100755
new mode 100644
index aa0787110c..541e9c7104
--- a/src/platform/Realtek_bee/OTAImageProcessorImpl.cpp
+++ b/src/platform/Realtek_bee/OTAImageProcessorImpl.cpp
@@ -16,10 +16,10 @@
  *    limitations under the License.
  */
 
-#include <app/clusters/ota-requestor/OTADownloader.h>
-#include <app/clusters/ota-requestor/OTARequestorInterface.h>
 #include "OTAImageProcessorImpl.h"
 #include "matter_ota.h"
+#include <app/clusters/ota-requestor/OTADownloader.h>
+#include <app/clusters/ota-requestor/OTARequestorInterface.h>
 
 namespace chip {
 
@@ -78,8 +78,8 @@ CHIP_ERROR OTAImageProcessorImpl::ProcessHeader(ByteSpan & block)
         mParams.totalFileBytes = header.mPayloadSize;
         mHeaderParser.Clear();
 
-        ChipLogProgress(SoftwareUpdate, "ProcessHeader: vendorId 0x%x, productId 0x%x, payloadSize 0x%x",
-                        header.mVendorId, header.mProductId, header.mPayloadSize);
+        ChipLogProgress(SoftwareUpdate, "ProcessHeader: vendorId 0x%x, productId 0x%x, payloadSize 0x%x", header.mVendorId,
+                        header.mProductId, header.mPayloadSize);
     }
 
     return CHIP_NO_ERROR;
@@ -88,7 +88,7 @@ CHIP_ERROR OTAImageProcessorImpl::ProcessHeader(ByteSpan & block)
 CHIP_ERROR OTAImageProcessorImpl::Finalize()
 {
     ChipLogProgress(SoftwareUpdate, "Finalize");
-    
+
     DeviceLayer::PlatformMgr().ScheduleWork(HandleFinalize, reinterpret_cast<intptr_t>(this));
     return CHIP_NO_ERROR;
 }
@@ -144,7 +144,7 @@ void OTAImageProcessorImpl::HandlePrepareDownload(intptr_t context)
     // Initialize tracking variables
     imageProcessor->mParams.downloadedBytes = 0;
 
-    if(rtk_matter_ota_prepare() != 0)
+    if (rtk_matter_ota_prepare() != 0)
     {
         ChipLogError(SoftwareUpdate, "HandlePrepareDownload: rtk_matter_ota_prepare failed");
         return;
@@ -204,8 +204,8 @@ void OTAImageProcessorImpl::HandleProcessBlock(intptr_t context)
         return;
     }
 
-    ByteSpan block       = imageProcessor->mBlock;
-    CHIP_ERROR error     = imageProcessor->ProcessHeader(block);
+    ByteSpan block   = imageProcessor->mBlock;
+    CHIP_ERROR error = imageProcessor->ProcessHeader(block);
     if (error != CHIP_NO_ERROR)
     {
         ChipLogError(SoftwareUpdate, "Failed to process OTA image header");
@@ -213,8 +213,7 @@ void OTAImageProcessorImpl::HandleProcessBlock(intptr_t context)
         return;
     }
 
-    if (0 != rtk_matter_ota_process_block((uint8_t *)block.data(),
-                                          static_cast<std::uint16_t>(block.size())))
+    if (0 != rtk_matter_ota_process_block((uint8_t *) block.data(), static_cast<std::uint16_t>(block.size())))
     {
         ChipLogError(SoftwareUpdate, "Flash write failed");
         imageProcessor->mDownloader->EndDownload(CHIP_ERROR_WRITE_FAILED);
@@ -240,8 +239,7 @@ void OTAImageProcessorImpl::HandleApply(intptr_t context)
 
     DeviceLayer::SystemLayer().StartTimer(
         System::Clock::Seconds32(10),
-        [](chip::System::Layer *, void *)
-        {
+        [](chip::System::Layer *, void *) {
             ChipLogProgress(SoftwareUpdate, "Rebooting...");
             rtk_matter_ota_apply();
         },
diff --git a/src/platform/Realtek_bee/OTAImageProcessorImpl.h b/src/platform/Realtek_bee/OTAImageProcessorImpl.h
old mode 100755
new mode 100644
index f2f0d1db0e..31f85afaba
--- a/src/platform/Realtek_bee/OTAImageProcessorImpl.h
+++ b/src/platform/Realtek_bee/OTAImageProcessorImpl.h
@@ -23,8 +23,7 @@
 #include <platform/CHIPDeviceLayer.h>
 #include <platform/OTAImageProcessor.h>
 
-namespace chip
-{
+namespace chip {
 
 class OTAImageProcessorImpl : public OTAImageProcessorInterface
 {
@@ -34,15 +33,15 @@ public:
     CHIP_ERROR Finalize() override;
     CHIP_ERROR Apply() override;
     CHIP_ERROR Abort() override;
-    CHIP_ERROR ProcessBlock(ByteSpan &block) override;
+    CHIP_ERROR ProcessBlock(ByteSpan & block) override;
     bool IsFirstImageRun() override;
     CHIP_ERROR ConfirmCurrentImage() override;
 
-    void SetOTADownloader(OTADownloader *downloader) { mDownloader = downloader; }
+    void SetOTADownloader(OTADownloader * downloader) { mDownloader = downloader; }
 
 private:
     //////////// Actual handlers for the OTAImageProcessorInterface ///////////////
-    CHIP_ERROR  ProcessHeader(ByteSpan &block);
+    CHIP_ERROR ProcessHeader(ByteSpan & block);
     static void HandlePrepareDownload(intptr_t context);
     static void HandleFinalize(intptr_t context);
     static void HandleAbort(intptr_t context);
@@ -52,7 +51,7 @@ private:
     /**
      * Called to allocate memory for mBlock if necessary and set it to block
      */
-    CHIP_ERROR SetBlock(ByteSpan &block);
+    CHIP_ERROR SetBlock(ByteSpan & block);
 
     /**
      * Called to release allocated memory for mBlock
@@ -63,7 +62,7 @@ private:
     std::uint32_t mHwVer;
 
     MutableByteSpan mBlock;
-    OTADownloader *mDownloader = nullptr;
+    OTADownloader * mDownloader = nullptr;
     OTAImageHeaderParser mHeaderParser;
 };
 
diff --git a/src/platform/Realtek_bee/PlatformManagerImpl.cpp b/src/platform/Realtek_bee/PlatformManagerImpl.cpp
old mode 100755
new mode 100644
index e04c87dba5..9c3cc98f44
--- a/src/platform/Realtek_bee/PlatformManagerImpl.cpp
+++ b/src/platform/Realtek_bee/PlatformManagerImpl.cpp
@@ -25,18 +25,18 @@
 #include <platform/internal/CHIPDeviceLayerInternal.h>
 
 #include <crypto/CHIPCryptoPAL.h>
-//#include <platform/Bee/DiagnosticDataProviderImpl.h>
+// #include <platform/Bee/DiagnosticDataProviderImpl.h>
 #include <platform/FreeRTOS/SystemTimeSupport.h>
-//#include <platform/Bee/SystemTimeSupport.h>
+// #include <platform/Bee/SystemTimeSupport.h>
+#include "chip_porting.h"
 #include <platform/PlatformManager.h>
 #include <platform/internal/GenericPlatformManagerImpl_FreeRTOS.ipp>
-#include "chip_porting.h"
 
 namespace chip {
 namespace DeviceLayer {
-//namespace Internal {
-//CHIP_ERROR InitLwIPCoreLock(void);
-//}
+// namespace Internal {
+// CHIP_ERROR InitLwIPCoreLock(void);
+// }
 
 PlatformManagerImpl PlatformManagerImpl::sInstance;
 
@@ -45,19 +45,19 @@ CHIP_ERROR PlatformManagerImpl::_InitChipStack(void)
     CHIP_ERROR err;
 
     // Make sure the LwIP core lock has been initialized
-    //err = Internal::InitLwIPCoreLock();
+    // err = Internal::InitLwIPCoreLock();
 
-//    SuccessOrExit(err);
+    //    SuccessOrExit(err);
 
-//    mStartTime = System::SystemClock().GetMonotonicTimestamp();
+    //    mStartTime = System::SystemClock().GetMonotonicTimestamp();
     err = System::Clock::InitClock_RealTime();
     SuccessOrExit(err);
 
     // TODO Wi-Fi Initialzation currently done through the example app needs to be moved into here.
     // for now we will let this happen that way and assume all is OK
 
-	// Initialize LwIP.
-	tcpip_init(NULL, NULL);
+    // Initialize LwIP.
+    tcpip_init(NULL, NULL);
 
     chip::Crypto::add_entropy_source(app_entropy_source, NULL, 1);
 
diff --git a/src/platform/Realtek_bee/ThreadStackManagerImpl.cpp b/src/platform/Realtek_bee/ThreadStackManagerImpl.cpp
old mode 100755
new mode 100644
index d57ab5bbd9..87f87b1ac1
--- a/src/platform/Realtek_bee/ThreadStackManagerImpl.cpp
+++ b/src/platform/Realtek_bee/ThreadStackManagerImpl.cpp
@@ -26,7 +26,7 @@
 #include <platform/internal/CHIPDeviceLayerInternal.h>
 
 #include <platform/FreeRTOS/GenericThreadStackManagerImpl_FreeRTOS.hpp>
-//#include <platform/OpenThread/GenericThreadStackManagerImpl_OpenThread.cpp>
+// #include <platform/OpenThread/GenericThreadStackManagerImpl_OpenThread.cpp>
 #include <platform/OpenThread/GenericThreadStackManagerImpl_OpenThread_LwIP.cpp>
 
 #include <platform/OpenThread/OpenThreadUtils.h>
@@ -38,7 +38,7 @@
 #include <openthread/heap.h>
 #include <platforms/openthread-system.h>
 
-extern void otSysInit(int argc, char *argv[]);
+extern void otSysInit(int argc, char * argv[]);
 
 namespace chip {
 namespace DeviceLayer {
@@ -56,17 +56,17 @@ CHIP_ERROR ThreadStackManagerImpl::InitThreadStack(otInstance * otInst)
 {
     CHIP_ERROR err = CHIP_NO_ERROR;
 
-	ChipLogProgress(DeviceLayer, "ThreadStackManagerImpl::InitThreadStack");
-	// Initialize the OpenThread platform layer
-	otSysInit(0, NULL);
+    ChipLogProgress(DeviceLayer, "ThreadStackManagerImpl::InitThreadStack");
+    // Initialize the OpenThread platform layer
+    otSysInit(0, NULL);
 
     // Initialize the generic implementation base classes.
-	ChipLogProgress(DeviceLayer, "GenericThreadStackManagerImpl_FreeRTOS<ThreadStackManagerImpl>::DoInit");
+    ChipLogProgress(DeviceLayer, "GenericThreadStackManagerImpl_FreeRTOS<ThreadStackManagerImpl>::DoInit");
     err = GenericThreadStackManagerImpl_FreeRTOS<ThreadStackManagerImpl>::DoInit();
     SuccessOrExit(err);
-//  err = GenericThreadStackManagerImpl_OpenThread<ThreadStackManagerImpl>::DoInit(otInst);
-	ChipLogProgress(DeviceLayer, "GenericThreadStackManagerImpl_OpenThread_LwIP<ThreadStackManagerImpl>::DoInit");
-	err = GenericThreadStackManagerImpl_OpenThread_LwIP<ThreadStackManagerImpl>::DoInit(otInst);
+    //  err = GenericThreadStackManagerImpl_OpenThread<ThreadStackManagerImpl>::DoInit(otInst);
+    ChipLogProgress(DeviceLayer, "GenericThreadStackManagerImpl_OpenThread_LwIP<ThreadStackManagerImpl>::DoInit");
+    err = GenericThreadStackManagerImpl_OpenThread_LwIP<ThreadStackManagerImpl>::DoInit(otInst);
     SuccessOrExit(err);
 
 exit:
@@ -79,7 +79,7 @@ void ThreadStackManagerImpl::GetExtAddress(otExtAddress & aExtAddr)
     LockThreadStack();
     extAddr = otLinkGetExtendedAddress(OTInstance());
     UnlockThreadStack();
- 
+
     memcpy(aExtAddr.m8, extAddr->m8, OT_EXT_ADDRESS_SIZE);
 }
 
@@ -88,7 +88,6 @@ bool ThreadStackManagerImpl::IsInitialized()
     return sInstance.mThreadStackLock != NULL;
 }
 
-
 } // namespace DeviceLayer
 } // namespace chip
 
diff --git a/src/platform/Realtek_bee/ThreadStackManagerImpl.h b/src/platform/Realtek_bee/ThreadStackManagerImpl.h
old mode 100755
new mode 100644
index eeab47aa9a..73dbe3ee83
--- a/src/platform/Realtek_bee/ThreadStackManagerImpl.h
+++ b/src/platform/Realtek_bee/ThreadStackManagerImpl.h
@@ -25,7 +25,7 @@
 #pragma once
 
 #include <platform/FreeRTOS/GenericThreadStackManagerImpl_FreeRTOS.h>
-//#include <platform/OpenThread/GenericThreadStackManagerImpl_OpenThread.h>
+// #include <platform/OpenThread/GenericThreadStackManagerImpl_OpenThread.h>
 #include <platform/OpenThread/GenericThreadStackManagerImpl_OpenThread_LwIP.h>
 
 #include <openthread/tasklet.h>
diff --git a/src/platform/Realtek_bee/args.gni b/src/platform/Realtek_bee/args.gni
index e378142f55..2d84ba5fd0 100755
--- a/src/platform/Realtek_bee/args.gni
+++ b/src/platform/Realtek_bee/args.gni
@@ -25,4 +25,4 @@ lwip_debug = false
 chip_inet_config_enable_ipv4 = false
 chip_inet_config_enable_tcp_endpoint = false
 
-chip_build_tests = false
\ No newline at end of file
+chip_build_tests = false
diff --git a/third_party/bee_sdk/bee_sdk.gni b/third_party/bee_sdk/bee_sdk.gni
index 49449123d0..8fa73f4dfe 100755
--- a/third_party/bee_sdk/bee_sdk.gni
+++ b/third_party/bee_sdk/bee_sdk.gni
@@ -14,11 +14,10 @@
 
 import("//build_overrides/chip.gni")
 import("//build_overrides/mbedtls.gni")
+
 #import("//build_overrides/openthread.gni")
 import("//build_overrides/bee_sdk.gni")
-
 declare_args() {
   # Location of the BEE SDK.
   bee_sdk_root = "${chip_root}/third_party/bee_sdk"
 }
-
-- 
2.34.1

